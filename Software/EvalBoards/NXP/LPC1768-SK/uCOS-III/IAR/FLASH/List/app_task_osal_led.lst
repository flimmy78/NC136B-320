###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       18/Dec/2017  15:16:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_osal_led.c
#    Command line =  
#        "F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_osal_led.c"
#        -lCN "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app_task_osal_led.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app_task_osal_led.o
#
###############################################################################

F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_osal_led.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_led.c
      3           *   Revised:        All copyrights reserved to redmorningcn.
      4           *   Revision:       v1.0
      5           *   Writer:	     redmoringcn.
      6           *
      7           *   Description:    双击选中 led 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Led 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 LED 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_LED_PRIO ）
     14           *                                            和 任务堆栈（ APP_TASK_LED_STK_SIZE ）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskLedCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Led ）
     17           *
     18           *   Notes:
     19           *     				E-mail: redmorningcn@qq.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          #include <global.h>
     29          #include <app_ctrl.h>
     30          //#include <iap.h>
     31          
     32          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     33          const  CPU_CHAR  *app_task_led__c = "$Id: $";
     34          #endif
     35          
     36          #define APP_TASK_LED_EN     DEF_ENABLED
     37          #if APP_TASK_LED_EN == DEF_ENABLED
     38          /*******************************************************************************
     39           * CONSTANTS
     40           */
     41          #define CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ * 2u)
     42          
     43          /*******************************************************************************
     44           * MACROS
     45           */
     46          //#define     BSP_LED_NUM         8
     47          ////LED点亮次数 
     48          //#define     LED_TOGGLE_CNT      15
     49          
     50          
     51          /*******************************************************************************
     52           * TYPEDEFS
     53           */
     54          
     55          /*******************************************************************************
     56           * LOCAL VARIABLES
     57           */
     58          //
     59          //uint8   LedWorkTimes[BSP_LED_NUM + 1] = 0;
     60          
     61          #if ( OSAL_EN == DEF_ENABLED )
     62          #else
     63          /***********************************************
     64          * 描述： 任务控制块（TCB）
     65          */
     66          static  OS_TCB   AppTaskLedTCB;
     67          
     68          /***********************************************
     69          * 描述： 任务堆栈（STACKS）
     70          */
     71          //static  CPU_STK  AppTaskLedStk[ APP_TASK_LED_STK_SIZE ];
     72          
     73          #endif
     74          /*******************************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          /*******************************************************************************
     79           * LOCAL FUNCTIONS
     80           */
     81          #if ( OSAL_EN == DEF_ENABLED )
     82          #else
     83          static  void    AppTaskLed           (void *p_arg);
     84          #endif
     85          
     86          /*******************************************************************************
     87           * GLOBAL FUNCTIONS
     88           */
     89          
     90          /*******************************************************************************
     91           * EXTERN VARIABLES
     92           */
     93          extern  stcSysCtrl  sCtrl;
     94          
     95          /*******************************************************************************/
     96          
     97          
     98          /*******************************************************************************
     99           * 名    称： AppTaskLed
    100           * 功    能： 控制任务
    101           * 入口参数： p_arg - 由任务创建函数传入
    102           * 出口参数： 无
    103           * 作　 　者： wumingshen.
    104           * 创建日期： 2015-02-05
    105           * 修    改：
    106           * 修改日期：
    107           *******************************************************************************/
    108          
    109          //#if ( OSAL_EN == DEF_ENABLED )

   \                                 In section .text, align 2, keep-with-next
    110          osalEvt  TaskLedEvtProcess(INT8U task_id, osalEvt task_event)
    111          //#else
    112          //static  void  AppTaskLed (void *p_arg)
    113          //#endif
    114          {
   \                     TaskLedEvtProcess: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    115          //    OS_ERR      err;
    116          //    INT32U      ticks;
    117          //    INT32S      dly;
    118          //    CPU_SR_ALLOC();
    119          //    
    120          //    /***********************************************
    121          //    * 描述：Task body, always written as an infinite loop.
    122          //    */
    123          //#if ( OSAL_EN == DEF_ENABLED )
    124          //#else
    125          //    TaskInitLed();
    126          //    
    127          //    while (DEF_TRUE) {
    128          //#endif
    129          //        /***********************************************
    130          //        * 描述： 本任务看门狗标志置位
    131          //        */
    132          //        OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,
    133          //                     (OS_FLAGS     ) WDT_FLAG_LED,
    134          //                     (OS_OPT       ) OS_OPT_POST_FLAG_SET,
    135          //                     (CPU_TS       ) 0,
    136          //                     (OS_ERR      *) &err);
    137          //        /***********************************************
    138          //        * 描述： 得到系统当前时间
    139          //        */
    140          //        ticks = OSTimeGet(&err);
    141          //        
    142          //#if ( OSAL_EN == DEF_ENABLED )
    143                  if( task_event & OS_EVT_LED_TICKS ) {
   \   00000006   0x07E8             LSLS     R0,R5,#+31
   \   00000008   0xD542             BPL.N    ??TaskLedEvtProcess_0
    144          //#else
    145          //#endif
    146                      static  uint8   mode = 0;
    147                      static  uint8   dlytimes = 0;
    148                      /***********************************************
    149                      * 描述： 开机显示
    150                      */
    151                      while(mode < 5)
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2805             CMP      R0,#+5
   \   00000010   0xDA12             BGE.N    ??TaskLedEvtProcess_1
    152                      {
    153                          mode++;
   \   00000012   0x....             LDR.N    R0,??DataTable0
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable0
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    154                          
    155                          BSP_LED_Toggle(7);      //对应指示灯点亮
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0x.... 0x....      BL       BSP_LED_Toggle
    156                          BSP_LED_Toggle(8);
   \   00000022   0x2008             MOVS     R0,#+8
   \   00000024   0x.... 0x....      BL       BSP_LED_Toggle
    157                          ///BSP_LED_On(mode);
    158                          osal_start_timerEx( OS_TASK_ID_LED,
    159                                              OS_EVT_LED_TICKS,
    160                                              200);
   \   00000028   0x22C8             MOVS     R2,#+200
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2006             MOVS     R0,#+6
   \   0000002E   0x.... 0x....      BL       osal_start_timerEx
    161                          return ( task_event ^ OS_EVT_LED_TICKS );
   \   00000032   0xF095 0x0001      EORS     R0,R5,#0x1
   \   00000036   0xE02C             B.N      ??TaskLedEvtProcess_2
    162                      }
    163          //
    164          //            
    165          //            /***********************************************
    166          //            * 描述： MTR接口通讯指示,有通讯数据，指示灯闪烁
    167          //            */
    168          //
    169          //            /***********************************************
    170          //            * 描述： OTR接口通讯指示,有通讯数据，指示灯闪烁
    171          //            */
    172          //            if(sCtrl.Otr.ConnectFlag){
    173          //                BSP_LED_Toggle(2);  //对应指示灯点亮
    174          //            }else{
    175          //                BSP_LED_Off(2);     //对应指示灯点关闭
    176          //            }
    177          //            
    178          //
    179          //            /***********************************************
    180          //            * 描述： 有速度信号，指示灯闪烁。如果无速度信号，
    181          //            * 在取计算值超时清零。
    182          //            */
    183          //            if(sCtrl.sRec.Myspeed1){
    184          //                BSP_LED_Toggle(4);  //对应指示灯点亮
    185          //            }else{
    186          //                BSP_LED_Off(4);     //对应指示灯点关闭
    187          //            }
    188          //            
    189          //            /***********************************************
    190          //            * 描述： 有速度信号，指示灯闪烁
    191          //            * 无信号时，在取计算值超时清零。
    192          //            */
    193          //            if(sCtrl.sRec.Myspeed2){
    194          //                BSP_LED_Toggle(5);  //对应指示灯点亮
    195          //            }else{
    196          //                BSP_LED_Off(5);     //对应指示灯点关闭
    197          //            }
    198          //            
    199          //            /***********************************************
    200          //            * 描述： 有速度信号，指示灯闪烁
    201          //            * 无信号时，在取计算值超时时清零。
    202          //            */
    203          //            if(sCtrl.sRec.MyEngRotSpd){
    204          //                BSP_LED_Toggle(6);  //对应指示灯点亮
    205          //            }else{
    206          //                BSP_LED_Off(6);     //对应指示灯点关闭
    207          //            }
    208          //            
    209          //            /***********************************************
    210          //            * 描述： 工况有信号
    211          //            * 
    212          //            */
    213          //            if(sCtrl.sRec.MyLocoWorkState){
    214          //                BSP_LED_Toggle(7);  //对应指示灯点亮
    215          //            }else{
    216          //                BSP_LED_Off(7);     //对应指示灯点关闭
    217          //            }
    218                      
    219                      /***********************************************
    220                      * 描述： 运行指示灯
    221                      */
    222                      
    223                      if(sCtrl.sRunPara.plugcard == 1){
   \                     ??TaskLedEvtProcess_1: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable0_1
   \   0000003A   0xF890 0x00AD      LDRB     R0,[R0, #+173]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD103             BNE.N    ??TaskLedEvtProcess_3
    224                          BSP_LED_Toggle(7);  //对应指示灯点亮
   \   00000042   0x2007             MOVS     R0,#+7
   \   00000044   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000048   0xE002             B.N      ??TaskLedEvtProcess_4
    225                      }else
    226                      {
    227                          BSP_LED_Off(7);
   \                     ??TaskLedEvtProcess_3: (+1)
   \   0000004A   0x2007             MOVS     R0,#+7
   \   0000004C   0x.... 0x....      BL       BSP_LED_Off
    228                      }
    229                      if(sCtrl.Otr.ConnCtrl[0].ErrFlg == 0){  //通讯正常，快闪0.1s
   \                     ??TaskLedEvtProcess_4: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable0_1
   \   00000052   0xF890 0x020B      LDRB     R0,[R0, #+523]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD103             BNE.N    ??TaskLedEvtProcess_5
    230                          BSP_LED_Toggle(8);
   \   0000005A   0x2008             MOVS     R0,#+8
   \   0000005C   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000060   0xE00E             B.N      ??TaskLedEvtProcess_6
    231                      }else
    232                      {
    233                          dlytimes++;
   \                     ??TaskLedEvtProcess_5: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable0_2
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x....             LDR.N    R1,??DataTable0_2
   \   0000006A   0x7008             STRB     R0,[R1, #+0]
    234                          if(dlytimes > 5){   
   \   0000006C   0x....             LDR.N    R0,??DataTable0_2
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x2806             CMP      R0,#+6
   \   00000072   0xDB05             BLT.N    ??TaskLedEvtProcess_6
    235                              BSP_LED_Toggle(8);              //通讯异常，慢闪0.5s
   \   00000074   0x2008             MOVS     R0,#+8
   \   00000076   0x.... 0x....      BL       BSP_LED_Toggle
    236                              dlytimes = 0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x....             LDR.N    R1,??DataTable0_2
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    237                          }
    238                      }
    239                      
    240          //            LedWorkTimes[8] = LED_TOGGLE_CNT;
    241          
    242                      /***********************************************
    243                      * 描述： 根据工作次数，点亮相应的指示。
    244                      */
    245          //            for(uint8 i=1;i<BSP_LED_NUM+1;i++){
    246          //                if(LedWorkTimes[i]){
    247          //                    LedWorkTimes[i]--;
    248          //                    BSP_LED_Toggle(i);  //对应指示灯点亮
    249          //                }else{
    250          //                    BSP_LED_Off(i);     //对应指示灯点关闭
    251          //                }
    252          //            }
    253          
    254                      /***********************************************
    255                      * 描述： 定时器重启
    256                      */
    257                      osal_start_timerEx( OS_TASK_ID_LED,
    258                                          OS_EVT_LED_TICKS,
    259                                          50);
   \                     ??TaskLedEvtProcess_6: (+1)
   \   00000080   0x2232             MOVS     R2,#+50
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x2006             MOVS     R0,#+6
   \   00000086   0x.... 0x....      BL       osal_start_timerEx
    260                      return ( task_event ^ OS_EVT_LED_TICKS );
   \   0000008A   0xF095 0x0001      EORS     R0,R5,#0x1
   \   0000008E   0xE000             B.N      ??TaskLedEvtProcess_2
    261                  }
    262                  
    263                  return  task_event;
   \                     ??TaskLedEvtProcess_0: (+1)
   \   00000090   0x0028             MOVS     R0,R5
   \                     ??TaskLedEvtProcess_2: (+1)
   \   00000092   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    264          }

   \                                 In section .bss, align 1
   \                     ??mode:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??dlytimes:
   \   00000000                      DS8 1
    265          
    266          
    267          /*******************************************************************************
    268           * 名    称：APP_LedInit
    269           * 功    能：任务初始化
    270           * 入口参数：无
    271           * 出口参数：无
    272           * 作　 　者：redmorningcn.
    273           * 创建日期：2017-05-15
    274           * 修    改：
    275           * 修改日期：
    276           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    277          void TaskInitLed(void)
    278          {    
   \                     TaskInitLed: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    279          //    /***********************************************
    280          //    * 描述： 初始化本任务用到的相关硬件
    281          //    */
    282          //    BSP_LedInit();
    283          
    284              /***********************************************
    285              * 描述： 在看门狗标志组注册本任务的看门狗标志
    286              */
    287              //WdtFlags |= WDT_FLAG_LED;
    288              /*************************************************
    289              * 描述：启动事件查询
    290              */
    291          //    for(uint8 i = 0; i< 8;i++)
    292          //    {
    293          //        LedWorkTimes[i] = 0;
    294          //    }
    295          //    
    296              osal_start_timerEx( OS_TASK_ID_LED,
    297                                  OS_EVT_LED_TICKS,
    298                                  1000);
   \   00000002   0xF44F 0x727A      MOV      R2,#+1000
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2006             MOVS     R0,#+6
   \   0000000A   0x.... 0x....      BL       osal_start_timerEx
    299          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     ??mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     sCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     ??dlytimes
    300          
    301          /*******************************************************************************
    302           * 				                    end of file                                *
    303           *******************************************************************************/
    304          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TaskInitLed
         8   -> osal_start_timerEx
      16   TaskLedEvtProcess
        16   -> BSP_LED_Off
        16   -> BSP_LED_Toggle
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
      16  TaskInitLed
     148  TaskLedEvtProcess
       1  dlytimes
       1  mode

 
   2 bytes in section .bss
 176 bytes in section .text
 
 176 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
