###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       18/Dec/2017  17:20:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_comm.c
#    Command line =  
#        "F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_comm.c" -lCN
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app_task_comm.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app_task_comm.o
#
###############################################################################

F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_comm.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_comm.c
      3           *   Revised:        All copyrights reserved to wumingshen.
      4           *   Revision:       v1.0
      5           *   Writer:	     wumingshen.
      6           *
      7           *   Description:    双击选中 comm 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Comm 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 COMM 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_COMM_PRIO     ）
     14           *                                            和 任务堆栈（ APP_TASK_COMM_STK_SIZE ）大小
     15           *
     16           *   Notes:
     17           *     				E-mail: shenchangwei945@163.com
     18           *
     19           *******************************************************************************/
     20          
     21          /*******************************************************************************
     22           * INCLUDES
     23           */
     24          #define  SNL_APP_SOURCE
     25          #include <includes.h>
     26          #include <app_comm_protocol.h>
     27          #include <app_ctrl.h>
     28          #include <os_cfg_app.h>
     29          #include <CrcCheck.h>
     30          
     31          //#include <bsp_flash.h>
     32          //#include <iap.h>
     33          
     34          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     35          const  CPU_CHAR  *app_task_comm__c = "$Id: $";
     36          #endif
     37          
     38          #define APP_TASK_COMM_EN     DEF_ENABLED
     39          #if APP_TASK_COMM_EN == DEF_ENABLED
     40          /*******************************************************************************
     41           * CONSTANTS
     42           */
     43          
     44          /*******************************************************************************
     45           * MACROS
     46           */
     47          #define CYCLE_TIME_TICKS            (OS_TICKS_PER_SEC * 1)
     48          
     49          /*******************************************************************************
     50           * TYPEDEFS
     51           */
     52          
     53          
     54          
     55          /***********************************************
     56          * 描述： 任务控制块（TCB）
     57          */

   \                                 In section .bss, align 4
     58          static  OS_TCB   AppTaskCommTCB;
   \                     AppTaskCommTCB:
   \   00000000                      DS8 160
     59          
     60          /***********************************************
     61          * 描述： 任务堆栈（STACKS）
     62          */

   \                                 In section .bss, align 4
     63          static  CPU_STK  AppTaskCommStk[ APP_TASK_COMM_STK_SIZE ];
   \                     AppTaskCommStk:
   \   00000000                      DS8 2048
     64          
     65          //StrCtrlDCB       Ctrl;
     66          

   \                                 In section .bss, align 4
     67          OS_Q             MTR_RxQ;
   \                     MTR_RxQ:
   \   00000000                      DS8 48
     68          /*******************************************************************************
     69           * LOCAL VARIABLES
     70           */
     71          
     72          /*******************************************************************************
     73           * GLOBAL VARIABLES
     74           */
     75          
     76          /***********************************************
     77          * 描述： 软定时器声明
     78          */

   \                                 In section .bss, align 4
     79          OS_TMR          OSTmr1;                         //定时器1
   \                     OSTmr1:
   \   00000000                      DS8 48
     80          
     81          /***********************************************
     82          * 描述： 软定时器回调函数
     83          */
     84          void            OSTmr1_callback             (OS_TMR *ptmr,void *p_arg);
     85          CPU_BOOLEAN     APP_CSNC_CommHandler        (MODBUS_CH  *pch);
     86          CPU_BOOLEAN     APP_MaterCommHandler        (MODBUS_CH  *pch);
     87          
     88          /*******************************************************************************
     89           * LOCAL FUNCTIONS
     90           */
     91          static void    AppTaskComm                 (void *p_arg);
     92          static void    APP_CommInit                (void);
     93                  void    App_McuStatusInit           (void);
     94                  void    ReportDevStatusHandle       (void);
     95                  void    InformCommConfigMode        (u8 mode);
     96          static void    App_ModbusInit              (void);
     97          
     98          INT08U          APP_CommRxDataDealCB        (MODBUS_CH  *pch);
     99          INT08U          IAP_CommRxDataDealCB        (MODBUS_CH  *pch);
    100          /*******************************************************************************
    101           * GLOBAL FUNCTIONS
    102           */
    103          
    104          /*******************************************************************************
    105           * EXTERN VARIABLES
    106           */
    107          
    108           /*******************************************************************************
    109           * EXTERN FUNCTIONS
    110           */
    111          extern  void    app_comm_mtr(void);
    112          extern  void    app_comm_dtu(void);
    113          extern  void    app_comm_otr(void);
    114          
    115          unsigned char GetRecSlaveAddr(void);
    116          void    comm_para_flow(StrDevOtr * sDtu,uint8 addrnum);
    117          void    comm_rec_read (StrDevOtr * sDtu,uint8 addrnum);
    118          
    119          
    120          /*******************************************************************************/
    121          
    122          /*******************************************************************************
    123           * 名    称： App_TaskCommCreate
    124           * 功    能： **任务创建
    125           * 入口参数： 无
    126           * 出口参数： 无
    127           * 作　 　者： wumingshen.
    128           * 创建日期： 2015-02-05
    129           * 修    改：
    130           * 修改日期：
    131           * 备    注： 任务创建函数需要在app.h文件中声明
    132           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    133          void  App_TaskCommCreate(void)
    134          {
   \                     App_TaskCommCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    135              OS_ERR  err;
    136          
    137              /***********************************************
    138              * 描述： 任务创建
    139              */
    140              OSTaskCreate((OS_TCB     *)&AppTaskCommTCB,                     // 任务控制块  （当前文件中定义）
    141                           (CPU_CHAR   *)"App Task Comm",                     // 任务名称
    142                           (OS_TASK_PTR ) AppTaskComm,                        // 任务函数指针（当前文件中定义）
    143                           (void       *) 0,                                  // 任务函数参数
    144                           (OS_PRIO     ) APP_TASK_COMM_PRIO,                 // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    145                           (CPU_STK    *)&AppTaskCommStk[0],                  // 任务栈顶
    146                           (CPU_STK_SIZE) APP_TASK_COMM_STK_SIZE / 10,        // 任务栈溢出报警值
    147                           (CPU_STK_SIZE) APP_TASK_COMM_STK_SIZE,             // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    148                           (OS_MSG_QTY  ) 0u,                                 // 可以发送给任务的最大消息队列数量
    149                           (OS_TICK     ) 0u,                                 // 相同优先级任务的轮循时间（ms），0为默认
    150                           (void       *) 0,                                  // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    151                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |               // 允许堆栈检查该任务
    152                                          OS_OPT_TASK_STK_CLR),               // 创建任务时堆栈清零
    153                           (OS_ERR     *)&err);                               // 指向错误代码的指针，用于创建结果处理
   \   00000004   0xA809             ADD      R0,SP,#+36
   \   00000006   0x9008             STR      R0,[SP, #+32]
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x9007             STR      R0,[SP, #+28]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9006             STR      R0,[SP, #+24]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9005             STR      R0,[SP, #+20]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9004             STR      R0,[SP, #+16]
   \   00000018   0xF44F 0x7000      MOV      R0,#+512
   \   0000001C   0x9003             STR      R0,[SP, #+12]
   \   0000001E   0x2033             MOVS     R0,#+51
   \   00000020   0x9002             STR      R0,[SP, #+8]
   \   00000022   0x....             LDR.N    R0,??DataTable5
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x2031             MOVS     R0,#+49
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      ADR.W    R2,AppTaskComm
   \   00000030   0x....             LDR.N    R1,??DataTable5_1
   \   00000032   0x....             LDR.N    R0,??DataTable5_2
   \   00000034   0x.... 0x....      BL       OSTaskCreate
    154          
    155          }
   \   00000038   0xB00B             ADD      SP,SP,#+44
   \   0000003A   0xBD00             POP      {PC}             ;; return
    156          
    157          extern  void    OS_ProtocolInit(void);
    158          /*******************************************************************************
    159           * 名    称： AppTaskComm
    160           * 功    能： 控制任务
    161           * 入口参数： p_arg - 由任务创建函数传入
    162           * 出口参数： 无
    163           * 作　 　者： wumingshen.
    164           * 创建日期： 2015-02-05
    165           * 修    改：
    166           * 修改日期：
    167           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    168          static  void  AppTaskComm (void *p_arg)
    169          {
   \                     AppTaskComm: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    170              OS_ERR      err;
    171          
    172              OS_TICK     dly     = CYCLE_TIME_TICKS;
   \   00000004   0xF44F 0x757A      MOV      R5,#+1000
    173          //    OS_TICK     ticks;
    174              /***********************************************
    175              * 描述： 任务初始化
    176              
    177              */
    178              APP_CommInit();   
   \   00000008   0x.... 0x....      BL       APP_CommInit
    179              
    180              OS_ProtocolInit();
   \   0000000C   0x.... 0x....      BL       OS_ProtocolInit
    181                       
    182              /***********************************************
    183              * 描述： Task body, always written as an infinite loop.
    184              */
    185              while (DEF_TRUE) { 
    186                  /***********************************************
    187                  * 描述： 本任务看门狗标志置位
    188                  */
    189                  OSFlagPost(( OS_FLAG_GRP *)&WdtFlagGRP,
    190                              ( OS_FLAGS     ) WDT_FLAG_COMM,
    191                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    192                              ( OS_ERR      *) &err);
   \                     ??AppTaskComm_0: (+1)
   \   00000010   0xAB02             ADD      R3,SP,#+8
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x....             LDR.N    R0,??DataTable5_3
   \   00000018   0x.... 0x....      BL       OSFlagPost
    193                  
    194                  
    195                  /***********************************************
    196                  * 描述： 等待COMM的标识组
    197                  */
    198                  OS_FLAGS    flags = 
    199                  OSFlagPend( ( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    200                              ( OS_FLAGS     ) sCtrl.Os.CommEvtFlag,
    201                              ( OS_TICK      ) dly,
    202                              ( OS_OPT       ) OS_OPT_PEND_FLAG_SET_ANY,
    203                              ( CPU_TS      *) NULL,
    204                              ( OS_ERR      *)&err);
   \   0000001C   0xA802             ADD      R0,SP,#+8
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x2308             MOVS     R3,#+8
   \   00000026   0x002A             MOVS     R2,R5
   \   00000028   0x....             LDR.N    R0,??DataTable5_4
   \   0000002A   0xF8D0 0x1271      LDR      R1,[R0, #+625]
   \   0000002E   0x....             LDR.N    R0,??DataTable5_5
   \   00000030   0x.... 0x....      BL       OSFlagPend
   \   00000034   0x0006             MOVS     R6,R0
    205                  
    206          //        OS_ERR      terr;
    207          //        ticks   = OSTimeGet(&terr);                        // 获取当前OSTick
    208                  
    209          
    210                  /***********************************************
    211                  * 描述： 没有错误,有事件发生
    212                  */
    213                  if ( err == OS_ERR_NONE ) {
   \   00000036   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD12A             BNE.N    ??AppTaskComm_1
    214                      OS_FLAGS    flagClr = 0;
   \   0000003E   0x2700             MOVS     R7,#+0
    215          
    216                      /***********************************************
    217                      * 从机，如果收到数据通讯发起；或者有邋IC卡插入，同样发起通讯
    218                      */           
    219                      if(    flags & COMM_EVT_FLAG_PLUG_CARD) {
   \   00000040   0x0670             LSLS     R0,R6,#+25
   \   00000042   0xD506             BPL.N    ??AppTaskComm_2
    220          
    221          					comm_para_flow((StrDevOtr *)&sCtrl.Otr,0);   	//设置根据IC卡类型操作
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x....             LDR.N    R0,??DataTable5_6
   \   00000048   0x.... 0x....      BL       comm_para_flow
    222          					
    223          					flagClr |=  COMM_EVT_FLAG_PLUG_CARD;   			//插入IC卡
   \   0000004C   0xF057 0x0740      ORRS     R7,R7,#0x40
   \   00000050   0xE017             B.N      ??AppTaskComm_3
    224                         }else if( flags & COMM_EVT_FLAG_OTR_RX) {			//接收到数据
   \                     ??AppTaskComm_2: (+1)
   \   00000052   0x0770             LSLS     R0,R6,#+29
   \   00000054   0xD515             BPL.N    ??AppTaskComm_3
    225                         		//接收数据。 1、询问是否需要数据；2、数据记录
    226                              //BSP_LED_Toggle(8);
    227          
    228                         		if(sCtrl.Otr.RxCtrl.SourceAddr == MASTE_ADDR_HOST){	//主机地址
   \   00000056   0x....             LDR.N    R0,??DataTable5_4
   \   00000058   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   0000005C   0x2880             CMP      R0,#+128
   \   0000005E   0xD103             BNE.N    ??AppTaskComm_4
    229                         		
    230          						comm_rec_read((StrDevOtr *)&sCtrl.Otr,0);		//取数据记录
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x....             LDR.N    R0,??DataTable5_6
   \   00000064   0x.... 0x....      BL       comm_rec_read
    231          					}
    232                         			
    233                              sCtrl.Otr.ConnCtrl[0].TimeOut   = 0;
   \                     ??AppTaskComm_4: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x....             LDR.N    R1,??DataTable5_4
   \   0000006C   0xF881 0x020A      STRB     R0,[R1, #+522]
    234                              sCtrl.Otr.ConnCtrl[0].ErrFlg    = 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x....             LDR.N    R1,??DataTable5_4
   \   00000074   0xF881 0x020B      STRB     R0,[R1, #+523]
    235                              
    236                              BSP_LED_Toggle(8);
   \   00000078   0x2008             MOVS     R0,#+8
   \   0000007A   0x.... 0x....      BL       BSP_LED_Toggle
    237          
    238                         		flagClr |=  COMM_EVT_FLAG_OTR_RX;    				//接收到数据
   \   0000007E   0xF057 0x0704      ORRS     R7,R7,#0x4
    239                         	}
    240                      
    241                      /***********************************************
    242                      * 描述： 清除标志
    243                      */
    244                      if ( !flagClr ) {
   \                     ??AppTaskComm_3: (+1)
   \   00000082   0x2F00             CMP      R7,#+0
   \   00000084   0xD100             BNE.N    ??AppTaskComm_5
    245                          flagClr = flags;
   \   00000086   0x0037             MOVS     R7,R6
    246                      }
    247                      
    248                      /***********************************************
    249                      * 描述： 清除标志位
    250                      */
    251                      OSFlagPost( ( OS_FLAG_GRP  *)&sCtrl.Os.CommEvtFlagGrp,
    252                                  ( OS_FLAGS      )flagClr,
    253                                  ( OS_OPT        )OS_OPT_POST_FLAG_CLR,
    254                                  ( OS_ERR       *)&err);
   \                     ??AppTaskComm_5: (+1)
   \   00000088   0xAB02             ADD      R3,SP,#+8
   \   0000008A   0x2201             MOVS     R2,#+1
   \   0000008C   0x0039             MOVS     R1,R7
   \   0000008E   0x....             LDR.N    R0,??DataTable5_5
   \   00000090   0x.... 0x....      BL       OSFlagPost
    255                  }
    256                  
    257                  
    258                  if(sCtrl.Otr.ConnCtrl[0].TimeOut++ > 2)         //2秒没通讯
   \                     ??AppTaskComm_1: (+1)
   \   00000094   0x....             LDR.N    R0,??DataTable5_4
   \   00000096   0xF890 0x020A      LDRB     R0,[R0, #+522]
   \   0000009A   0x1C41             ADDS     R1,R0,#+1
   \   0000009C   0x....             LDR.N    R2,??DataTable5_4
   \   0000009E   0xF882 0x120A      STRB     R1,[R2, #+522]
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x2803             CMP      R0,#+3
   \   000000A6   0xDB03             BLT.N    ??AppTaskComm_6
    259                      sCtrl.Otr.ConnCtrl[0].ErrFlg = 1;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x....             LDR.N    R1,??DataTable5_4
   \   000000AC   0xF881 0x020B      STRB     R0,[R1, #+523]
    260                  BSP_OS_TimeDly(5);
   \                     ??AppTaskComm_6: (+1)
   \   000000B0   0x2005             MOVS     R0,#+5
   \   000000B2   0x.... 0x....      BL       BSP_OS_TimeDly
   \   000000B6   0xE7AB             B.N      ??AppTaskComm_0
    261              }
    262          }
    263          
    264          /*******************************************************************************
    265           * 名    称： APP_ModbusInit
    266           * 功    能： MODBUS初始化
    267           * 入口参数： 无
    268           * 出口参数： 无
    269           * 作　 　者： 无名沈
    270           * 创建日期： 2015-03-28
    271           * 修    改：
    272           * 修改日期：
    273           * 备    注： 该初始化会创建Modbus任务。
    274           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    275          void App_ModbusInit(void)
    276          {
   \                     App_ModbusInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    277              MODBUS_CH   *pch;
    278              /***********************************************
    279              * 描述： uCModBus初始化，RTU时钟频率为1000HZ
    280              *        使用了定时器2（TIM2）
    281              */
    282              MB_Init(1000);
   \   00000004   0xF44F 0x707A      MOV      R0,#+1000
   \   00000008   0x.... 0x....      BL       MB_Init
    283              
    284              // UART1
    285              /***********************************************
    286              * 描述：  UART1串口和测量装置连接。master
    287              *        用作主机。
    288              */
    289          #if MODBUS_CFG_MASTER_EN == DEF_TRUE
    290          
    291          #endif
    292              // UART1
    293              /***********************************************
    294              * 描述:   UART1串口。IC卡模块
    295              */
    296              
    297          #if MODBUS_CFG_MASTER_EN == DEF_TRUE
    298              pch         = MB_CfgCh( ModbusNode,             // ... Modbus Node # for this slave channel
    299                                      MODBUS_SLAVE,           // ... This is a MASTER
    300                                      500,                    // ... 0 when a slave
    301                                      MODBUS_MODE_RTU,        // ... Modbus Mode (_ASCII or _RTU)
    302                                      1,                      // ... Specify UART #2
    303                                      57600,                  // ... Baud Rate
    304                                      UART_DATABIT_8,         // ... Number of data bits 7 or 8
    305                                      UART_PARITY_NONE,       // ... Parity: _NONE, _ODD or _EVEN
    306                                      UART_STOPBIT_1,         // ... Number of stop bits 1 or 2
    307                                      MODBUS_WR_EN);          // ... Enable (_EN) or disable (_DIS) writes
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9005             STR      R0,[SP, #+20]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9004             STR      R0,[SP, #+16]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9003             STR      R0,[SP, #+12]
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9002             STR      R0,[SP, #+8]
   \   0000001C   0xF44F 0x4061      MOV      R0,#+57600
   \   00000020   0x9001             STR      R0,[SP, #+4]
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0xF44F 0x72FA      MOV      R2,#+500
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       MB_CfgCh
   \   00000034   0x0004             MOVS     R4,R0
    308              pch->AesEn          =   DEF_DISABLED;           // ... AES加密禁止
   \   00000036   0xF894 0x0452      LDRB     R0,[R4, #+1106]
   \   0000003A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000003E   0xF884 0x0452      STRB     R0,[R4, #+1106]
    309              pch->NonModbusEn    =   DEF_ENABLED;            // ... 支持非MODBUS通信
   \   00000042   0xF894 0x0452      LDRB     R0,[R4, #+1106]
   \   00000046   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000004A   0xF884 0x0452      STRB     R0,[R4, #+1106]
    310              pch->IapModbusEn    =   DEF_ENABLED;            // ... 支持IAP MODBUS通信
   \   0000004E   0xF894 0x0452      LDRB     R0,[R4, #+1106]
   \   00000052   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000056   0xF884 0x0452      STRB     R0,[R4, #+1106]
    311              
    312              pch->RxFrameHead    = 0x1028;                   // ... 添加匹配帧头
   \   0000005A   0xF241 0x0028      MOVW     R0,#+4136
   \   0000005E   0xF8A4 0x034A      STRH     R0,[R4, #+842]
    313              pch->RxFrameTail    = 0x102C;                   // ... 添加匹配帧尾
   \   00000062   0xF241 0x002C      MOVW     R0,#+4140
   \   00000066   0xF8A4 0x034C      STRH     R0,[R4, #+844]
    314              
    315              sCtrl.Otr.pch       = pch;                      // ... modbus控制块和全局结构体建立连接
   \   0000006A   0x....             LDR.N    R0,??DataTable5_4
   \   0000006C   0xF8C0 0x4218      STR      R4,[R0, #+536]
    316          #endif
    317              
    318              // UART3
    319              /***********************************************
    320              * 描述：  UART3串口和IC卡模块连接。master
    321              *        
    322              */
    323          #if MODBUS_CFG_MASTER_EN == DEF_TRUE
    324          
    325          
    326          #endif
    327             
    328          }
   \   00000070   0xB006             ADD      SP,SP,#+24
   \   00000072   0xBD10             POP      {R4,PC}          ;; return
    329          
    330          
    331          /*******************************************************************************
    332           * 名    称： APP_CommInit
    333           * 功    能： 任务初始化
    334           * 入口参数： 无
    335           * 出口参数： 无
    336           * 作　 　者： wumingshen.
    337           * 创建日期： 2015-03-28
    338           * 修    改：
    339           * 修改日期：
    340           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    341           void APP_CommInit(void)
    342          {
   \                     APP_CommInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    343              OS_ERR err;
    344              
    345              /***********************************************
    346              * 描述： 创建事件标志组,协调comm收发
    347              */
    348              OSFlagCreate(( OS_FLAG_GRP  *)&sCtrl.Os.CommEvtFlagGrp,
    349                           ( CPU_CHAR     *)"App_CommFlag",
    350                           ( OS_FLAGS      )0,
    351                           ( OS_ERR       *)&err);
   \   00000002   0x466B             MOV      R3,SP
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable5_7
   \   00000008   0x....             LDR.N    R0,??DataTable5_5
   \   0000000A   0x.... 0x....      BL       OSFlagCreate
    352              
    353              sCtrl.Os.CommEvtFlag= COMM_EVT_FLAG_OTR_RX        // OTR 接收事件
    354                                  + COMM_EVT_FLAG_OTR_TIMEOUT  // OTR 操作超时，定时发送使用
    355                                   + COMM_EVT_FLAG_PLUG_CARD;  // IC卡触发
   \   0000000E   0x2064             MOVS     R0,#+100
   \   00000010   0x....             LDR.N    R1,??DataTable5_4
   \   00000012   0xF8C1 0x0271      STR      R0,[R1, #+625]
    356          
    357              
    358              /***********************************************
    359              * 描述： 初始化MODBUS通信
    360              */        
    361              App_ModbusInit();
   \   00000016   0x.... 0x....      BL       App_ModbusInit
    362              
    363              /***********************************************
    364              * 描述： 在看门狗标志组注册本任务的看门狗标志
    365              */
    366              WdtFlags |= WDT_FLAG_COMM;
   \   0000001A   0x....             LDR.N    R0,??DataTable5_8
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000022   0x....             LDR.N    R1,??DataTable5_8
   \   00000024   0x6008             STR      R0,[R1, #+0]
    367          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    368          
    369          
    370          
    371          /*******************************************************************************
    372          * 名    称： APP_CommRxDataDealCB
    373          * 功    能： 串口数据处理回调函数，由MB_DATA.C调用
    374          * 入口参数： 无
    375          * 出口参数： 无
    376          * 作    者： 无名沈
    377          * 创建日期： 2016-01-04
    378          * 修    改：
    379          * 修改日期：
    380          * 备    注： 
    381          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    382          INT08U APP_CommRxDataDealCB(MODBUS_CH  *pch)
    383          {
   \                     APP_CommRxDataDealCB: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
    384              /***********************************************
    385              * 描述： 2016/01/08增加，用于非MODBBUS IAP升级通信
    386              */
    387          #if MB_IAPMODBUS_EN == DEF_ENABLED
    388              //    /***********************************************
    389              //    * 描述： 如果程序处在升级模式
    390              //    */
    391              //    if ( ( Iap.Status != IAP_STS_DEF ) && 
    392              //         ( Iap.Status != IAP_STS_SUCCEED ) &&
    393              //         ( Iap.Status != IAP_STS_FAILED ) ) {
    394              //        return IAP_CommRxDataDealCB(pch);
    395              //    }
    396          #endif
    397              /***********************************************
    398              * 描述： 获取帧头
    399              */
    400          //    CPU_SR_ALLOC();
    401              
    402              //redmorningcn 数据复制功能由MBS_RTU_Task 已经执行。此处无需重复拷贝。
    403              
    404              //    CPU_CRITICAL_ENTER();
    405              //    //u8  Len     = pch->RxBufByteCtr;
    406              u8  Len     = pch->RxBufByteCnt;
   \   00000008   0x8E60             LDRH     R0,[R4, #+50]
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    407              //    memcpy( (INT08U *)&pch->RxFrameData, (INT08U *)pch->RxBuf, Len );
    408              //    CPU_CRITICAL_EXIT();
    409              
    410              OS_ERR      err;
    411              
    412              //DataBuf = pch->RxFrameData;
    413              
    414              //INT08U  *DataBuf = 0 ;
    415              /***********************************************
    416              * 描述： 接收数据处理,
    417              * 根据协议，返回数据是            源地址
    418              *           目标地址由           GetRecSlaveAddr （）获得。
    419              *           数据区长度在          Len
    420              *           数据区                 DataBuf
    421              *           接收序号            GetRecvFrameNbr（）
    422              */  
    423              uint8   DataPos;
    424              u8  SourceAddr = 
    425                  CSNC_GetData(	(uint8 *)pch->RxFrameData,          //RecBuf,
    426                                  (uint16 )Len,                       //RecLen, 
    427                                  (uint8 *)&DataPos,                   //DataBuf,
    428                                  (uint16 *)&Len);                    //InfoLen)
   \   0000000E   0x466B             MOV      R3,SP
   \   00000010   0xF10D 0x0201      ADD      R2,SP,#+1
   \   00000014   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0xF514 0x7011      ADDS     R0,R4,#+580
   \   0000001E   0x.... 0x....      BL       CSNC_GetData
   \   00000022   0x0005             MOVS     R5,R0
    429              
    430              /***********************************************
    431              * 描述： 如果接收地址和装置地址不符，则不处理，接收数据错误。
    432              */
    433              if ( SLAVE_ADDR_OTR != GetRecSlaveAddr() ) 
   \   00000024   0x.... 0x....      BL       GetRecSlaveAddr
   \   00000028   0x28C1             CMP      R0,#+193
   \   0000002A   0xD001             BEQ.N    ??APP_CommRxDataDealCB_0
    434                  return FALSE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE067             B.N      ??APP_CommRxDataDealCB_1
    435              
    436              /***********************************************
    437              * 描述： 根据 地址  pch来源  判断数据是 否 合理 ，
    438              *       并赋值。
    439              */
    440              //switch  (pch->Ch )
    441              switch  (pch->PortNbr )     //根据端口号定义
   \                     ??APP_CommRxDataDealCB_0: (+1)
   \   00000030   0x7A60             LDRB     R0,[R4, #+9]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD005             BEQ.N    ??APP_CommRxDataDealCB_2
   \   00000036   0x2802             CMP      R0,#+2
   \   00000038   0xD061             BEQ.N    ??APP_CommRxDataDealCB_3
   \   0000003A   0xD303             BCC.N    ??APP_CommRxDataDealCB_4
   \   0000003C   0x2803             CMP      R0,#+3
   \   0000003E   0xD05D             BEQ.N    ??APP_CommRxDataDealCB_5
   \   00000040   0xE05D             B.N      ??APP_CommRxDataDealCB_6
    442              {
    443                  /***********************************************
    444                  * 描述： UART0接收到数据
    445                  */
    446              case 0:
    447                  break;
   \                     ??APP_CommRxDataDealCB_2: (+1)
   \   00000042   0xE05C             B.N      ??APP_CommRxDataDealCB_6
    448                  
    449                  /***********************************************
    450                  * 描述： UART1接收到数据。数据发送地址：A1、A2
    451                  *                         数据接收地址：80
    452                  */        
    453              case 1:
    454                     if(         MASTE_ADDR_HOST == SourceAddr 
    455                         )   
   \                     ??APP_CommRxDataDealCB_4: (+1)
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D80             CMP      R5,#+128
   \   00000048   0xD147             BNE.N    ??APP_CommRxDataDealCB_7
    456                      {
    457                          sCtrl.Otr.RxCtrl.SourceAddr = SourceAddr;           //源地址
   \   0000004A   0x....             LDR.N    R0,??DataTable5_4
   \   0000004C   0xF880 0x5201      STRB     R5,[R0, #+513]
    458                          sCtrl.Otr.RxCtrl.DestAddr   = GetRecSlaveAddr();    //目标地址
   \   00000050   0x.... 0x....      BL       GetRecSlaveAddr
   \   00000054   0x....             LDR.N    R1,??DataTable5_4
   \   00000056   0xF881 0x0200      STRB     R0,[R1, #+512]
    459                          sCtrl.Otr.RxCtrl.FramNum    = GetRecvFrameNbr();    //接收到的帧号
   \   0000005A   0x.... 0x....      BL       GetRecvFrameNbr
   \   0000005E   0x....             LDR.N    R1,??DataTable5_4
   \   00000060   0xF881 0x0202      STRB     R0,[R1, #+514]
    460                          
    461                         /***********************************************
    462                          * 描述：无线通讯及IC卡通讯，定义数据区的前 4 个字节为命令字，   
    463                          *                           ，4字节后才是真正的数据。                        
    464                          */                   
    465                          if(Len >=4)                                        
   \   00000064   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000068   0x2804             CMP      R0,#+4
   \   0000006A   0xDB12             BLT.N    ??APP_CommRxDataDealCB_8
    466                          {
    467          //                    sCtrl.Otr.RxCtrl.Len        = Len - 4;                  //数据区长度
    468          //                    //取数据记录，将数据记录保存到接收区
    469          //                    OS_CRITICAL_ENTER();
    470          //                        memcpy( (INT08U *)&sCtrl.Otr.RxCtrl.Code, (INT08U *)&pch->RxFrameData[DataPos], 4);        //功能码
    471          //                        memcpy( (INT08U *)&sCtrl.Otr.Rd.Buf[0],   (INT08U *)&pch->RxFrameData[DataPos+4], Len-4 );   //数据区
    472          //                    OS_CRITICAL_EXIT();                    
    473                              sCtrl.Otr.RxCtrl.Len        = Len;                  //数据区长度    只接收数据记录、查询
   \   0000006C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000070   0x....             LDR.N    R1,??DataTable5_4
   \   00000072   0xF881 0x0203      STRB     R0,[R1, #+515]
    474                              //取数据记录，将数据记录保存到接收区
    475                              //OS_CRITICAL_ENTER();
    476                                  memcpy( (INT08U *)&sCtrl.Otr.Rd.Buf[0],   (INT08U *)&pch->RxFrameData[DataPos], Len );   //数据区
   \   00000076   0xF89D 0x6000      LDRB     R6,[SP, #+0]
   \   0000007A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000007E   0x1900             ADDS     R0,R0,R4
   \   00000080   0xF510 0x7711      ADDS     R7,R0,#+580
   \   00000084   0x.... 0x....      LDR.W    R8,??DataTable5_6
   \   00000088   0x0032             MOVS     R2,R6
   \   0000008A   0x0039             MOVS     R1,R7
   \   0000008C   0x4640             MOV      R0,R8
   \   0000008E   0x.... 0x....      BL       __aeabi_memcpy
    477                              //OS_CRITICAL_EXIT(); 
    478                              
    479                          }
    480                          /***********************************************
    481                          * 描述： UART2连接状态描述
    482                          */       
    483                          for(uint8 i = 0;i< COMM_DEV_OTR_CONN_NUM;i++)
   \                     ??APP_CommRxDataDealCB_8: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \                     ??APP_CommRxDataDealCB_9: (+1)
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x2802             CMP      R0,#+2
   \   00000098   0xDA18             BGE.N    ??APP_CommRxDataDealCB_10
    484                          {
    485                              if( sCtrl.Otr.ConnCtrl[i].SlaveAddr == SourceAddr){
   \   0000009A   0x....             LDR.N    R1,??DataTable5_4
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   000000A2   0xF891 0x120C      LDRB     R1,[R1, #+524]
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x42A9             CMP      R1,R5
   \   000000AA   0xD10D             BNE.N    ??APP_CommRxDataDealCB_11
    486                                  sCtrl.Otr.ConnCtrl[i].RecvEndFlg  = 1;      //接收到数据，置1。数据处理后置0
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x....             LDR.N    R2,??DataTable5_4
   \   000000B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B2   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   000000B6   0xF882 0x1209      STRB     R1,[R2, #+521]
    487                                  sCtrl.Otr.ConnCtrl[i].TimeOut     = 0;      //超时计数器清零。
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x....             LDR.N    R2,??DataTable5_4
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   000000C4   0xF882 0x120A      STRB     R1,[R2, #+522]
    488                              }
    489                          } 
   \                     ??APP_CommRxDataDealCB_11: (+1)
   \   000000C8   0x1C40             ADDS     R0,R0,#+1
   \   000000CA   0xE7E3             B.N      ??APP_CommRxDataDealCB_9
    490                          
    491                          OSFlagPost(( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    492                          ( OS_FLAGS     ) COMM_EVT_FLAG_OTR_RX,
    493                          ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    494                          ( OS_ERR      *) &err);       
   \                     ??APP_CommRxDataDealCB_10: (+1)
   \   000000CC   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000000D0   0x2200             MOVS     R2,#+0
   \   000000D2   0x2104             MOVS     R1,#+4
   \   000000D4   0x....             LDR.N    R0,??DataTable5_5
   \   000000D6   0x.... 0x....      BL       OSFlagPost
    495                      }
    496                          
    497                      sCtrl.Otr.ConnectFlag       = 1;
   \                     ??APP_CommRxDataDealCB_7: (+1)
   \   000000DA   0x....             LDR.N    R0,??DataTable5_4
   \   000000DC   0xF890 0x021C      LDRB     R0,[R0, #+540]
   \   000000E0   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000E4   0x....             LDR.N    R1,??DataTable5_4
   \   000000E6   0xF881 0x021C      STRB     R0,[R1, #+540]
    498                      sCtrl.Otr.ConnectTimeOut    = 0;   
   \   000000EA   0x....             LDR.N    R0,??DataTable5_4
   \   000000EC   0xF890 0x021C      LDRB     R0,[R0, #+540]
   \   000000F0   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   000000F4   0x....             LDR.N    R1,??DataTable5_4
   \   000000F6   0xF881 0x021C      STRB     R0,[R1, #+540]
    499                      
    500                      break;
   \   000000FA   0xE000             B.N      ??APP_CommRxDataDealCB_6
    501                  
    502                  /***********************************************
    503                  * 描述： UART3接收到数据。数据发送地址：CA、C2
    504                  *                         数据接收地址:80
    505                  */   
    506              case 3:
    507          
    508                  
    509                  break;
   \                     ??APP_CommRxDataDealCB_5: (+1)
   \   000000FC   0xE7FF             B.N      ??APP_CommRxDataDealCB_6
    510                  /***********************************************
    511                  * 描述： UART2接收到数据
    512                  */   
    513              case 2:
    514          
    515                  
    516                  break;
    517              }
    518              
    519              return TRUE;
   \                     ??APP_CommRxDataDealCB_3: (+1)
   \                     ??APP_CommRxDataDealCB_6: (+1)
   \   000000FE   0x2001             MOVS     R0,#+1
   \                     ??APP_CommRxDataDealCB_1: (+1)
   \   00000100   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    520          }
    521          
    522          /***********************************************
    523          * 描述： 2016/01/08增加，用于非MODBBUS IAP升级通信
    524          */
    525          #if MB_IAPMODBUS_EN == DEF_ENABLED
    526          /*******************************************************************************
    527           * 名    称： APP_CommRxDataDealCB
    528           * 功    能： 串口数据处理回调函数，由MB_DATA.C调用
    529           * 入口参数： 无
    530           * 出口参数： 无
    531           * 作    者： 无名沈
    532           * 创建日期： 2016-01-04
    533           * 修    改：
    534           * 修改日期：
    535           * 备    注： 
    536           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    537          INT08U IAP_CommRxDataDealCB(MODBUS_CH  *pch)
    538          {
   \                     IAP_CommRxDataDealCB: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    539          //    CPU_SR_ALLOC();
    540          //    CPU_CRITICAL_ENTER();
    541          //    u8  Len     = pch->RxBufByteCtr;
    542          //    memcpy( (INT08U *)&pch->RxFrameData, (INT08U *)pch->RxBuf, Len );
    543          //    CPU_CRITICAL_EXIT();
    544          //    
    545          //    /***********************************************
    546          //    * 描述： 获取帧头
    547          //    */    
    548          //    INT08U  *DataBuf    = pch->RxFrameData;
    549          //    
    550          //    /***********************************************
    551          //    * 描述： 接收数据处理
    552          //    */
    553          //    u8  DstAddr = 
    554          //    CSNC_GetData(	(unsigned char *)pch->RxFrameData,          //RecBuf,
    555          //                    (unsigned char	 )Len,                       //RecLen, 
    556          //                    (unsigned char *)DataBuf,                   //DataBuf,
    557          //                    (unsigned short *)&Len);                    //InfoLen)
    558          //    /***********************************************
    559          //    * 描述： 检测接收结束
    560          //    */
    561          //    if ( ( Len == 16) && 
    562          //         ( 0 >= memcmp((const char *)"IAP_pragram end!",(const char *)&pch->RxFrameData[8], 16) ) ) {
    563          //        /***********************************************
    564          //        * 描述： 发送数据处理
    565          //        */
    566          //        CSNC_SendData(	(MODBUS_CH      *)sCtrl.Com.pch,
    567          //                        (unsigned char  ) sCtrl.Com.SlaveAddr,          // SourceAddr,
    568          //                        (unsigned char  ) sCtrl.Com.Rd.Head.SrcAddr,    // DistAddr,
    569          //                        (unsigned char *)&pch->RxFrameData[8],          // DataBuf,
    570          //                        (unsigned short ) Len); 
    571          //        /***********************************************
    572          //        * 描述： 置位IAP结束标志位
    573          //        */
    574          //        OS_ERR err;
    575          //        OS_FlagPost(( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    576          //                    ( OS_FLAGS     ) COMM_EVT_FLAG_IAP_END,
    577          //                    ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    578          //                    ( CPU_TS       ) 0,
    579          //                    ( OS_ERR      *) &err);
    580          //        
    581          //        return TRUE;
    582          //    }
    583          //    
    584          //    if ( ( Len == 18) && 
    585          //         ( 0 >= memcmp((const char *)"IAP_pragram start!",(const char *)&pch->RxFrameData[8], 18) ) ) {
    586          //        
    587          //#if defined     (IMAGE_A) || defined   (IMAGE_B)
    588          //#else
    589          //        /***********************************************
    590          //        * 描述： 发送数据处理
    591          //        */
    592          //        CSNC_SendData(	(MODBUS_CH      *)sCtrl.Com.pch,
    593          //                        (unsigned char  ) sCtrl.Com.SlaveAddr,          // SourceAddr,
    594          //                        (unsigned char  ) sCtrl.Com.Rd.Head.SrcAddr,    // DistAddr,
    595          //                        (unsigned char *)&pch->RxFrameData[8],         // DataBuf,
    596          //                        (unsigned int	 ) Len);                        // DataLen 
    597          //#endif
    598          //        IAP_Restart();
    599          //        Iap.FrameIdx    = 0;
    600          //        return TRUE;
    601          //    }
    602          //    
    603          //    if ( Iap.Status < IAP_STS_START )
    604          //        return TRUE;
    605          //    /***********************************************
    606          //    * 描述： 写数据
    607          //    */
    608          //    /***********************************************
    609          //    * 描述： 将数据打包给发送结构
    610          //    */
    611          //    sCtrl.Com.Wr.Head.DataLen       = 0;
    612          //    /***********************************************
    613          //    * 描述： 编辑应答内容
    614          //    */
    615          //    char str[20];
    616          //    usprintf(str,"\n%d",Iap.FrameIdx);
    617          //    str[19]  = 0;
    618          //    /***********************************************
    619          //    * 描述： 写数据到Flash
    620          //    */
    621          //    IAP_Program((StrIapState *)&Iap, (INT16U *)&pch->RxFrameData[8], Len, (INT16U )GetRecvFrameNbr() );
    622          //    /***********************************************
    623          //    * 描述： 发送数据处理
    624          //    */
    625          //    CSNC_SendData(	(MODBUS_CH     *) sCtrl.Com.pch,
    626          //                    (unsigned char  ) sCtrl.Com.SlaveAddr,                    // SourceAddr,
    627          //                    (unsigned char  ) sCtrl.Com.Rd.Head.SrcAddr,              // DistAddr,
    628          //                    (unsigned char *) str,                                    // DataBuf,
    629          //                    (unsigned short ) strlen(str));                           // DataLen 
    630          //    if ( Len < 128 ) {
    631          //        /***********************************************
    632          //        * 描述： 置位IAP结束标志位
    633          //        */
    634          //        OS_ERR err;
    635          //        OS_FlagPost(( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    636          //                    ( OS_FLAGS     ) COMM_EVT_FLAG_IAP_END,
    637          //                    ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    638          //                    ( CPU_TS       ) 0,
    639          //                    ( OS_ERR      *) &err);
    640          //    } else {
    641          //        IAP_Programing();                               // 复位超时计数器
    642          //    }
    643          //        
    644          //    /***********************************************
    645          //    * 描述： 串口接受COMM模组的消息并处理
    646          //    */
    647          //    sCtrl.Com.ConnectTimeOut    = 0;                // 超时计数器清零
    648          //    sCtrl.Com.ConnectFlag       = TRUE;             // 转连接成功标志
    649          //    
    650              return TRUE;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
    651          }
    652          #endif
    653          
    654          /*******************************************************************************
    655           * 名    称： NMBS_FCxx_Handler
    656           * 功    能： 非MODBUS串口数据处理回调函数，由mbs_core.d调用。处理接收中断应答。
    657           * 入口参数： 无
    658           * 出口参数： 无
    659           * 作    者： 无名沈
    660           * 创建日期： 2017-02-03
    661           * 修    改：
    662           * 修改日期：
    663           * 备    注： 
    664           *******************************************************************************/
    665          extern OS_Q                MTR_RxQ;
    666          extern OS_Q                COM_RxQ;
    667          extern OS_Q                DTU_RxQ;
    668          //CPU_BOOLEAN  NMBS_FCxx_Handler (MODBUS_CH  *pch)
    669          //{
    670          //    OS_ERR      err;
    671          //    CPU_INT16U  head    = BUILD_INT16U(pch->RxBuf[1], pch->RxBuf[0]);
    672          //    CPU_INT16U  tail    = BUILD_INT16U(pch->RxBuf[pch->RxBufByteCtr-1],
    673          //                                       pch->RxBuf[pch->RxBufByteCtr-2]);
    674          //    /***********************************************
    675          //    * 描述： 长沙南车DTU协议处理
    676          //    */
    677          //    
    678          //    if ( ( pch->RxFrameHead == head ) &&              
    679          //         ( pch->RxFrameTail == tail ) ) {
    680          //        APP_CommRxDataDealCB(pch);
    681          //        /***********************************************
    682          //        * 描述： 电表调试协议协议,电表协议协议处理处理
    683          //        */
    684          //    } else  if ( ( 0xAA55 == head ) || ( 0xAAAA == head ) ) {
    685          //        OS_ERR  err;
    686          //        
    687          //        CPU_SR_ALLOC();
    688          //        OS_CRITICAL_ENTER();
    689          //        memcpy( (INT08U *)&pch->RxFrameData, (INT08U *)pch->RxBuf, pch->RxBufByteCnt );
    690          //        OS_CRITICAL_EXIT();
    691          //        
    692          //        (void)OSQPost((OS_Q         *)&MTR_RxQ,
    693          //                      (void         *) pch,
    694          //                      (OS_MSG_SIZE   ) pch->RxBufByteCtr,
    695          //                      (OS_OPT        ) OS_OPT_POST_FIFO,
    696          //                      (OS_ERR       *)&err);
    697          //         //BSP_OS_TimeDly(5);
    698          //         /***********************************************
    699          //         * 描述： 电表协议协议处理
    700          //         */  
    701          //    } else {
    702          //        return DEF_FALSE;
    703          //    }
    704          //    return DEF_TRUE;
    705          //}
    706          

   \                                 In section .text, align 2, keep-with-next
    707          CPU_BOOLEAN  NMBS_FCxx_Handler (MODBUS_CH  *pch)
    708          {
   \                     NMBS_FCxx_Handler: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
    709          //    OS_ERR      err;
    710              //   CPU_INT16U  head    = BUILD_INT16U(pch->RxBuf[1], pch->RxBuf[0]);
    711              //    CPU_INT16U  tail    = BUILD_INT16U(pch->RxBuf[pch->RxBufByteCtr-1],
    712              //                                       pch->RxBuf[pch->RxBufByteCtr-2]);
    713              CPU_INT16U  head    = BUILD_INT16U( pch->RxFrameData[1], pch->RxFrameData[0]);
   \   00000008   0xF894 0x0245      LDRB     R0,[R4, #+581]
   \   0000000C   0xF894 0x1244      LDRB     R1,[R4, #+580]
   \   00000010   0xEB10 0x2501      ADDS     R5,R0,R1, LSL #+8
    714              CPU_INT16U  tail    = BUILD_INT16U( pch->RxFrameData[pch->RxBufByteCnt-1],
    715                                                 pch->RxFrameData[pch->RxBufByteCnt-2]);           //20170526 RxBufByteCtr 中断函数中动态更新。
   \   00000014   0x8E60             LDRH     R0,[R4, #+50]
   \   00000016   0x1900             ADDS     R0,R0,R4
   \   00000018   0xF890 0x0243      LDRB     R0,[R0, #+579]
   \   0000001C   0x8E61             LDRH     R1,[R4, #+50]
   \   0000001E   0x1909             ADDS     R1,R1,R4
   \   00000020   0xF891 0x1242      LDRB     R1,[R1, #+578]
   \   00000024   0xEB10 0x2601      ADDS     R6,R0,R1, LSL #+8
    716              
    717              /***********************************************
    718              * 描述： 长沙南车DTU协议处理
    719              */
    720              
    721              if ( ( pch->RxFrameHead == head ) &&              
    722                  ( pch->RxFrameTail == tail ) ) {
   \   00000028   0xF8B4 0x034A      LDRH     R0,[R4, #+842]
   \   0000002C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002E   0x42A8             CMP      R0,R5
   \   00000030   0xD108             BNE.N    ??NMBS_FCxx_Handler_0
   \   00000032   0xF8B4 0x034C      LDRH     R0,[R4, #+844]
   \   00000036   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000038   0x42B0             CMP      R0,R6
   \   0000003A   0xD103             BNE.N    ??NMBS_FCxx_Handler_0
    723                      APP_CommRxDataDealCB(pch);
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       APP_CommRxDataDealCB
   \   00000042   0xE01E             B.N      ??NMBS_FCxx_Handler_1
    724                      /***********************************************
    725                      * 描述： 电表调试协议协议,电表协议协议处理处理
    726                      */
    727                  } else  if ( ( 0xAA55 == head ) || ( 0xAAAA == head ) ) {
   \                     ??NMBS_FCxx_Handler_0: (+1)
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0xF64A 0x2055      MOVW     R0,#+43605
   \   0000004A   0x4285             CMP      R5,R0
   \   0000004C   0xD004             BEQ.N    ??NMBS_FCxx_Handler_2
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0xF64A 0x20AA      MOVW     R0,#+43690
   \   00000054   0x4285             CMP      R5,R0
   \   00000056   0xD112             BNE.N    ??NMBS_FCxx_Handler_3
    728                      OS_ERR  err;
    729                      
    730                      //CPU_SR_ALLOC();
    731                      //OS_CRITICAL_ENTER();
    732                      memcpy( (INT08U *)&pch->RxFrameData, (INT08U *)pch->RxBuf, pch->RxBufByteCnt );
   \                     ??NMBS_FCxx_Handler_2: (+1)
   \   00000058   0x8E67             LDRH     R7,[R4, #+50]
   \   0000005A   0xF114 0x0838      ADDS     R8,R4,#+56
   \   0000005E   0xF514 0x7911      ADDS     R9,R4,#+580
   \   00000062   0x003A             MOVS     R2,R7
   \   00000064   0x4641             MOV      R1,R8
   \   00000066   0x4648             MOV      R0,R9
   \   00000068   0x.... 0x....      BL       __aeabi_memcpy
    733                      //OS_CRITICAL_EXIT();
    734                      
    735                      (void)OSQPost((OS_Q         *)&MTR_RxQ,
    736                                    (void         *) pch,
    737                                    //(OS_MSG_SIZE   ) pch->RxBufByteCtr,
    738                                    (OS_MSG_SIZE   ) pch->RxBufByteCnt,
    739                                    (OS_OPT        ) OS_OPT_POST_FIFO,
    740                                    (OS_ERR       *)&err);
   \   0000006C   0xA801             ADD      R0,SP,#+4
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x2300             MOVS     R3,#+0
   \   00000072   0x8E62             LDRH     R2,[R4, #+50]
   \   00000074   0x0021             MOVS     R1,R4
   \   00000076   0x....             LDR.N    R0,??DataTable5_9
   \   00000078   0x.... 0x....      BL       OSQPost
   \   0000007C   0xE001             B.N      ??NMBS_FCxx_Handler_1
    741                       //BSP_OS_TimeDly(5);
    742                       /***********************************************
    743                       * 描述： 电表协议协议处理
    744                       */  
    745                  } else {
    746                      return DEF_FALSE;
   \                     ??NMBS_FCxx_Handler_3: (+1)
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xE000             B.N      ??NMBS_FCxx_Handler_4
    747                  }
    748              return DEF_TRUE;
   \                     ??NMBS_FCxx_Handler_1: (+1)
   \   00000082   0x2001             MOVS     R0,#+1
   \                     ??NMBS_FCxx_Handler_4: (+1)
   \   00000084   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    749          }
    750          
    751          
    752          /*******************************************************************************
    753           * 名    称： APP_MaterCommHandler
    754           * 功    能： 电表串口数据处理函数
    755           * 入口参数： 无
    756           * 出口参数： 无
    757           * 作　　者： wumingshen.
    758           * 创建日期： 2015-03-28
    759           * 修    改：
    760           * 修改日期：
    761           *******************************************************************************/
    762          /***********************************************
    763          * 描述： 2015/12/07增加，用于非MODBBUS通信
    764          *        非MODBUS通信，带帧头帧尾的通信数据处理
    765          */
    766          #if MB_NONMODBUS_EN == DEF_ENABLED

   \                                 In section .text, align 2, keep-with-next
    767          CPU_BOOLEAN APP_MaterCommHandler (MODBUS_CH  *pch)
    768          {    
   \                     APP_MaterCommHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    769          //    uint8_t     fram_clr[4]     = {0};
    770          //	uint8_t     IDBuf[4]        = {0};
    771          //	uint8_t     clear_buf[24]   = {0};
    772          //	uint32_t    ID              = 0;
    773          //	uint32_t    utemp;
    774              	
    775          	//TIME        system; 
    776              
    777              /***********************************************
    778              * 描述： 拷贝数据到数据区
    779              */
    780              //CPU_SR_ALLOC();
    781              //CPU_CRITICAL_ENTER();
    782              //uint32_t  Len     = pch->RxBufByteCnt;
    783              //memcpy( (INT08U *)&pch->RxFrameData, (INT08U *)pch->RxBuf, Len );
    784              //CPU_CRITICAL_EXIT();
    785              uint32_t    Len       = pch->RxBufByteCnt;
   \   00000006   0x8E65             LDRH     R5,[R4, #+50]
    786              INT08U      *DataBuf  = pch->RxFrameData;
   \   00000008   0xF514 0x7611      ADDS     R6,R4,#+580
    787              
    788              
    789              CPU_INT16U  head    = BUILD_INT16U(pch->RxBuf[1], pch->RxBuf[0]);
   \   0000000C   0xF894 0x0039      LDRB     R0,[R4, #+57]
   \   00000010   0xF894 0x1038      LDRB     R1,[R4, #+56]
   \   00000014   0xEB10 0x2701      ADDS     R7,R0,R1, LSL #+8
    790              CPU_INT16U  tail    = BUILD_INT16U(pch->RxBuf[pch->RxBufByteCnt-1],
    791                                                 pch->RxBuf[pch->RxBufByteCnt-2]);
   \   00000018   0x8E60             LDRH     R0,[R4, #+50]
   \   0000001A   0x1900             ADDS     R0,R0,R4
   \   0000001C   0xF890 0x0037      LDRB     R0,[R0, #+55]
   \   00000020   0x8E61             LDRH     R1,[R4, #+50]
   \   00000022   0x1909             ADDS     R1,R1,R4
   \   00000024   0xF891 0x1036      LDRB     R1,[R1, #+54]
   \   00000028   0xEB10 0x2801      ADDS     R8,R0,R1, LSL #+8
    792              /***********************************************
    793              * 描述： 长沙南车DTU协议处理
    794              */
    795              if ( ( pch->RxFrameHead == head ) &&
    796                   ( pch->RxFrameTail == tail ) ) {
   \   0000002C   0xF8B4 0x034A      LDRH     R0,[R4, #+842]
   \   00000030   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000032   0x42B8             CMP      R0,R7
   \   00000034   0xD10D             BNE.N    ??APP_MaterCommHandler_0
   \   00000036   0xF8B4 0x034C      LDRH     R0,[R4, #+844]
   \   0000003A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003E   0x4540             CMP      R0,R8
   \   00000040   0xD107             BNE.N    ??APP_MaterCommHandler_0
    797                  DataBuf = &pch->RxFrameData[8];
   \   00000042   0xF514 0x7013      ADDS     R0,R4,#+588
   \   00000046   0x0006             MOVS     R6,R0
    798          //        Len     = sCtrl.Com.Rd.Head.DataLen;        
    799                  head    = BUILD_INT16U(DataBuf[1], DataBuf[0]);
   \   00000048   0x7870             LDRB     R0,[R6, #+1]
   \   0000004A   0x7831             LDRB     R1,[R6, #+0]
   \   0000004C   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000050   0x0007             MOVS     R7,R0
    800              }
    801              
    802              /***********************************************
    803              * 描述： 
    804              序号    内容       字节数 内容说明
    805              1       帧头       2      0xAA 0xAA
    806              2       帧长度     1      0x08 帧长度固定为8字节
    807              3       命令类型   2      0x00 0x01
    808              4       预留       2      0x00 0x00
    809              5       累加和     1      前7个字节的累加和
    810              */ 
    811              if ( 0xAAAA == head ) {
   \                     ??APP_MaterCommHandler_0: (+1)
   \   00000052   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000054   0xF64A 0x20AA      MOVW     R0,#+43690
   \   00000058   0x4287             CMP      R7,R0
   \   0000005A   0xD10E             BNE.N    ??APP_MaterCommHandler_1
    812                  Len            -= 1;
   \   0000005C   0x1E6D             SUBS     R5,R5,#+1
    813                  int8_t chkSum   = GetCheckSum(DataBuf,Len);
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0x.... 0x....      BL       GetCheckSum
   \   00000066   0x0001             MOVS     R1,R0
    814                  
    815                  if ( chkSum ==  DataBuf[Len] ) {
   \   00000068   0x0008             MOVS     R0,R1
   \   0000006A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000006C   0x5DAA             LDRB     R2,[R5, R6]
   \   0000006E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000070   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000072   0x4290             CMP      R0,R2
   \   00000074   0xD113             BNE.N    ??APP_MaterCommHandler_2
    816          //            pch->TxFrameData[0]     = 0xAA;
    817          //            pch->TxFrameData[1]     = 0xAA;
    818          //            pch->TxFrameData[2]     = 0x30;
    819          //            pch->TxFrameData[3]     = 0x00;
    820          //            pch->TxFrameData[4]     = 0x71;
    821          //            
    822          //            CPU_SR  cpu_sr;
    823          //            OS_CRITICAL_ENTER();
    824          //            memcpy(&pch->TxFrameData[5],(uint8_t *)&Mater.Energy, sizeof(StrEnergy));
    825          //            OS_CRITICAL_EXIT();
    826          //            
    827          //            pch->TxFrameData[45]    = 0x00;
    828          //            pch->TxFrameData[46]    = 0x00;
    829          //            
    830          //            pch->TxFrameData[47]    = GetCheckSum(pch->TxFrameData,47);
    831          //            
    832          //            NMB_Tx((MODBUS_CH   *)pch,
    833          //                   (CPU_INT08U  *)pch->TxFrameData,
    834          //                   (CPU_INT16U   )48);
    835                      return TRUE;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xE012             B.N      ??APP_MaterCommHandler_3
    836                  }
    837              /***********************************************
    838              * 描述： 调试参数
    839              */
    840              } else if ( ( 0xAA55 == head ) && ( Len > 10 )) {
   \                     ??APP_MaterCommHandler_1: (+1)
   \   0000007A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000007C   0xF64A 0x2055      MOVW     R0,#+43605
   \   00000080   0x4287             CMP      R7,R0
   \   00000082   0xD10C             BNE.N    ??APP_MaterCommHandler_2
   \   00000084   0x2D0B             CMP      R5,#+11
   \   00000086   0xD30A             BCC.N    ??APP_MaterCommHandler_2
    841                  /***********************************************
    842                  * 描述： 检测是否有帧尾，没有帧尾则进行CRC校验
    843                  */
    844                  if ( tail != 0x55AA  ) {
    845                      //uint16_t crc16_Cal = crc16((uint8_t *)&DataBuf[0],9);
    846                      //uint16_t crc16_Rec = BUILD_INT16U(DataBuf[9],DataBuf[10]);
    847                      //if(crc16_Cal != crc16_Rec) {                
    848                      //    return TRUE;
    849                      //}
    850                  }
    851                  switch(DataBuf[2])
   \   00000088   0x78B0             LDRB     R0,[R6, #+2]
   \   0000008A   0x28A1             CMP      R0,#+161
   \   0000008C   0xD004             BEQ.N    ??APP_MaterCommHandler_4
   \   0000008E   0xD306             BCC.N    ??APP_MaterCommHandler_5
   \   00000090   0x28A3             CMP      R0,#+163
   \   00000092   0xD003             BEQ.N    ??APP_MaterCommHandler_6
   \   00000094   0xD301             BCC.N    ??APP_MaterCommHandler_7
   \   00000096   0xE002             B.N      ??APP_MaterCommHandler_5
    852                  {
    853                  /***********************************************
    854                  * 描述： 设置序列号
    855                  */
    856                  case 0xA1:
    857          //            ID = BUILD_INT32U(DataBuf[3], DataBuf[4], DataBuf[5], DataBuf[6]);
    858                      //WriteFM24CL64(64 , (uint8_t *)&ID , 4);
    859                      //ReadFM24CL64(64 , (uint8_t *)&ID , 4);
    860          //            uartprintf(pch,"\r\n 本装置ID设置为：%d\r\n" , ID);
    861                      break;            
   \                     ??APP_MaterCommHandler_4: (+1)
   \   00000098   0xE001             B.N      ??APP_MaterCommHandler_2
    862                  /***********************************************
    863                  * 描述： 设置机车型号/机车号
    864                  */
    865                  case 0xA2:	
    866                      //Mater.LocoTyp   = BUILD_INT16U(DataBuf[3],DataBuf[4]);
    867                      //Mater.LocoNbr   = BUILD_INT16U(DataBuf[5],DataBuf[6]);
    868                      //WriteFM24CL64(68 , (uint8_t *)&Mater.LocoTyp, 2);
    869                      //WriteFM24CL64(70 , (uint8_t *)&Mater.LocoNbr, 2);
    870                      //ReadFM24CL64(68 ,  (uint8_t *)&Mater.LocoTyp, 2);
    871                      //ReadFM24CL64(70 ,  (uint8_t *)&Mater.LocoNbr, 2);
    872                      //uartprintf(pch,"\r\n 当前车型：%d；当前车号：%d\r\n", Mater.LocoTyp,Mater.LocoNbr);
    873                      break; 
   \                     ??APP_MaterCommHandler_7: (+1)
   \   0000009A   0xE000             B.N      ??APP_MaterCommHandler_2
    874                  /***********************************************
    875                  * 描述： 设置时间
    876                  */
    877                  case 0xA3:
    878          //            system.Year     =DataBuf[3];
    879          //            system.Month    =DataBuf[4];
    880          //            system.Day      =DataBuf[5];
    881          //            system.Hour     =DataBuf[6];
    882          //            system.Min      =DataBuf[7];
    883          //            system.Sec      =DataBuf[8];
    884          //            WriteTime(system);
    885          //            GetTime((TIME *)&recordsfr.Time[0]);
    886          //            uartprintf(pch,"\r\n 当前时间为：20%02d-%02d-%02d  %02d:%02d:%02d", 
    887          //                       recordsfr.Time[0], recordsfr.Time[1], recordsfr.Time[2],
    888          //                       recordsfr.Time[3], recordsfr.Time[4], recordsfr.Time[5]);
    889                      break;
   \                     ??APP_MaterCommHandler_6: (+1)
   \   0000009C   0xE7FF             B.N      ??APP_MaterCommHandler_2
    890                      
    891                  default:
    892                      break;
    893                  }
    894              }
    895              /***********************************************
    896              * 描述： 调用串口数据处理回调函数
    897              */ 
    898              return TRUE;
   \                     ??APP_MaterCommHandler_5: (+1)
   \                     ??APP_MaterCommHandler_2: (+1)
   \   0000009E   0x2001             MOVS     R0,#+1
   \                     ??APP_MaterCommHandler_3: (+1)
   \   000000A0   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    899          }
    900          
    901          /*******************************************************************************
    902           * 名    称： APP_CSNC_CommHandler
    903           * 功    能： 串口数据处理函数
    904           * 入口参数： 无
    905           * 出口参数： 无
    906           * 作　　者： wumingshen.
    907           * 创建日期： 2015-03-28
    908           * 修    改：
    909           * 修改日期：
    910           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    911          CPU_BOOLEAN APP_CSNC_CommHandler (MODBUS_CH  *pch)
    912          {   
   \                     APP_CSNC_CommHandler: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    913          //    if ( pch->PortNbr == sCtrl.Dtu.pch->PortNbr ) {
    914          //        if ( GetRecvFrameNbr() == sCtrl.Com.Rd.Head.PacketSn ) {
    915          //            /***********************************************
    916          //            * 描述： 清除定时上传标志
    917          //            */
    918          //            //SetSendFrameNbr();
    919          //            //extern void UpdateRecordPoint(uint8_t storeflag);
    920          //            //UpdateRecordPoint(1);
    921          //            //pch->StatNoRespCtr  = 0;
    922          //            
    923          //            //osal_set_event( OS_TASK_ID_TMR, OS_EVT_TMR_MIN);
    924          //        }
    925          //    } else {
    926          //        /***********************************************
    927          //        * 描述： 将数据打包给发送结构
    928          //        */ 
    929          //        APP_MaterCommHandler(pch);
    930          //    }
    931          //    
    932          //    /***********************************************
    933          //    * 描述： 串口接受COMM模组的消息并处理
    934          //    */
    935          //    sCtrl.Com.ConnectTimeOut    = 0;                // 超时计数器清零
    936          //    sCtrl.Com.ConnectFlag       = TRUE;             // 转连接成功标志
    937          //    
    938              return TRUE;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
    939          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     AppTaskCommStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     AppTaskCommTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     WdtFlagGRP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     sCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     sCtrl+0x249

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     sCtrl+0xBC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     WdtFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     MTR_RxQ

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Comm"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x41 0x70          DC8 "App_CommFlag"
   \              0x70 0x5F    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x46 0x6C    
   \              0x61 0x67    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    940          #endif
    941          /*******************************************************************************
    942           * 				end of file
    943           *******************************************************************************/
    944          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   APP_CSNC_CommHandler
       8   APP_CommInit
         8   -> App_ModbusInit
         8   -> OSFlagCreate
      32   APP_CommRxDataDealCB
        32   -> CSNC_GetData
        32   -> GetRecSlaveAddr
        32   -> GetRecvFrameNbr
        32   -> OSFlagPost
        32   -> __aeabi_memcpy
      24   APP_MaterCommHandler
        24   -> GetCheckSum
      32   AppTaskComm
        32   -> APP_CommInit
        32   -> BSP_LED_Toggle
        32   -> BSP_OS_TimeDly
        32   -> OSFlagPend
        32   -> OSFlagPost
        32   -> OS_ProtocolInit
        32   -> comm_para_flow
        32   -> comm_rec_read
      32   App_ModbusInit
        32   -> MB_CfgCh
        32   -> MB_Init
      48   App_TaskCommCreate
        48   -> OSTaskCreate
       0   IAP_CommRxDataDealCB
      40   NMBS_FCxx_Handler
        40   -> APP_CommRxDataDealCB
        40   -> OSQPost
        40   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      16  ?_0
      16  ?_1
       6  APP_CSNC_CommHandler
      40  APP_CommInit
     260  APP_CommRxDataDealCB
     164  APP_MaterCommHandler
     184  AppTaskComm
    2048  AppTaskCommStk
     160  AppTaskCommTCB
     116  App_ModbusInit
      60  App_TaskCommCreate
       6  IAP_CommRxDataDealCB
      48  MTR_RxQ
     136  NMBS_FCxx_Handler
      48  OSTmr1

 
 2 304 bytes in section .bss
    32 bytes in section .rodata
 1 012 bytes in section .text
 
 1 012 bytes of CODE  memory
    32 bytes of CONST memory
 2 304 bytes of DATA  memory

Errors: none
Warnings: none
