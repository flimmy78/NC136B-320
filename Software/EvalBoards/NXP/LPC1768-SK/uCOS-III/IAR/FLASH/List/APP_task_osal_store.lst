###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       25/May/2017  15:27:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\APP\Tasks\APP_task_osal_store.c
#    Command line =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\APP\Tasks\APP_task_osal_store.c
#        -lCN
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\APP_task_osal_store.lst
#    Object file  =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\APP_task_osal_store.o
#
###############################################################################

F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\APP\Tasks\APP_task_osal_store.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_store.c
      3           *   Revised:        All copyrights reserved to redmorningcn.
      4           *   Revision:       v1.0
      5           *   Writer:	     redmorningcn.
      6           *
      7           *   Description:    双击选中 store 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Store 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 STORE 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_STORE_PRIO ）
     14           *                                            和 任务堆栈（ APP_TASK_STORE_STK_SIZE ）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskStoreCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Store ）
     17           *
     18           *   Notes:
     19           *     				E-mail: redmorningcn@qq.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          #include <global.h>
     29          #include <app_ctrl.h>
     30          #include <CardDataTypeDef.h>
     31          #include <cpu.h>
     32          
     33          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     34          const  CPU_CHAR  *app_task_store__c = "$Id: $";
     35          #endif
     36          
     37          #define APP_TASK_STORE_EN     DEF_ENABLED
     38          #if APP_TASK_STORE_EN == DEF_ENABLED				//
     39          /*******************************************************************************
     40           * CONSTANTS
     41           */
     42          
     43          /*******************************************************************************
     44           * MACROS
     45           */
     46          #define		START_EVT		31		
     47          
     48          /*******************************************************************************
     49           * TYPEDEFS
     50           */
     51          
     52          /*******************************************************************************
     53           * LOCAL VARIABLES
     54           */
     55          
     56          #if ( OSAL_EN == DEF_ENABLED )
     57          #else
     58          /***********************************************
     59          * 描述： 任务控制块（TCB）
     60          */
     61          static  OS_TCB   AppTaskStoreTCB;
     62          
     63          /***********************************************
     64          * 描述： 任务堆栈（STACKS）
     65          */
     66          //static  CPU_STK  AppTaskStoreStk[ APP_TASK_STORE_STK_SIZE ];
     67          
     68          #endif
     69          /*******************************************************************************
     70           * GLOBAL VARIABLES
     71           */
     72          
     73          /*******************************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          #if ( OSAL_EN == DEF_ENABLED )
     77          #else
     78          extern	void    BSP_StoreInit(void);
     79          #endif
     80          
     81          /*******************************************************************************
     82           * GLOBAL FUNCTIONS
     83           */
     84          
     85          /*******************************************************************************
     86           * EXTERN VARIABLES
     87           */
     88          extern	stcSysCtrl       sCtrl;       	//	全局结构控制体
     89          /*******************************************************************************/
     90          
     91          /*******************************************************************************
     92           * 名    称： 		GetRecNumAddr
     93           * 功    能： 		取数据记录地址。
     94           					flash地址;更新记录号等信息。
     95           * 入口参数： 	无
     96           * 出口参数： 	无
     97           * 作　 　者： 	redmornigcn
     98           * 创建日期： 	2017-05-15
     99           * 修    改：
    100           * 修改日期：
    101           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          uint32  GetRecNumAddr(uint32 FlshRecNum)
    103          {				
    104              return  (uint32)(((FlshRecNum * sizeof(stcFlshRec)) % FLSH_MAX_SIZE)); 			
   \                     GetRecNumAddr: (+1)
   \   00000000   0x2180             MOVS     R1,#+128
   \   00000002   0xFB01 0xF100      MUL      R1,R1,R0
   \   00000006   0xF45F 0x0200      MOVS     R2,#+8388608
   \   0000000A   0xFBB1 0xF0F2      UDIV     R0,R1,R2
   \   0000000E   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000012   0x4770             BX       LR               ;; return
    105          }
    106          
    107          /*******************************************************************************
    108           * 名    称： 		StoreData
    109           * 功    能： 		数据存储。根据数据记录号将数据存储到指定
    110           					flash地址;更新记录号等信息。大部分数据记录的
    111           					内容在其他任务直接对sCtrl.sRec 中更新。少部分
    112           					数据内容在该函数中跟新。
    113           * 入口参数： 	无
    114           * 出口参数： 	无
    115           * 作　 　者： 	redmornigcn
    116           * 创建日期： 	2017-05-15
    117           * 修    改：
    118           * 修改日期：
    119           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    120          void  StoreData(void)
    121          {	
   \                     StoreData: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    122          	uint32				FlshAddr;							//数据存储地址
    123              stcTime             sTime;
    124          //  数据记录内容更新在应用中进行。
    125          //	数据内容存储在sCtrl.sRec 中。
    126          /*
    127          速度1，速度2，柴油机转速，工况，在app_task_osal_speed中更新
    128          油量，在app_task_osal_calc中更新
    129          高度1，高度2，在app_task_oasl_comm中更新
    130          */    
    131              
    132              
    133          //  存储时更新的内容
    134          	sCtrl.sRec.StoreCnt = sCtrl.sRecNumMgr.Current;     //取当前数据记录号	
   \   00000004   0x....             LDR.N    R0,??DataTable1
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x....             LDR.N    R1,??DataTable1
   \   0000000A   0x6208             STR      R0,[R1, #+32]
    135          
    136          //  装置时间:年-月-日，时-分-秒
    137          	ReadTime((stcTime *)&sTime);
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       ReadTime
    138          
    139          	sCtrl.sRec.MyYear		= sTime.Year;			
   \   00000012   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000016   0x....             LDR.N    R1,??DataTable1
   \   00000018   0xF881 0x006C      STRB     R0,[R1, #+108]
    140          	sCtrl.sRec.MyMonth	    = sTime.Month;		
   \   0000001C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000020   0x....             LDR.N    R1,??DataTable1
   \   00000022   0xF881 0x006D      STRB     R0,[R1, #+109]
    141          	sCtrl.sRec.MyData		= sTime.Date;			
   \   00000026   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000002A   0x....             LDR.N    R1,??DataTable1
   \   0000002C   0xF881 0x006E      STRB     R0,[R1, #+110]
    142          	sCtrl.sRec.MyHour		= sTime.Hour;			
   \   00000030   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000034   0x....             LDR.N    R1,??DataTable1
   \   00000036   0xF881 0x006F      STRB     R0,[R1, #+111]
    143          	sCtrl.sRec.MyMinute	    = sTime.Min;			
   \   0000003A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000003E   0x....             LDR.N    R1,??DataTable1
   \   00000040   0xF881 0x0070      STRB     R0,[R1, #+112]
    144          	sCtrl.sRec.MySecond	    = sTime.Sec;			
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0x....             LDR.N    R1,??DataTable1
   \   0000004A   0xF881 0x0071      STRB     R0,[R1, #+113]
    145          
    146          //开机标示
    147              if(sCtrl.sRunPara.StartFlg)
   \   0000004E   0x....             LDR.N    R0,??DataTable1
   \   00000050   0xF890 0x00AF      LDRB     R0,[R0, #+175]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD007             BEQ.N    ??StoreData_0
    148              {
    149                  sCtrl.sRec.RecTypCod = START_EVT;               
   \   00000058   0x201F             MOVS     R0,#+31
   \   0000005A   0x....             LDR.N    R1,??DataTable1
   \   0000005C   0xF881 0x0024      STRB     R0,[R1, #+36]
    150                  sCtrl.sRunPara.StartFlg = 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR.N    R1,??DataTable1
   \   00000064   0xF881 0x00AF      STRB     R0,[R1, #+175]
    151              }
    152              
    153          //存储机车信息
    154              sCtrl.sRec.JcRealType   = sCtrl.sProductInfo.sLocoId.Type;
   \                     ??StoreData_0: (+1)
   \   00000068   0x....             LDR.N    R0,??DataTable1
   \   0000006A   0x8B80             LDRH     R0,[R0, #+28]
   \   0000006C   0x....             LDR.N    R1,??DataTable1
   \   0000006E   0xF8A1 0x0084      STRH     R0,[R1, #+132]
    155              sCtrl.sRec.JcRealNo     = sCtrl.sProductInfo.sLocoId.Num;
   \   00000072   0x....             LDR.N    R0,??DataTable1
   \   00000074   0x8BC0             LDRH     R0,[R0, #+30]
   \   00000076   0x....             LDR.N    R1,??DataTable1
   \   00000078   0xF8A1 0x0086      STRH     R0,[R1, #+134]
    156          
    157          //软件版本    
    158              sCtrl.sRec.SoftVes 	    = sCtrl.SoftWareID;     
   \   0000007C   0x....             LDR.N    R0,??DataTable1
   \   0000007E   0x8840             LDRH     R0,[R0, #+2]
   \   00000080   0x....             LDR.N    R1,??DataTable1
   \   00000082   0xF881 0x009C      STRB     R0,[R1, #+156]
    159          //故障代码
    160          //    sCtrl.sRec.ErrorCode    = 
    161          
    162          //运算参数
    163              sCtrl.sRec.OilBoxModel  = sCtrl.SOilPara.ModelNum;
   \   00000086   0x....             LDR.N    R0,??DataTable1
   \   00000088   0xF890 0x00A0      LDRB     R0,[R0, #+160]
   \   0000008C   0x....             LDR.N    R1,??DataTable1
   \   0000008E   0xF881 0x009B      STRB     R0,[R1, #+155]
    164          //    sCtrl.sRec.
    165                  
    166              
    167          //暂时没用的数据清零
    168               sCtrl.sRec.Car_Truck       = 0;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x....             LDR.N    R1,??DataTable1
   \   00000096   0xF881 0x0037      STRB     R0,[R1, #+55]
    169               *sCtrl.sRec.DriverUnitNum   = 0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x....             LDR.N    R1,??DataTable1
   \   0000009E   0xF881 0x0046      STRB     R0,[R1, #+70]
    170               sCtrl.sRec.E_LocoTyp       = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR.N    R1,??DataTable1
   \   000000A6   0xF881 0x002D      STRB     R0,[R1, #+45]
    171               sCtrl.sRec.E_MstDriverNum  = 0;
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x....             LDR.N    R1,??DataTable1
   \   000000AE   0xF881 0x0042      STRB     R0,[R1, #+66]
    172               sCtrl.sRec.E_SlvDriverNum  = 0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x....             LDR.N    R1,??DataTable1
   \   000000B6   0xF881 0x0043      STRB     R0,[R1, #+67]
    173               sCtrl.sRec.E_StationNum    = 0;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x....             LDR.N    R1,??DataTable1
   \   000000BE   0xF881 0x004B      STRB     R0,[R1, #+75]
    174               sCtrl.sRec.GpsLatitude     = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x....             LDR.N    R1,??DataTable1
   \   000000C6   0x67C8             STR      R0,[R1, #+124]
    175               sCtrl.sRec.GpsLongitude    = 0;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x....             LDR.N    R1,??DataTable1
   \   000000CC   0x6788             STR      R0,[R1, #+120]
    176               *sCtrl.sRec.KmMark          = 0;
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x....             LDR.N    R1,??DataTable1
   \   000000D2   0xF881 0x0039      STRB     R0,[R1, #+57]
    177               *sCtrl.sRec.LocoNum         = 0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x....             LDR.N    R1,??DataTable1
   \   000000DA   0xF881 0x002E      STRB     R0,[R1, #+46]
    178               sCtrl.sRec.LocoSign        = 0;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0x....             LDR.N    R1,??DataTable1
   \   000000E2   0xF881 0x004D      STRB     R0,[R1, #+77]
    179               sCtrl.sRec.LocoState       = 0;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x....             LDR.N    R1,??DataTable1
   \   000000EA   0xF881 0x004F      STRB     R0,[R1, #+79]
    180               sCtrl.sRec.LocoTyp         = 0;
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x....             LDR.N    R1,??DataTable1
   \   000000F2   0xF881 0x002C      STRB     R0,[R1, #+44]
    181               sCtrl.sRec.LocoWorkState   = 0;
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x....             LDR.N    R1,??DataTable1
   \   000000FA   0xF881 0x004E      STRB     R0,[R1, #+78]
    182               sCtrl.sRec.MaxSpeed        = 0;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x....             LDR.N    R1,??DataTable1
   \   00000102   0xF8A1 0x0094      STRH     R0,[R1, #+148]
    183               sCtrl.sRec.MstDensity      = 0;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x....             LDR.N    R1,??DataTable1
   \   0000010A   0xF8A1 0x0072      STRH     R0,[R1, #+114]
    184               sCtrl.sRec.MstDipTemp      = 0;
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x....             LDR.N    R1,??DataTable1
   \   00000112   0xF881 0x009A      STRB     R0,[R1, #+154]
    185               sCtrl.sRec.MyAddspeed      = 0;
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x....             LDR.N    R1,??DataTable1
   \   0000011A   0xF8A1 0x0074      STRH     R0,[R1, #+116]
    186               sCtrl.sRec.MyDip1Den       = 0;
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x....             LDR.N    R1,??DataTable1
   \   00000122   0xF8A1 0x008C      STRH     R0,[R1, #+140]
    187               sCtrl.sRec.MyDip2Den       = 0;
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x....             LDR.N    R1,??DataTable1
   \   0000012A   0xF8A1 0x008E      STRH     R0,[R1, #+142]
    188               sCtrl.sRec.MyKileMeter     = 0;
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x....             LDR.N    R1,??DataTable1
   \   00000132   0x6588             STR      R0,[R1, #+88]
    189               sCtrl.sRec.MyMstLocoPower  = 0;
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x....             LDR.N    R1,??DataTable1
   \   00000138   0x65C8             STR      R0,[R1, #+92]
    190               sCtrl.sRec.MyPower         = 0;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x....             LDR.N    R1,??DataTable1
   \   0000013E   0x6608             STR      R0,[R1, #+96]
    191               *sCtrl.sRec.PlanLen         = 0;
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x....             LDR.N    R1,??DataTable1
   \   00000144   0xF881 0x003E      STRB     R0,[R1, #+62]
    192               sCtrl.sRec.RelRoadNum      = 0;
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x....             LDR.N    R1,??DataTable1
   \   0000014C   0xF881 0x0049      STRB     R0,[R1, #+73]
    193               sCtrl.sRec.Reserve1        = 0;
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x....             LDR.N    R1,??DataTable1
   \   00000154   0xF881 0x009D      STRB     R0,[R1, #+157]
    194               sCtrl.sRec.RoadNum         = 0;
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x....             LDR.N    R1,??DataTable1
   \   0000015C   0xF881 0x0048      STRB     R0,[R1, #+72]
    195               sCtrl.sRec.SignalTyp       = 0;
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x....             LDR.N    R1,??DataTable1
   \   00000164   0xF881 0x004C      STRB     R0,[R1, #+76]
    196               sCtrl.sRec.SlvDip1Prs      = 0;
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0x....             LDR.N    R1,??DataTable1
   \   0000016C   0xF8A1 0x0068      STRH     R0,[R1, #+104]
    197               sCtrl.sRec.SlvDip2Prs      = 0;
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x....             LDR.N    R1,??DataTable1
   \   00000174   0xF8A1 0x006A      STRH     R0,[R1, #+106]
    198               sCtrl.sRec.StationNum      = 0;
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x....             LDR.N    R1,??DataTable1
   \   0000017C   0xF881 0x004A      STRB     R0,[R1, #+74]
    199               *sCtrl.sRec.SlvDriverNum    = 0;
   \   00000180   0x2000             MOVS     R0,#+0
   \   00000182   0x....             LDR.N    R1,??DataTable1
   \   00000184   0xF881 0x0044      STRB     R0,[R1, #+68]
    200               *sCtrl.sRec.Time            = 0;
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0x....             LDR.N    R1,??DataTable1
   \   0000018C   0xF881 0x0028      STRB     R0,[R1, #+40]
    201               *sCtrl.sRec.TrainNum        = 0;
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x....             LDR.N    R1,??DataTable1
   \   00000194   0xF881 0x0034      STRB     R0,[R1, #+52]
    202               *sCtrl.sRec.TrainTyp        = 0;
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x....             LDR.N    R1,??DataTable1
   \   0000019C   0xF881 0x0030      STRB     R0,[R1, #+48]
    203               sCtrl.sRec.VoitureCnt      = 0;
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x....             LDR.N    R1,??DataTable1
   \   000001A4   0xF881 0x0038      STRB     R0,[R1, #+56]
    204               *sCtrl.sRec.Weight          = 0;
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0x....             LDR.N    R1,??DataTable1
   \   000001AC   0xF881 0x003C      STRB     R0,[R1, #+60]
    205               
    206              
    207          //  关调度及中断，数据不允许更新
    208              CPU_SR  cpu_sr;
    209          CPU_CRITICAL_ENTER() ;
   \   000001B0   0x.... 0x....      BL       CPU_SR_Save
   \   000001B4   0x0005             MOVS     R5,R0
   \   000001B6   0x.... 0x....      BL       CPU_IntDisMeasStart
    210          // 	计算记录校验和
    211          	sCtrl.sRec.CrcCheck = GetCrc16Check((uint8 *)&sCtrl.sRec,sizeof(sCtrl.sRec) - 2);
   \   000001BA   0x217E             MOVS     R1,#+126
   \   000001BC   0x....             LDR.N    R0,??DataTable1_1
   \   000001BE   0x.... 0x....      BL       GetCrc16Check
   \   000001C2   0x....             LDR.N    R1,??DataTable1
   \   000001C4   0xF8A1 0x009E      STRH     R0,[R1, #+158]
    212          
    213          // 	计算数据记录地址
    214              FlshAddr = GetRecNumAddr( sCtrl.sRec.StoreCnt);		//
   \   000001C8   0x....             LDR.N    R0,??DataTable1
   \   000001CA   0x6A00             LDR      R0,[R0, #+32]
   \   000001CC   0x.... 0x....      BL       GetRecNumAddr
   \   000001D0   0x0004             MOVS     R4,R0
    215          
    216          //	数据存储到flash
    217          	if(!WriteFlsh(FlshAddr, (uint16 *)&sCtrl.sRec, sizeof(sCtrl.sRec)))
   \   000001D2   0x2280             MOVS     R2,#+128
   \   000001D4   0x....             LDR.N    R1,??DataTable1_1
   \   000001D6   0x0020             MOVS     R0,R4
   \   000001D8   0x.... 0x....      BL       WriteFlsh
    218          	{}
    219          
    220          //	开调度及中断
    221          CPU_CRITICAL_EXIT();
   \   000001DC   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001E0   0x0028             MOVS     R0,R5
   \   000001E2   0x.... 0x....      BL       CPU_SR_Restore
    222          
    223          // 	保存数据记录号
    224              sCtrl.sRecNumMgr.Current++;
   \   000001E6   0x....             LDR.N    R0,??DataTable1
   \   000001E8   0x6840             LDR      R0,[R0, #+4]
   \   000001EA   0x1C40             ADDS     R0,R0,#+1
   \   000001EC   0x....             LDR.N    R1,??DataTable1
   \   000001EE   0x6048             STR      R0,[R1, #+4]
    225          	FRAM_StoreRecNumMgr((StrRecNumMgr  *)&sCtrl.sRecNumMgr);    //数据记录号加1，并保存
   \   000001F0   0x....             LDR.N    R0,??DataTable1_2
   \   000001F2   0x.... 0x....      BL       FRAM_StoreRecNumMgr
    226          }
   \   000001F6   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    227          
    228          /*******************************************************************************
    229           * 名    称： 		ReadFlshRec
    230           * 功    能： 		根据记录号，取数据记录
    231           * 入口参数： 	    无
    232           * 出口参数： 	    无
    233           * 作　 　者： 	    redmornigcn
    234           * 创建日期： 	    2017-05-15
    235           * 修    改：
    236           * 修改日期：
    237           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          uint8	ReadFlshRec(stcFlshRec * sFlshRec,uint32	FlshRecNum)
    239          {
   \                     ReadFlshRec: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    240          	uint32		FlshAddr;
    241          	
    242          	FlshAddr = GetRecNumAddr( FlshRecNum );						
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0x.... 0x....      BL       GetRecNumAddr
   \   0000000C   0x0006             MOVS     R6,R0
    243          	
    244          	if(ReadFlsh(FlshAddr,(uint16 *)sFlshRec,sizeof(stcFlshRec)))
   \   0000000E   0x2280             MOVS     R2,#+128
   \   00000010   0x0021             MOVS     R1,R4
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0x.... 0x....      BL       ReadFlsh
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD001             BEQ.N    ??ReadFlshRec_0
    245          	{
    246          		return 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE000             B.N      ??ReadFlshRec_1
    247          	}
    248          	
    249          	return	0;
   \                     ??ReadFlshRec_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \                     ??ReadFlshRec_1: (+1)
   \   00000022   0xBD70             POP      {R4-R6,PC}       ;; return
    250          }
    251          
    252          /*******************************************************************************
    253           * 名    称：  TaskInitStore
    254           * 功    能：  任务初始化
    255           * 入口参数： 	无
    256           * 出口参数： 	无
    257           * 作　 　者： 	redmornigcn
    258           * 创建日期： 	2017-05-15
    259           * 修    改：
    260           * 修改日期：
    261           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    262          void    BSP_StoreInit(void)
    263          {
   \                     BSP_StoreInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    264          	InitFlashIO();      //初始化flash
   \   00000002   0x.... 0x....      BL       InitFlashIO
    265          
    266              GPIO_Fram_Init();   //初始化fram
   \   00000006   0x.... 0x....      BL       GPIO_Fram_Init
    267              
    268              InitDS3231();       //初始化时钟
   \   0000000A   0x.... 0x....      BL       InitDS3231
    269                  
    270             //读sCtrl 
    271              FRAM_ReadRecNumMgr((StrRecNumMgr  *)&sCtrl.sRecNumMgr);         //读记录号
   \   0000000E   0x....             LDR.N    R0,??DataTable1_2
   \   00000010   0x.... 0x....      BL       FRAM_ReadRecNumMgr
    272              FRAM_ReadProductInfo((StrProductInfo  *)&sCtrl.sProductInfo);   //读产品编号
   \   00000014   0x....             LDR.N    R0,??DataTable1_3
   \   00000016   0x.... 0x....      BL       FRAM_ReadProductInfo
    273              FRAM_ReadCurRecord((stcFlshRec  *)&sCtrl.sRec);                 //读当前记录
   \   0000001A   0x....             LDR.N    R0,??DataTable1_1
   \   0000001C   0x.... 0x....      BL       FRAM_ReadCurRecord
    274              FRAM_ReadOilPara((StrOilPara  *)&sCtrl.SOilPara);               //读计算参数
   \   00000020   0x....             LDR.N    R0,??DataTable1_4
   \   00000022   0x.... 0x....      BL       FRAM_ReadOilPara
    275              FRAM_ReadRunPara((stcRunPara  *)&sCtrl.sRunPara);               //读运行参数
   \   00000026   0x....             LDR.N    R0,??DataTable1_5
   \   00000028   0x.... 0x....      BL       FRAM_ReadRunPara
    276              FRAM_ReadCalcModel((stcCalcModel  *)&sCtrl.sCalcModel);         //读计算模型
   \   0000002C   0x....             LDR.N    R0,??DataTable1_6
   \   0000002E   0x.... 0x....      BL       FRAM_ReadCalcModel
    277          
    278          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    279          
    280          /*******************************************************************************
    281           * 名    称：  TaskInitStore
    282           * 功    能：  任务初始化
    283           * 入口参数： 	无
    284           * 出口参数： 	无
    285           * 作　 　者： 	redmornigcn
    286           * 创建日期： 	2017-05-15
    287           * 修    改：
    288           * 修改日期：
    289           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    290          void TaskInitStore(void)
    291          {    
   \                     TaskInitStore: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    292          //    /***********************************************
    293          //    * 描述： 初始化本任务用到的相关硬件
    294          //    */
    295              BSP_StoreInit();			//初始化Flash底层相关函数
   \   00000002   0x.... 0x....      BL       BSP_StoreInit
    296          
    297              //初始化定时器
    298              osal_start_timerEx( OS_TASK_ID_STORE,
    299                                OS_EVT_STORE_TICKS,
    300                                1000);
   \   00000006   0xF44F 0x727A      MOV      R2,#+1000
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       osal_start_timerEx
    301          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    302          
    303          extern  MODBUS_CH   *g_pch; 
    304          /*******************************************************************************
    305           * 名    称： 		AppTaskStore
    306           * 功    能： 		控制任务
    307           * 入口参数： 	p_arg - 由任务创建函数传入
    308           * 出口参数： 	无
    309           * 作　 　者： 	redmorningcn.
    310           * 创建日期： 	2017-05-15
    311           * 修    改：
    312           * 修改日期：
    313           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    314          osalEvt  TaskStoreEvtProcess(INT8U task_id, osalEvt task_event)
    315          {
   \                     TaskStoreEvtProcess: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    316              OS_ERR      err;
    317              INT32U      ticks;
    318              INT32S      dly;
    319              CPU_SR_ALLOC();
   \   00000006   0x2600             MOVS     R6,#+0
    320          
    321              if( task_event & OS_EVT_STORE_TICKS ) {
   \   00000008   0x07E8             LSLS     R0,R5,#+31
   \   0000000A   0xD50A             BPL.N    ??TaskStoreEvtProcess_0
    322          
    323          
    324                      StoreData();            //保存数据记录
   \   0000000C   0x.... 0x....      BL       StoreData
    325                      
    326                      osal_start_timerEx( OS_TASK_ID_STORE,
    327                                          OS_EVT_STORE_TICKS,
    328                                          1000*60);
   \   00000010   0xF64E 0x2260      MOVW     R2,#+60000
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x.... 0x....      BL       osal_start_timerEx
    329                                          //1000);
    330                      
    331                      return ( task_event ^ OS_EVT_STORE_TICKS );
   \   0000001C   0xF095 0x0001      EORS     R0,R5,#0x1
   \   00000020   0xE7FF             B.N      ??TaskStoreEvtProcess_1
    332                  }
    333          }
   \                     ??TaskStoreEvtProcess_0: (+1)
   \                     ??TaskStoreEvtProcess_1: (+1)
   \   00000022   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     sCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     sCtrl+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     sCtrl+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     sCtrl+0x14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     sCtrl+0xA0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     sCtrl+0xAC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     sCtrl+0xB4
    334          
    335          
    336          
    337          /*******************************************************************************
    338           * 				                    end of file                                *
    339           *******************************************************************************/
    340          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BSP_StoreInit
         8   -> FRAM_ReadCalcModel
         8   -> FRAM_ReadCurRecord
         8   -> FRAM_ReadOilPara
         8   -> FRAM_ReadProductInfo
         8   -> FRAM_ReadRecNumMgr
         8   -> FRAM_ReadRunPara
         8   -> GPIO_Fram_Init
         8   -> InitDS3231
         8   -> InitFlashIO
       0   GetRecNumAddr
      16   ReadFlshRec
        16   -> GetRecNumAddr
        16   -> ReadFlsh
      24   StoreData
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> FRAM_StoreRecNumMgr
        24   -> GetCrc16Check
        24   -> GetRecNumAddr
        24   -> ReadTime
        24   -> WriteFlsh
       8   TaskInitStore
         8   -> BSP_StoreInit
         8   -> osal_start_timerEx
      16   TaskStoreEvtProcess
        16   -> StoreData
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      52  BSP_StoreInit
      20  GetRecNumAddr
      36  ReadFlshRec
     504  StoreData
      20  TaskInitStore
      36  TaskStoreEvtProcess

 
 696 bytes in section .text
 
 696 bytes of CODE memory

Errors: none
Warnings: 17
