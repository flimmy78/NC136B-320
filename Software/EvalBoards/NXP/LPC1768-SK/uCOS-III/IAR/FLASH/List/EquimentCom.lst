###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       18/Dec/2017  15:36:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Application\Library\EquipmentOperations\EquimentCom.c
#    Command line =  
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Application\Library\EquipmentOperations\EquimentCom.c" -lCN
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\EquimentCom.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\EquimentCom.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Application\Library\EquipmentOperations\EquimentCom.c
      1          #include <includes.h>
      2          #include 	"OperateCard.h"
      3          #include  "csnr_package_deal.h"
      4          
      5          

   \                                 In section .bss, align 1
      6          uint8	l_led1com2flg = 0;
   \                     l_led1com2flg:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      7          uint8	l_led2com3flg = 0;
   \                     l_led2com3flg:
   \   00000000                      DS8 1
      8          //
      9          //uint8	GetLed1Com2Flg(void)
     10          //{
     11          //	return	l_led1com2flg;
     12          //}
     13          //
     14          //uint8	GetLed2Com3Flg(void)
     15          //{
     16          //	return	l_led2com3flg;
     17          //}
     18          //
     19          //
     20          //uint8	GetFramRecEndFlgCom2(void)
     21          //{
     22          //	return GetCOM2EndFlg();
     23          //}
     24          //
     25          //uint8	GetFramRecEndFlgCom3(void)
     26          //{
     27          //	return GetCOM3EndFlg();
     28          //}
     29          //
     30          //void	ClearFramRecEndFlgCom3(void)
     31          //{
     32          //	ClearCOM3EndFlg();
     33          //}
     34          //void	ClearFramRecEndFlgCom2(void)
     35          //{
     36          //	ClearCOM2EndFlg();
     37          //}
     38          //
     39          ////Çå½ÓÊÕÍê³É±êÖ¾  ÄÏÈð
     40          //void	ClearFramRecEndFlg(void)
     41          //{
     42          //	ClearCOM1EndFlg();
     43          //}
     44          
     45          //uint16	ReadRs485Data(uint8 *Buf)
     46          //{
     47          //	return	ReadCOM1(Buf,256);
     48          //}
     49          

   \                                 In section .text, align 2, keep-with-next
     50          uint16	ReadRs485DataCom2(uint8 *Buf)
     51          {
   \                     ReadRs485DataCom2: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     52          	return	ReadCOM2(Buf,256);
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       ReadCOM2
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          uint16	ReadRs485DataCom3(uint8 *Buf)
     56          {
   \                     ReadRs485DataCom3: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     57          	return	ReadCOM3(Buf,256);
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       ReadCOM3
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     58          }
     59          
     60          

   \                                 In section .bss, align 1
     61          uint8	l_befaddr = 0;
   \                     l_befaddr:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     62          unsigned char GetRecaddr()
     63          {
     64          	return	l_befaddr;
   \                     GetRecaddr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     65          }

   \                                 In section .bss, align 1
     66          static	unsigned char l_recFlg = 0;
   \                     l_recFlg:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     67          unsigned char GetRecFlg(void)
     68          {
     69          	return l_recFlg;
   \                     GetRecFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     70          }
     71          

   \                                 In section .bss, align 4
     72          unsigned int  l_eqiupmentcode = 0;
   \                     l_eqiupmentcode:
   \   00000000                      DS8 4
     73          
     74          
     75          

   \                                 In section .bss, align 1
     76          uint8	sentendflg = 0;
   \                     sentendflg:
   \   00000000                      DS8 1
     77          //uint8	l_befaddr = 0;

   \                                 In section .bss, align 1
     78          uint8	l_senddatacomflg = 0;
   \                     l_senddatacomflg:
   \   00000000                      DS8 1
     79          
     80          //uint8	l_readdataoprateflg = 0;

   \                                 In section .bss, align 4
     81          uint32	l_senddatastartnum = 0;
   \                     l_senddatastartnum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          uint32	l_senddataendnum = 0;
   \                     l_senddataendnum:
   \   00000000                      DS8 4
     83          

   \                                 In section .text, align 2, keep-with-next
     84          uint8	GetSendDataComFlg(void)
     85          {
     86          	return	 l_senddatacomflg;
   \                     GetSendDataComFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     87          }
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void	ClearSendDataComFlg(void)
     90          {
     91          	l_senddatacomflg = 0;
   \                     ClearSendDataComFlg: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable6_2
   \   00000004   0x7008             STRB     R0,[R1, #+0]
     92          }
   \   00000006   0x4770             BX       LR               ;; return
     93          

   \                                 In section .bss, align 4
     94          uint32	l_readdatadisplaytime = 0;
   \                     l_readdatadisplaytime:
   \   00000000                      DS8 4
     95          

   \                                 In section .text, align 2, keep-with-next
     96          uint32	GetReadDataDisplayTime(void)
     97          {
     98          	return	l_readdatadisplaytime;
   \                     GetReadDataDisplayTime: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_3
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void CarddataOperate(unsigned char *buf,unsigned int Len)		
    102          {
   \                     CarddataOperate: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    103          	unsigned int   datalen = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    104          	unsigned char  resflg = 1;
   \   0000000C   0x2601             MOVS     R6,#+1
    105          		
    106          	if(Len < 4)
   \   0000000E   0x2D04             CMP      R5,#+4
   \   00000010   0xF0C0 0x8125      BCC.W    ??CarddataOperate_0
    107          	{
    108          //		printfcom0("\r\n Êý¾Ý³¤¶ÈÐ¡ÓÚ4");
    109          		return	;
    110          	}
    111          	
    112          	datalen = 0;
   \                     ??CarddataOperate_1: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0007             MOVS     R7,R0
    113          	memcpy((unsigned char *)&l_eqiupmentcode,&buf[datalen],sizeof(l_eqiupmentcode));
   \   00000018   0xF05F 0x0804      MOVS     R8,#+4
   \   0000001C   0xEB17 0x0904      ADDS     R9,R7,R4
   \   00000020   0x.... 0x....      LDR.W    R10,??DataTable6_4
   \   00000024   0x4642             MOV      R2,R8
   \   00000026   0x4649             MOV      R1,R9
   \   00000028   0x4650             MOV      R0,R10
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy
    114          	datalen += sizeof(l_eqiupmentcode);
   \   0000002E   0x1D3F             ADDS     R7,R7,#+4
    115          	
    116          //	printfcom0("½ÓÊÕµÄÊý¾ÝÀàÐÍ %x",l_eqiupmentcode);
    117          	resflg = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x0006             MOVS     R6,R0
    118          		
    119          	if(l_eqiupmentcode != 0)
   \   00000034   0x....             LDR.N    R0,??DataTable6_4
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xF000 0x8110      BEQ.W    ??CarddataOperate_2
    120          	{
    121          		switch (l_eqiupmentcode)
   \   0000003E   0x....             LDR.N    R0,??DataTable6_4
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD048             BEQ.N    ??CarddataOperate_3
   \   00000046   0x2820             CMP      R0,#+32
   \   00000048   0xD063             BEQ.N    ??CarddataOperate_4
   \   0000004A   0x2840             CMP      R0,#+64
   \   0000004C   0xF000 0x8085      BEQ.W    ??CarddataOperate_5
   \   00000050   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000054   0xF000 0x8084      BEQ.W    ??CarddataOperate_6
   \   00000058   0xF5B0 0x7F00      CMP      R0,#+512
   \   0000005C   0xF000 0x8090      BEQ.W    ??CarddataOperate_7
   \   00000060   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000064   0xF000 0x8098      BEQ.W    ??CarddataOperate_8
   \   00000068   0xF5B0 0x5F80      CMP      R0,#+4096
   \   0000006C   0xF000 0x8098      BEQ.W    ??CarddataOperate_9
   \   00000070   0xF5B0 0x5F00      CMP      R0,#+8192
   \   00000074   0xF000 0x80A0      BEQ.W    ??CarddataOperate_10
   \   00000078   0xF5B0 0x4F80      CMP      R0,#+16384
   \   0000007C   0xF000 0x80B4      BEQ.W    ??CarddataOperate_11
   \   00000080   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000084   0xD012             BEQ.N    ??CarddataOperate_12
   \   00000086   0xF5B0 0x3F00      CMP      R0,#+131072
   \   0000008A   0xD01B             BEQ.N    ??CarddataOperate_13
   \   0000008C   0xF5B0 0x2F80      CMP      R0,#+262144
   \   00000090   0xF000 0x80AE      BEQ.W    ??CarddataOperate_14
   \   00000094   0xF5B0 0x2F00      CMP      R0,#+524288
   \   00000098   0xF000 0x80C1      BEQ.W    ??CarddataOperate_15
   \   0000009C   0xF5B0 0x1F80      CMP      R0,#+1048576
   \   000000A0   0xF000 0x80CF      BEQ.W    ??CarddataOperate_16
   \   000000A4   0xF5B0 0x1F00      CMP      R0,#+2097152
   \   000000A8   0xD03F             BEQ.N    ??CarddataOperate_17
   \   000000AA   0xE0CF             B.N      ??CarddataOperate_18
    122          		{
    123          			unsigned int    startnum;
    124          			short           density; 
    125                      uint32          calcpara; 
    126          
    127          			stcTime		sTime;   
    128          			short   hig; 
    129          			char	modelnum;
    130          			unsigned short locotype,loconum; 
    131          			stcSysRunPara	sSysRunPara;
    132          	
    133          			case DATA_CARD_DIS: 
    134          							  ClaerDisplaySetWithoutStore();
   \                     ??CarddataOperate_12: (+1)
   \   000000AC   0x.... 0x....      BL       ClaerDisplaySetWithoutStore
    135          //							  ReadCardDisplay(0);
    136          							  printfcom0("\r\n\r\n ReadCardDisplay");
   \   000000B0   0x....             LDR.N    R0,??DataTable6_5
   \   000000B2   0x.... 0x....      BL       printfcom0
    137          							  resflg = 0;
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x0006             MOVS     R6,R0
    138          							  l_readdatadisplaytime = GetSysTime();
   \   000000BA   0x.... 0x....      BL       GetSysTime
   \   000000BE   0x....             LDR.N    R1,??DataTable6_3
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    139          							  //DelayX10ms(200);
    140          							  break; 
   \   000000C2   0xE0C3             B.N      ??CarddataOperate_18
    141          			case DATA_CARD_FIN: 
    142          //							  IndicateWriteCardFinsh();
    143          							  printfcom0("\r\n IndicateWriteCardFinsh");
   \                     ??CarddataOperate_13: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable6_6
   \   000000C6   0x.... 0x....      BL       printfcom0
    144          							  resflg = 0;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x0006             MOVS     R6,R0
    145          							  l_readdatadisplaytime = GetSysTime();
   \   000000CE   0x.... 0x....      BL       GetSysTime
   \   000000D2   0x....             LDR.N    R1,??DataTable6_3
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    146          							  break; 	
   \   000000D6   0xE0B9             B.N      ??CarddataOperate_18
    147          //			case DATA_CARD_ERR: 
    148          ////							  IndicateWriteCardFinsh();
    149          //							  printfcom0("\r\n IndicateWriteCardFinsh");
    150          //							  resflg = 0;
    151          //							  l_readdatadisplaytime = GetSysTime();
    152          //							  break; 	                              
    153          			case DATA_CARD:   //¿¨Êý¾Ý¶ÁÈ¡
    154          							  //startnum=0,endnum=0xffffffff;
    155          //							  printfcom0("\r\n DATA_CARD ×¼±¸·¢ËÍÊý¾Ý ");
    156          							  memcpy((unsigned char *)&l_senddatastartnum,&buf[datalen],sizeof(l_senddatastartnum));
   \                     ??CarddataOperate_3: (+1)
   \   000000D8   0xF05F 0x0804      MOVS     R8,#+4
   \   000000DC   0x1938             ADDS     R0,R7,R4
   \   000000DE   0x9000             STR      R0,[SP, #+0]
   \   000000E0   0x.... 0x....      LDR.W    R9,??DataTable6_7
   \   000000E4   0x4642             MOV      R2,R8
   \   000000E6   0x9900             LDR      R1,[SP, #+0]
   \   000000E8   0x4648             MOV      R0,R9
   \   000000EA   0x.... 0x....      BL       __aeabi_memcpy
    157          							  datalen += sizeof(startnum);
   \   000000EE   0x1D3F             ADDS     R7,R7,#+4
    158          							  memcpy((unsigned char *)&l_senddataendnum,&buf[datalen],sizeof(l_senddataendnum));  
   \   000000F0   0xF05F 0x0904      MOVS     R9,#+4
   \   000000F4   0xEB17 0x0A04      ADDS     R10,R7,R4
   \   000000F8   0x.... 0x....      LDR.W    R11,??DataTable6_8
   \   000000FC   0x464A             MOV      R2,R9
   \   000000FE   0x4651             MOV      R1,R10
   \   00000100   0x4658             MOV      R0,R11
   \   00000102   0x.... 0x....      BL       __aeabi_memcpy
    159          							  
    160          							  l_senddatacomflg = 1;
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0x....             LDR.N    R1,??DataTable6_2
   \   0000010A   0x7008             STRB     R0,[R1, #+0]
    161          							  //l_readdataoprateflg = 1;
    162          							  //EquipmentReadData(startnum,endnum);								//
    163          							  resflg = 0;		
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x0006             MOVS     R6,R0
    164          							  break;    
   \   00000110   0xE09C             B.N      ??CarddataOperate_18
    165          			case DENSITY_CARD: 
    166          //				              printfcom0("\r\n DENSITY_CARD ");  
    167          							  memcpy((unsigned char *)&density,&buf[datalen],sizeof(density));
   \                     ??CarddataOperate_4: (+1)
   \   00000112   0xF05F 0x0802      MOVS     R8,#+2
   \   00000116   0xEB17 0x0904      ADDS     R9,R7,R4
   \   0000011A   0xF10D 0x0A08      ADD      R10,SP,#+8
   \   0000011E   0x4642             MOV      R2,R8
   \   00000120   0x4649             MOV      R1,R9
   \   00000122   0x4650             MOV      R0,R10
   \   00000124   0x.... 0x....      BL       __aeabi_memcpy
    168          							  
    169          //							  SetDen(density);
    170          //							  printfcom0("\r\n density %d  Êý¾Ý³¤¶È %d datalen %d  buf %x buf++ %x",density,sizeof(density),datalen,buf[datalen],buf[datalen+1]);  
    171          							  break;   
   \   00000128   0xE090             B.N      ??CarddataOperate_18
    172          
    173          			case CALC_PARA: 
    174          //				              printfcom0("\r\n DENSITY_CARD ");  
    175          							  memcpy((unsigned char *)&calcpara,&buf[datalen],sizeof(calcpara));
   \                     ??CarddataOperate_17: (+1)
   \   0000012A   0xF05F 0x0804      MOVS     R8,#+4
   \   0000012E   0x1938             ADDS     R0,R7,R4
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0xF10D 0x0920      ADD      R9,SP,#+32
   \   00000136   0x4642             MOV      R2,R8
   \   00000138   0x9900             LDR      R1,[SP, #+0]
   \   0000013A   0x4648             MOV      R0,R9
   \   0000013C   0x.... 0x....      BL       __aeabi_memcpy
    176          							  datalen += sizeof(calcpara);
   \   00000140   0x1D3F             ADDS     R7,R7,#+4
    177          //							  SetCalcPara(calcpara);
    178                      
    179                      
    180                                        memcpy((unsigned char *)&hig,&buf[datalen],sizeof(hig));
   \   00000142   0xF05F 0x0902      MOVS     R9,#+2
   \   00000146   0xEB17 0x0A04      ADDS     R10,R7,R4
   \   0000014A   0xF10D 0x0B04      ADD      R11,SP,#+4
   \   0000014E   0x464A             MOV      R2,R9
   \   00000150   0x4651             MOV      R1,R10
   \   00000152   0x4658             MOV      R0,R11
   \   00000154   0x.... 0x....      BL       __aeabi_memcpy
    181          //							  SetHight(hig);
    182                      
    183          //							  printfcom0("\r\n density %d  Êý¾Ý³¤¶È %d datalen %d  buf %x buf++ %x",density,sizeof(density),datalen,buf[datalen],buf[datalen+1]);  
    184          							  break;                
   \   00000158   0xE078             B.N      ??CarddataOperate_18
    185          			case MODEL_CARD:  
    186          							  //printfcom0("\r\n MODEL_CARD "); 
    187          //							  SetModel(&buf[datalen],Len - datalen);	   
    188          								resflg = 1;
   \                     ??CarddataOperate_5: (+1)
   \   0000015A   0x2001             MOVS     R0,#+1
   \   0000015C   0x0006             MOVS     R6,R0
    189          							  break;   
   \   0000015E   0xE075             B.N      ??CarddataOperate_18
    190          			case TIME_CARD:   
    191          //							  printfcom0("\r\n TIME_CARD ");
    192          							  
    193          							  memcpy((unsigned char *)&sTime,&buf[datalen],sizeof(sTime));
   \                     ??CarddataOperate_6: (+1)
   \   00000160   0xF05F 0x0808      MOVS     R8,#+8
   \   00000164   0xEB17 0x0904      ADDS     R9,R7,R4
   \   00000168   0xF10D 0x0A18      ADD      R10,SP,#+24
   \   0000016C   0x4642             MOV      R2,R8
   \   0000016E   0x4649             MOV      R1,R9
   \   00000170   0x4650             MOV      R0,R10
   \   00000172   0x.... 0x....      BL       __aeabi_memcpy
    194          							  
    195          //							  printfcom0("\r\n Ê±¼ä£º%d-%d-%d %d-%d-%d",sTime.Year,sTime.Month,sTime.Date,sTime.Hour,sTime.Min,sTime.Sec);
    196          							  
    197          							  WriteTime(sTime);
   \   00000176   0xE9DD 0x0106      LDRD     R0,R1,[SP, #+24]
   \   0000017A   0x.... 0x....      BL       WriteTime
    198          							  break; 
   \   0000017E   0xE065             B.N      ??CarddataOperate_18
    199          			case HIGHT_CARD:  
    200          //							  printfcom0("\r\n HIGHT_CARD ");
    201          							  
    202          							  memcpy((unsigned char *)&hig,&buf[datalen],sizeof(hig));
   \                     ??CarddataOperate_7: (+1)
   \   00000180   0xF05F 0x0802      MOVS     R8,#+2
   \   00000184   0xEB17 0x0904      ADDS     R9,R7,R4
   \   00000188   0xF10D 0x0A04      ADD      R10,SP,#+4
   \   0000018C   0x4642             MOV      R2,R8
   \   0000018E   0x4649             MOV      R1,R9
   \   00000190   0x4650             MOV      R0,R10
   \   00000192   0x.... 0x....      BL       __aeabi_memcpy
    203          
    204          //							  printfcom0("\r\n ¸ß¶È£º%d",hig);
    205          							  
    206          //							  SetHight(hig);
    207          							  break; 
   \   00000196   0xE059             B.N      ??CarddataOperate_18
    208          			case COPY_CARD:  	
    209          							  printfcom0("\r\n COPY_CARD ");
   \                     ??CarddataOperate_8: (+1)
   \   00000198   0x....             LDR.N    R0,??DataTable6_9
   \   0000019A   0x.... 0x....      BL       printfcom0
    210          							  							  
    211          						      break; 
   \   0000019E   0xE055             B.N      ??CarddataOperate_18
    212          			case MODEL_SELECT_CARD:
    213          //							  printfcom0("\r\n MODEL_SELECT_CARD "); 
    214          							  
    215          							  memcpy((unsigned char *)&modelnum,&buf[datalen],sizeof(modelnum));
   \                     ??CarddataOperate_9: (+1)
   \   000001A0   0xF05F 0x0801      MOVS     R8,#+1
   \   000001A4   0xEB17 0x0904      ADDS     R9,R7,R4
   \   000001A8   0xF10D 0x0A06      ADD      R10,SP,#+6
   \   000001AC   0x4642             MOV      R2,R8
   \   000001AE   0x4649             MOV      R1,R9
   \   000001B0   0x4650             MOV      R0,R10
   \   000001B2   0x.... 0x....      BL       __aeabi_memcpy
    216          
    217          //							  printfcom0("\r\n Ñ¡Ä££º%d",modelnum);
    218          
    219          //							  SetSel(modelnum);
    220          							  break; 
   \   000001B6   0xE049             B.N      ??CarddataOperate_18
    221          			case FIX_CARD:  
    222          //							  printfcom0("\r\n FIX_CARD ");
    223          
    224          							  memcpy((unsigned char *)&locotype,&buf[datalen],sizeof(locotype));
   \                     ??CarddataOperate_10: (+1)
   \   000001B8   0xF05F 0x0802      MOVS     R8,#+2
   \   000001BC   0x1938             ADDS     R0,R7,R4
   \   000001BE   0x9000             STR      R0,[SP, #+0]
   \   000001C0   0xF10D 0x090A      ADD      R9,SP,#+10
   \   000001C4   0x4642             MOV      R2,R8
   \   000001C6   0x9900             LDR      R1,[SP, #+0]
   \   000001C8   0x4648             MOV      R0,R9
   \   000001CA   0x.... 0x....      BL       __aeabi_memcpy
    225          							  datalen += sizeof(locotype);
   \   000001CE   0x1CBF             ADDS     R7,R7,#+2
    226          							 
    227          							  memcpy((unsigned char *)&loconum,&buf[datalen],sizeof(loconum));
   \   000001D0   0xF05F 0x0902      MOVS     R9,#+2
   \   000001D4   0xEB17 0x0A04      ADDS     R10,R7,R4
   \   000001D8   0xF10D 0x0B0C      ADD      R11,SP,#+12
   \   000001DC   0x464A             MOV      R2,R9
   \   000001DE   0x4651             MOV      R1,R10
   \   000001E0   0x4658             MOV      R0,R11
   \   000001E2   0x.... 0x....      BL       __aeabi_memcpy
    228          							  
    229          //							  printfcom0("\r\n »ú³µÀàÐÍ£º%d£¬»ú³µ±àºÅ£º%d",locotype,loconum);
    230          							  
    231          //							  SetFix(locotype,loconum);
    232          				     		  break; 
   \   000001E6   0xE031             B.N      ??CarddataOperate_18
    233          			case COPY_FRAM_CARD:  
    234          							  printfcom0("\r\n COPY_FRAM_CARD "); 
   \                     ??CarddataOperate_11: (+1)
   \   000001E8   0x....             LDR.N    R0,??DataTable6_10
   \   000001EA   0x.... 0x....      BL       printfcom0
    235          							  break; 
   \   000001EE   0xE02D             B.N      ??CarddataOperate_18
    236                                              
    237          //			case EXPAND_CARD:  	
    238          //							  printfcom0("\r\n EXPAND_CARD "); 
    239          //							  break; 
    240          			case SYS_RUN_PARA:  	
    241          							  //printfcom0("\r\n ½ÓÊÕÔËÐÐ²ÎÊý "); 
    242          							  memcpy((unsigned char *)&sSysRunPara,&buf[datalen],sizeof(sSysRunPara));
   \                     ??CarddataOperate_14: (+1)
   \   000001F0   0xF05F 0x0806      MOVS     R8,#+6
   \   000001F4   0xEB17 0x0904      ADDS     R9,R7,R4
   \   000001F8   0xF10D 0x0A10      ADD      R10,SP,#+16
   \   000001FC   0x4642             MOV      R2,R8
   \   000001FE   0x4649             MOV      R1,R9
   \   00000200   0x4650             MOV      R0,R10
   \   00000202   0x.... 0x....      BL       __aeabi_memcpy
    243          							  datalen += sizeof(sSysRunPara);
   \   00000206   0x1DBF             ADDS     R7,R7,#+6
    244          							  DisplaySet(250,1,"F.%2d T.%2d",sSysRunPara.PrintfFlg,sSysRunPara.StoreTime);
   \   00000208   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000020C   0x9000             STR      R0,[SP, #+0]
   \   0000020E   0xF89D 0x3011      LDRB     R3,[SP, #+17]
   \   00000212   0x....             LDR.N    R2,??DataTable6_11
   \   00000214   0x2101             MOVS     R1,#+1
   \   00000216   0x20FA             MOVS     R0,#+250
   \   00000218   0x.... 0x....      BL       DisplaySet
    245          //							  StoreSysRunPara(sSysRunPara);
    246          							  break; 
   \   0000021C   0xE016             B.N      ??CarddataOperate_18
    247          			case CLEAR_ALL:  	
    248          							  printfcom0("\r\n ÇåÁã"); 
   \                     ??CarddataOperate_15: (+1)
   \   0000021E   0x....             LDR.N    R0,??DataTable6_12
   \   00000220   0x.... 0x....      BL       printfcom0
    249          							  DisplaySet(250,1,"C_ALL");
   \   00000224   0x....             LDR.N    R2,??DataTable6_13
   \   00000226   0x2101             MOVS     R1,#+1
   \   00000228   0x20FA             MOVS     R0,#+250
   \   0000022A   0x.... 0x....      BL       DisplaySet
    250          							  g_CurFlshRecNum 	= 0;
   \   0000022E   0x2000             MOVS     R0,#+0
   \   00000230   0x....             LDR.N    R1,??DataTable6_14
   \   00000232   0x6008             STR      R0,[R1, #+0]
    251          							  g_LshRedFlshRecNum  = 0;
   \   00000234   0x2000             MOVS     R0,#+0
   \   00000236   0x....             LDR.N    R1,??DataTable6_15
   \   00000238   0x6008             STR      R0,[R1, #+0]
    252          							  g_LshRedFlshRecNum_gprs  = 0;
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x....             LDR.N    R1,??DataTable6_16
   \   0000023E   0x6008             STR      R0,[R1, #+0]
    253          
    254          //								StoreCurFlshRecNum(g_CurFlshRecNum);
    255          //								StoreLstRedFlshRecNum(g_LshRedFlshRecNum);
    256          //								StoreLstRedFlshRecNum_gprs(g_LshRedFlshRecNum);
    257          							  break;
   \   00000240   0xE004             B.N      ??CarddataOperate_18
    258          
    259          			case RST_SYS: 
    260          								l_eqiupmentcode = 0;
   \                     ??CarddataOperate_16: (+1)
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x....             LDR.N    R1,??DataTable6_4
   \   00000246   0x6008             STR      R0,[R1, #+0]
    261          								ResetSys();	//ÖØÆô
   \   00000248   0x.... 0x....      BL       ResetSys
    262          								//while(1);  
    263          								break;
    264          
    265          			default: ;
    266          //				   printfcom0("\r\n default "); 
    267          		}
    268          		
    269          		l_eqiupmentcode = 0;
   \                     ??CarddataOperate_18: (+1)
   \   0000024C   0x2000             MOVS     R0,#+0
   \   0000024E   0x....             LDR.N    R1,??DataTable6_4
   \   00000250   0x6008             STR      R0,[R1, #+0]
    270          
    271          		if(resflg ==1)
   \   00000252   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000254   0x2E01             CMP      R6,#+1
   \   00000256   0xD102             BNE.N    ??CarddataOperate_2
    272          		{
    273          			ReCalPara(1);
   \   00000258   0x2001             MOVS     R0,#+1
   \   0000025A   0x.... 0x....      BL       ReCalPara
    274          		}
    275          	}
    276          }
   \                     ??CarddataOperate_2: (+1)
   \                     ??CarddataOperate_0: (+1)
   \   0000025E   0xB009             ADD      SP,SP,#+36
   \   00000260   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    277          
    278          typedef	struct	
    279          {
    280          	uint8	commnum;
    281          	uint8	addr;
    282          }stcequipmentcomm;
    283          

   \                                 In section .bss, align 4
    284          stcequipmentcomm	l_sequipmentcomm;
   \                     l_sequipmentcomm:
   \   00000000                      DS8 4
    285          

   \                                 In section .text, align 2, keep-with-next
    286          uint8	GetGprsCommNum(void)
    287          {
    288          	if(l_sequipmentcomm.addr == 0xca)
   \                     GetGprsCommNum: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_17
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x28CA             CMP      R0,#+202
   \   00000006   0xD102             BNE.N    ??GetGprsCommNum_0
    289          		return	l_sequipmentcomm.commnum;
   \   00000008   0x....             LDR.N    R0,??DataTable6_17
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0xE000             B.N      ??GetGprsCommNum_1
    290          	return 0;
   \                     ??GetGprsCommNum_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??GetGprsCommNum_1: (+1)
   \   00000010   0x4770             BX       LR               ;; return
    291          }
    292          
    293          //
    294          //void  CSNR_RecDeal(void)     									//Ö÷»ú
    295          //{
    296          //	static	unsigned char		RecBuf[256] = {0};						//½ÓÊÕ»º³åÇø
    297          //	static	unsigned char		DataBuf[256] = {0};						//
    298          //
    299          //	unsigned char		RecLen;		
    300          //	unsigned char		DataLen = 16;
    301          //	uint8				comflg = 0;	
    302          //	static	uint32		com2time = 0,com3time = 0;	
    303          //	static	uint8		com2errtimes =0,com3errtimes=0;
    304          //	static	uint32		errtime1 = 0,errtime2 = 0;
    305          //	static  stcCsnrProtocolPara 	recdsprotocolpara;	
    306          //	uint8		i;
    307          //	uint8		commnum = 0;
    308          //	uint8		recflg;
    309          //					
    310          //	if( 
    311          //			(GetFramRecEndFlgCom2() == 1	|| GetFramRecEndFlgCom3() == 1 )
    312          ////		 && sentendflg == 1         //debuggprs
    313          //		 )				//ÓÐÐÂµÄÖ¡Î²£¬½øÐÐÊý¾Ý´¦Àí
    314          //	{
    315          //		
    316          //		sentendflg = 0; 
    317          //		RecLen  = 0;
    318          //		if(GetFramRecEndFlgCom2() == 1)
    319          //		{
    320          ////			l_led1com2flg = COM_LED_REC;
    321          //			com2errtimes = 0;
    322          //			comflg = 0;
    323          //			com2time = GetSysTime();
    324          //			RecLen 	= ReadRs485DataCom2(RecBuf);
    325          //			commnum = 2;
    326          //		}
    327          //		if(GetFramRecEndFlgCom3() == 1)		
    328          //		{
    329          ////			l_led2com3flg = COM_LED_REC;
    330          //			com3errtimes = 0; 
    331          //			comflg = 1;
    332          //			com3time = GetSysTime();
    333          //			RecLen 	= ReadRs485DataCom3(RecBuf);
    334          //			commnum = 3;
    335          //		}
    336          //																	//·¢ËÍÖ¸Áîºó£¬µÈ´ý½ÓÊÕ
    337          //																			
    338          //		ClearFramRecEndFlgCom3();									//Çå±êÖ¾£¬¿ÉÖØÐÂÈ¡Êý
    339          //		ClearFramRecEndFlgCom2();		
    340          //
    341          //		if(RecLen < 10)
    342          //		{
    343          //			printfcom2("\r\n RecLen <10 \r\n");
    344          //			return;
    345          //		}
    346          //
    347          ////		l_befaddr = CSNR_GetData(RecBuf,RecLen,DataBuf,(unsigned char*)&DataLen); 
    348          //
    349          ////	
    350          //		recdsprotocolpara.databuf = DataBuf;
    351          //		recflg = DataUnpack_CSNR((stcCsnrProtocolPara *)&recdsprotocolpara,RecBuf,RecLen);
    352          //		
    353          ////×öÊý¾Ý×ª·¢;ÈçÊý¾Ý½ÓÊÕÊ§°Ü£¬´Ó´®¿Ú1·¢³ö
    354          //		if(recflg == 0)
    355          //		{
    356          //			SendCOM1(RecBuf,RecLen);
    357          //		}
    358          ////////////////////////////////////////
    359          //		
    360          //		l_befaddr = recdsprotocolpara.sourceaddr;
    361          //		
    362          //		printfcom0("\r\n\r\n l_befaddr %x,%d",l_befaddr,recdsprotocolpara.datalen);				
    363          //		switch(l_befaddr)
    364          //		{
    365          //			case 0xCA: 
    366          //
    367          ////						CarddataOperate(recdsprotocolpara.databuf,recdsprotocolpara.datalen); 			//¶Á¿¨Æ÷¶Ô½ÓÊÕµÄÐÅÏ¢½øÐÐ´¦Àí
    368          //						printfcom0("\r\n\r\n GPRS´¦Àí£¡%d",recdsprotocolpara.framnum);				//ÎÞÏßÄ£¿é
    369          //						GprsRecOperate( recdsprotocolpara);
    370          //						l_sequipmentcomm.addr 		= 0xca;
    371          //						l_sequipmentcomm.commnum 	= commnum;
    372          //                        l_recFlg = 2;
    373          //
    374          //				
    375          //				break;
    376          //				
    377          //			case 0xC1: 
    378          //  					 printfcom0("\r\n IC´¦Àí£¡");				//ÎÞÏßÄ£¿é
    379          //					   //CarddataOperate(DataBuf,DataLen); 			//¶Á¿¨Æ÷¶Ô½ÓÊÕµÄÐÅÏ¢½øÐÐ´¦Àí 
    380          //						CarddataOperate(recdsprotocolpara.databuf,recdsprotocolpara.datalen); 			//¶Á¿¨Æ÷¶Ô½ÓÊÕµÄÐÅÏ¢½øÐÐ´¦Àí
    381          //						l_recFlg = 1;
    382          //						//l_equipmentaddr1 = 0xC1;
    383          //				break;
    384          //				
    385          //			case 0xC2: 
    386          //						CarddataOperate(recdsprotocolpara.databuf,recdsprotocolpara.datalen); 			//¶Á¿¨Æ÷¶Ô½ÓÊÕµÄÐÅÏ¢½øÐÐ´¦Àí
    387          //						//l_equipmentaddr2 = 0xC2;
    388          //                        l_recFlg = 3;
    389          //
    390          //				break;
    391          //				
    392          //			case 0xC3: 
    393          //						printfcom0("\r\n ÖÇÄÜµçÁ¿´¦Àí£¡");			//ÖÇÄÜµçÁ¿
    394          //				
    395          //				break;	
    396          //				
    397          //			default: ;
    398          //																	//´íÎóÐÅÏ¢
    399          //		}
    400          //
    401          //		if((l_befaddr &0xC0) == 0xC0)
    402          //		{
    403          ////			printfcom0("\r\n comflg  %d,l_befaddr %d ",comflg,l_befaddr);
    404          //			if(comflg == 0)
    405          //			{
    406          //				l_led1com2flg = COM_LED_DATA; 			
    407          //			}
    408          //			else 
    409          //			{
    410          //				l_led2com3flg = COM_LED_DATA;	
    411          //			}
    412          //		}
    413          //	}
    414          //	else
    415          //	{
    416          //		if(GetSysTime() - com2time > 100)
    417          //		{
    418          //			if(GetSysTime() - errtime1 > 100 )
    419          //			{
    420          //				com2errtimes++;
    421          //			    errtime1	= GetSysTime();
    422          //			}
    423          //			
    424          //			if(	 com2errtimes > 2)
    425          //			{
    426          //				l_led1com2flg = 0;	
    427          //			}
    428          //		}
    429          //
    430          //		if(GetSysTime() - com3time > 100)
    431          //		{
    432          //			if(GetSysTime() - errtime2 > 100 )
    433          //			{
    434          //				com3errtimes++;
    435          //			    errtime2	= GetSysTime();
    436          //			}
    437          //
    438          //			if( com3errtimes > 2)
    439          //			{
    440          //				//printfcom0("\r\n l_led2com3flg %d",l_led2com3flg);
    441          //				l_led2com3flg = 0;	
    442          //			}
    443          //		}
    444          //	}
    445          //}
    446          
    447          

   \                                 In section .text, align 2, keep-with-next
    448          unsigned int GetHostBuf(unsigned char *Buf)
    449          {
   \                     GetHostBuf: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    450          //	memcpy(Buf,(unsigned char *)&g_cardsta,sizeof(g_cardsta));
    451          //	printfcom0("len %d,g_cardsta %d",sizeof(g_cardsta),g_cardsta); 
    452          //	return 	sizeof(g_cardsta);
    453          	return	0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    454          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     l_befaddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     l_recFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     l_senddatacomflg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     l_readdatadisplaytime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     l_eqiupmentcode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     l_senddatastartnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     l_senddataendnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     g_CurFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum_gprs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     l_sequipmentcomm

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012 ReadCardDisplay"
   \              0x0D 0x0A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x43    
   \              0x61 0x72    
   \              0x64 0x44    
   \              0x69 0x73    
   \              0x70 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0D 0x0A          DC8 "\015\012 IndicateWriteCardFinsh"
   \              0x20 0x49    
   \              0x6E 0x64    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x57    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x43 0x61    
   \              0x72 0x64    
   \              0x46 0x69    
   \              0x6E 0x73    
   \              0x68 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0D 0x0A          DC8 "\015\012 COPY_CARD "
   \              0x20 0x43    
   \              0x4F 0x50    
   \              0x59 0x5F    
   \              0x43 0x41    
   \              0x52 0x44    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0D 0x0A          DC8 "\015\012 COPY_FRAM_CARD "
   \              0x20 0x43    
   \              0x4F 0x50    
   \              0x59 0x5F    
   \              0x46 0x52    
   \              0x41 0x4D    
   \              0x5F 0x43    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x46 0x2E          DC8 "F.%2d T.%2d"
   \              0x25 0x32    
   \              0x64 0x20    
   \              0x54 0x2E    
   \              0x25 0x32    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \307\345\301\343"
   \              0x20 0xC7    
   \              0xE5 0xC1    
   \              0xE3 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x43 0x5F          DC8 "C_ALL"
   \              0x41 0x4C    
   \              0x4C 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
    455          
    456          //void	HostStationSend_CSNR(void)
    457          //{
    458          //	unsigned char HostBuf[64];
    459          //	unsigned int  Len;
    460          //	unsigned char addr;
    461          //	
    462          //	Len = GetHostBuf(HostBuf);
    463          //	
    464          //	addr = 0xCF;
    465          //	
    466          //	DataSend_CSNR(0x80,addr,HostBuf,Len);	
    467          //
    468          //}
    469          //
    470          //void HostScan(void)
    471          //{
    472          //	static	unsigned char 	tmp = 0;
    473          //	static	unsigned int 		time = 0;
    474          ////	static	unsigned int	rectimes
    475          //	unsigned char 		 	ScanAddrList[2]={0xC1,0xC2};
    476          //	uint8		hostbuf[64];
    477          //	uint32	    len;
    478          //	uint8		modelnum;
    479          //	uint16	    dip;
    480          //	uint16	    myspeed1,myspeed2,mycsspeed;
    481          //	int16		hig1,hig2;
    482          //	uint8		locosta;
    483          ////	unsigned char 		 	ScanAddrList[9]={0xCA,0xCA,0xCA,0xCA,0xCA,0xCA,0xCA,0xCA,0xCA};
    484          //
    485          //	len = 0;
    486          ////	if(
    487          //////						(GetSysTime() - time) > 100 
    488          //////				||    
    489          ////                  (GetRecFlg()  )
    490          ////		)
    491          //	{
    492          //		memcpy(&hostbuf[len],(unsigned char *)&l_befaddr,sizeof(l_befaddr))	;
    493          //		len += sizeof(l_befaddr);
    494          //		
    495          //		modelnum = GetOilBoxCod();
    496          //		memcpy(&hostbuf[len],(unsigned char *)&modelnum,sizeof(modelnum))	;
    497          //		len += sizeof(modelnum);
    498          //		
    499          //		dip = g_DipVal;
    500          //		memcpy(&hostbuf[len],(unsigned char *)&dip,sizeof(dip));
    501          //		len += sizeof(dip);
    502          //
    503          //		memcpy(&hostbuf[len],(unsigned char *)&g_CurFlshRecNum,sizeof(g_CurFlshRecNum))	;
    504          //		len += sizeof(g_CurFlshRecNum);		
    505          //		
    506          //		//¸ß¶È1
    507          //		myspeed1    = GetMySpeed1();
    508          //		myspeed2    = GetMySpeed2();
    509          //		mycsspeed   = GetMyEngRotSpd();
    510          //		hig1        = GetDip1Hig();
    511          //		hig2        = GetDip2Hig();	
    512          //		locosta	    = GetMyLocoWorkState();
    513          //	  
    514          //		memcpy(&hostbuf[len],(unsigned char *)&myspeed1,sizeof(myspeed1))	;
    515          //		len += sizeof(myspeed1);		
    516          //		
    517          //		memcpy(&hostbuf[len],(unsigned char *)&myspeed2,sizeof(myspeed2))	;
    518          //		len += sizeof(myspeed2);	
    519          //
    520          //		memcpy(&hostbuf[len],(unsigned char *)&mycsspeed,sizeof(mycsspeed))	;
    521          //		len += sizeof(mycsspeed);	
    522          //
    523          //		memcpy(&hostbuf[len],(unsigned char *)&hig1,sizeof(hig1))	;
    524          //		len += sizeof(hig1);	
    525          //		
    526          //		memcpy(&hostbuf[len],(unsigned char *)&hig2,sizeof(hig2))	;
    527          //		len += sizeof(hig2);	
    528          //		
    529          //		memcpy(&hostbuf[len],(unsigned char *)&locosta,sizeof(locosta))	;
    530          //		len += sizeof(locosta);	
    531          //		//if(GetRecAddr())				
    532          //		
    533          //        //DataSend_CSNR(0x80,ScanAddrList[tmp%2],hostbuf,len);
    534          //		
    535          //        sentendflg =1;
    536          //		//printfcom0("\r\n l_befaddr %d,%d,%d,%d",l_befaddr,modelnum,dip,g_CurFlshRecNum);
    537          //		tmp++;
    538          //		sentendflg  = 1;
    539          //		l_recFlg    = 0; 
    540          //		//time 	    = GetSysTime(); 
    541          //	}
    542          //}
    543          //
    544          //void  EquipmentComTask(void)   
    545          //{
    546          //	static	 unsigned int   time;
    547          //
    548          //	if(GetSendDataComFlg() == 1)     //readdata
    549          //	{		
    550          //		if(ComSendData(l_senddatastartnum,l_senddataendnum))
    551          //		{
    552          //			l_senddatastartnum++;
    553          //			return;
    554          //		}
    555          //		else
    556          //		{
    557          //			ClearSendDataComFlg();
    558          //		}
    559          //	}
    560          //
    561          //	if(GetModelCardFlg() == 0) 	  	
    562          //	{
    563          //	 	HostScan();					
    564          //		
    565          //		GprsDataComDeal();  //²¹³ä£Ç£Ð£Ò£Ó´¦Àí
    566          //		
    567          //		time = GetSysTime(); 
    568          //
    569          //		CSNR_RecDeal();
    570          //	}
    571          //	else
    572          //	{
    573          //		while(GetModelCardFlg() == 1)  //set model
    574          //		{
    575          //			sentendflg = 1;
    576          //			if(GetSysTime() - time > 10*100 )    //Ä£ÐÍ¿¨ÍË³ö
    577          //			{
    578          ////				ClearModelCardFlg();
    579          //			}
    580          //
    581          //			CSNR_RecDeal();
    582          //
    583          //			CirculatesTask();
    584          //		}
    585          //	}
    586          //}
    587          
    588          
    589          
    590          
    591          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   CarddataOperate
        72   -> ClaerDisplaySetWithoutStore
        72   -> DisplaySet
        72   -> GetSysTime
        72   -> ReCalPara
        72   -> ResetSys
        72   -> WriteTime
        72   -> __aeabi_memcpy
        72   -> printfcom0
       0   ClearSendDataComFlg
       0   GetGprsCommNum
       0   GetHostBuf
       0   GetReadDataDisplayTime
       0   GetRecFlg
       0   GetRecaddr
       0   GetSendDataComFlg
       8   ReadRs485DataCom2
         8   -> ReadCOM2
       8   ReadRs485DataCom3
         8   -> ReadCOM3


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      24  ?_0
      28  ?_1
      16  ?_2
      20  ?_3
      12  ?_4
       8  ?_5
       8  ?_6
     612  CarddataOperate
       8  ClearSendDataComFlg
      18  GetGprsCommNum
       6  GetHostBuf
       6  GetReadDataDisplayTime
       6  GetRecFlg
       6  GetRecaddr
       6  GetSendDataComFlg
      18  ReadRs485DataCom2
      18  ReadRs485DataCom3
       1  l_befaddr
       4  l_eqiupmentcode
       1  l_led1com2flg
       1  l_led2com3flg
       4  l_readdatadisplaytime
       1  l_recFlg
       1  l_senddatacomflg
       4  l_senddataendnum
       4  l_senddatastartnum
       4  l_sequipmentcomm
       1  sentendflg

 
  26 bytes in section .bss
 116 bytes in section .rodata
 776 bytes in section .text
 
 776 bytes of CODE  memory
 116 bytes of CONST memory
  26 bytes of DATA  memory

Errors: none
Warnings: none
