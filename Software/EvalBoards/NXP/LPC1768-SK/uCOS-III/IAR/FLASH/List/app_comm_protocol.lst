###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       18/Dec/2017  15:16:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC卡模块\Software\APP\Protocol\app_comm_protocol.c
#    Command line =  
#        "F:\iar\NC136B-320 IC卡模块\Software\APP\Protocol\app_comm_protocol.c"
#        -lCN "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app_comm_protocol.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app_comm_protocol.o
#
###############################################################################

F:\iar\NC136B-320 IC卡模块\Software\APP\Protocol\app_comm_protocol.c
      1          /*******************************************************************************
      2          *   Filename:       app_lib.c
      3          *   Revised:        All copyrights reserved to Wuming Shen.
      4          *   Date:           2014-07-05
      5          *   Revision:       v1.0
      6          *   Writer:	     Wuming Shen.
      7          *
      8          *   Description:    双击选中 wdt 按 Ctrl + H, 钩选 Match the case, Replace with
      9          *                   输入您要的名字，点击 Replace All
     10          *                   双击选中 Wdt 按 Ctrl + H, 钩选 Match the case, Replace with
     11          *                   输入您要的名字，点击 Replace All
     12          *                   双击选中 WDT 按 Ctrl + H, 钩选 Match the case, Replace with
     13          *                   输入您要的名字，点击 Replace All
     14          *                   在 app_cfg.h 中指定任务的优先级 和 任务堆栈大小
     15          *
     16          *   Notes:
     17          *					QQ:276193028
     18          *     				E-mail:shenchangwei945@163.com
     19          *
     20          *******************************************************************************/
     21          
     22          /*******************************************************************************
     23          * INCLUDES
     24          */
     25          #define  SNL_APP_SOURCE
     26          #include <app.h>
     27          #include <CrcCheck.h>
     28          #include <BSP_OS.h>
     29          
     30          //#include <bsp_usart.h>
     31          
     32          #define BSP_COMM_PROTOCOL_MODULE_EN 1
     33          #if BSP_COMM_PROTOCOL_MODULE_EN > 0
     34          
     35          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     36          const  CPU_CHAR  *app_comm_protocol__c = "$Id: $";
     37          #endif
     38          
     39          /*******************************************************************************
     40          * CONSTANTS
     41          */
     42          #define         FRAM_HERD0     		0x10         	//报文头
     43          #define         FRAM_HERD1     		0x28       		//报文头				
     44          #define     	HOST_ID      		10				//上位机地址	  		   
     45          #define   		DEVICE_ID0      	15				//本机地址0	
     46          #define   		DEVICE_ID1      	15				//本机地址1	
     47          
     48          #define			RS485_CHK_SUM		0x02			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     49          #define			RS485_CHK_CRC		0x01			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     50          #define			RS485_CHK_RESUM		0x03			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     51          
     52          #define         FRAM_END0     		0x10         	//报文尾
     53          #define         FRAM_END1     		0x2C       		//报文尾	
     54          
     55          /*******************************************************************************
     56          * MACROS
     57          */
     58          
     59          /*******************************************************************************
     60          * TYPEDEFS
     61          */
     62          
     63          /*******************************************************************************
     64          * LOCAL VARIABLES
     65          */
     66          
     67          /*******************************************************************************
     68          * GLOBAL VARIABLES
     69          */
     70          
     71          /*******************************************************************************
     72          * LOCAL FUNCTIONS
     73          */
     74          
     75          /*******************************************************************************
     76          * GLOBAL FUNCTIONS
     77          */
     78          
     79          /*******************************************************************************
     80          * EXTERN VARIABLES
     81          */
     82          
     83          /*******************************************************************************
     84          * EXTERN FUNCTIONS
     85          */
     86          

   \                                 In section .bss, align 1
     87          static unsigned char   l_recslaveaddr = 0;
   \                     l_recslaveaddr:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     88          static unsigned char   l_RecvFrameNbr = 0;
   \                     l_RecvFrameNbr:
   \   00000000                      DS8 1
     89          /***********************************************
     90          * 描述： 
     91          */

   \                                 In section .text, align 2, keep-with-next
     92          unsigned char GetRecSlaveAddr(void)
     93          {
     94          	return	l_recslaveaddr;
   \                     GetRecSlaveAddr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     95          }
     96          /***********************************************
     97          * 描述：接收序号 
     98          */

   \                                 In section .text, align 2, keep-with-next
     99          unsigned char GetRecvFrameNbr(void)
    100          {
    101          	return	l_RecvFrameNbr;
   \                     GetRecvFrameNbr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    102          }
    103          
    104          //static uint8	RecvFrameNbr = 0;
    105          ///***********************************************
    106          //* 描述： 
    107          //*/
    108          //uint8	GetRecvFrameNbr(void)
    109          //{
    110          //	return 	RecvFrameNbr;
    111          //}
    112          

   \                                 In section .bss, align 4
    113          static  OS_SEM			Bsp_Fram_Sem;    	//信号量
   \                     Bsp_Fram_Sem:
   \   00000000                      DS8 40
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void    OS_ProtocolInit(void)
    116          {
   \                     OS_ProtocolInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    117              BSP_OS_SemCreate(&Bsp_Fram_Sem, 1, "Protocol Sem");
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000000C   0x.... 0x....      BL       BSP_OS_SemCreate
    118          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    119          
    120          
    121          /***********************************************
    122          * 描述： 
    123          */

   \                                 In section .text, align 2, keep-with-next
    124          void	SetRecvFrameNbr(void)
    125          {
    126          	l_RecvFrameNbr++;		
   \                     SetRecvFrameNbr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    127          }
   \   0000000E   0x4770             BX       LR               ;; return
    128          
    129          /*******************************************************************************
    130          * 名    称： GetCheckSumNR
    131          * 功    能： 
    132          * 入口参数： 无
    133          * 出口参数： 无
    134          * 作　 　者： wumingshen.
    135          * 创建日期： 2015-12-07
    136          * 修    改：
    137          * 修改日期：
    138          * 备    注：
    139          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    140          static uint8 GetCheckSumNR(uint8  Buf[], uint32 Len)
    141          {
   \                     GetCheckSumNR: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
    142              int32  i;
    143              int8   CheckSum = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    144              
    145              for(i = 0;i < Len; i++) {
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x0023             MOVS     R3,R4
   \                     ??GetCheckSumNR_0: (+1)
   \   0000000A   0x428B             CMP      R3,R1
   \   0000000C   0xD203             BCS.N    ??GetCheckSumNR_1
    146                  CheckSum += Buf[i];                         //求和
   \   0000000E   0x569C             LDRSB    R4,[R3, R2]
   \   00000010   0x1820             ADDS     R0,R4,R0
    147              }
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
   \   00000014   0xE7F9             B.N      ??GetCheckSumNR_0
    148              
    149              if((unsigned char)CheckSum >= 0x80) {
   \                     ??GetCheckSumNR_1: (+1)
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C80             CMP      R4,#+128
   \   0000001C   0xDB02             BLT.N    ??GetCheckSumNR_2
    150              	CheckSum = ~CheckSum + 1 +0x80;             //取反+1
   \   0000001E   0x43C0             MVNS     R0,R0
   \   00000020   0x387F             SUBS     R0,R0,#+127
   \   00000022   0xE7FF             B.N      ??GetCheckSumNR_3
    151              } else {
    152              	CheckSum = CheckSum;                       	//取反+1
    153              }
    154              return  CheckSum;
   \                     ??GetCheckSumNR_2: (+1)
   \                     ??GetCheckSumNR_3: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
    155          }
    156          
    157          /*******************************************************************************
    158          * 名    称： CSNC_GetData
    159          * 功    能： 
    160          * 入口参数： 无
    161          * 出口参数： 无
    162          * 作　 　者： wumingshen.
    163          * 创建日期： 2015-12-07
    164          * 修    改：
    165          * 修改日期：
    166          * 备    注：
    167          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    168          unsigned char  CSNC_GetData(	INT08U *RecBuf,
    169                                      INT16U	RecLen,
    170                                      INT08U *Datapos,
    171                                      INT16U *InfoLen)
    172          {
   \                     CSNC_GetData: (+1)
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x001E             MOVS     R6,R3
    173              unsigned short		i,j,k;
    174              unsigned char		    SumCheck8;
    175              unsigned char		    Tmp;
    176              unsigned short		RecCRC16,Check16;
    177              
    178          	//unsigned char 		DstAddr;	
    179              unsigned char 		SourceAddr;
    180          	unsigned short		DataLen;  
    181              unsigned char         *pDat         = RecBuf;
   \   0000000C   0x46A3             MOV      R11,R4
    182              
    183              unsigned short        MaxDataLen    = RecLen - 10;
   \   0000000E   0xF1B5 0x000A      SUBS     R0,R5,#+10
   \   00000012   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    184              
    185              if(RecLen < 10)         //长度小于最小长度，直接退出。
   \   00000016   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000018   0x2D0A             CMP      R5,#+10
   \   0000001A   0xDA01             BGE.N    ??CSNC_GetData_0
    186                  return 0;   
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE0BF             B.N      ??CSNC_GetData_1
    187              
    188              *InfoLen            = 0;
   \                     ??CSNC_GetData_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x8030             STRH     R0,[R6, #+0]
    189              //StrCommRecvPack *Rd = (StrCommRecvPack *)DataBuf;
    190              //DataBuf = DataBuf;
    191              /***********************************************
    192              * 描述： 识别帧头
    193              */
    194              for(i = 0; i < MaxDataLen -1; i++)	{		        //循环遍历 (2017 redmorningcn循环中有加1的，运算值需减1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x4680             MOV      R8,R0
   \                     ??CSNC_GetData_2: (+1)
   \   00000028   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0x4580             CMP      R8,R0
   \   00000034   0xDA17             BGE.N    ??CSNC_GetData_3
    195          		if(	( (RecBuf[i + 0] ) == FRAM_HERD0 ) && 
    196                     ( (RecBuf[i + 1] ) == FRAM_HERD1 ) ) {
   \   00000036   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003A   0xF818 0x0004      LDRB     R0,[R8, R4]
   \   0000003E   0x2810             CMP      R0,#+16
   \   00000040   0xD10E             BNE.N    ??CSNC_GetData_4
   \   00000042   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000046   0xEB18 0x0004      ADDS     R0,R8,R4
   \   0000004A   0x7840             LDRB     R0,[R0, #+1]
   \   0000004C   0x2828             CMP      R0,#+40
   \   0000004E   0xD107             BNE.N    ??CSNC_GetData_4
    197                         pDat    = &RecBuf[i];
   \   00000050   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000054   0xEB18 0x0004      ADDS     R0,R8,R4
   \   00000058   0x4683             MOV      R11,R0
    198                         goto next;
    199                     }
    200              }
    201              return 0;
    202          next:
    203              /***********************************************
    204              * 描述： 接收数据去掉帧头识别字0X10的重复部分
    205              */
    206          	for(j = 0;j < RecLen - 1 ;j++ )	{				    //去重复通讯首字节   (2017 redmorningcn循环中有加1的，运算值需减1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x4682             MOV      R10,R0
   \   0000005E   0xE004             B.N      ??CSNC_GetData_5
   \                     ??CSNC_GetData_4: (+1)
   \   00000060   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000064   0xE7E0             B.N      ??CSNC_GetData_2
   \                     ??CSNC_GetData_3: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xE09A             B.N      ??CSNC_GetData_1
   \                     ??CSNC_GetData_5: (+1)
   \   0000006A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x1E68             SUBS     R0,R5,#+1
   \   00000072   0x4582             CMP      R10,R0
   \   00000074   0xDA22             BGE.N    ??CSNC_GetData_6
    207                  if( ( pDat[j]   == FRAM_HERD0 ) &&
    208                     ( pDat[j+1] == FRAM_HERD0 ) ) {
   \   00000076   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000007A   0xF81A 0x000B      LDRB     R0,[R10, R11]
   \   0000007E   0x2810             CMP      R0,#+16
   \   00000080   0xD119             BNE.N    ??CSNC_GetData_7
   \   00000082   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000086   0xEB1A 0x000B      ADDS     R0,R10,R11
   \   0000008A   0x7840             LDRB     R0,[R0, #+1]
   \   0000008C   0x2810             CMP      R0,#+16
   \   0000008E   0xD112             BNE.N    ??CSNC_GetData_7
    209                         for(k = j; k < RecLen; k++) {
   \   00000090   0x46D1             MOV      R9,R10
   \                     ??CSNC_GetData_8: (+1)
   \   00000092   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000096   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000098   0x45A9             CMP      R9,R5
   \   0000009A   0xD20C             BCS.N    ??CSNC_GetData_7
    210                             Tmp      = pDat[k+1];
   \   0000009C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000A0   0xEB19 0x000B      ADDS     R0,R9,R11
   \   000000A4   0x7840             LDRB     R0,[R0, #+1]
   \   000000A6   0x0007             MOVS     R7,R0
    211                             pDat[k]  = Tmp;
   \   000000A8   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000AC   0xF809 0x700B      STRB     R7,[R9, R11]
    212                         }
   \   000000B0   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000B4   0xE7ED             B.N      ??CSNC_GetData_8
    213                     }
    214          	}
   \                     ??CSNC_GetData_7: (+1)
   \   000000B6   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000BA   0xE7D6             B.N      ??CSNC_GetData_5
    215              pDat    += 6;
   \                     ??CSNC_GetData_6: (+1)
   \   000000BC   0xF11B 0x0B06      ADDS     R11,R11,#+6
    216              DataLen  = *pDat;
   \   000000C0   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000C4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    217              // 长度超范围
    218              if ( DataLen > MaxDataLen )
   \   000000C8   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000CC   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xD201             BCS.N    ??CSNC_GetData_9
    219                  return 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xE063             B.N      ??CSNC_GetData_1
    220              
    221              pDat    += DataLen + 4;
   \                     ??CSNC_GetData_9: (+1)
   \   000000D8   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000DC   0xEB10 0x000B      ADDS     R0,R0,R11
   \   000000E0   0xF110 0x0B04      ADDS     R11,R0,#+4
    222              /***********************************************
    223              * 描述： 检查帧尾
    224              */
    225              if( ( pDat[0] 	!= FRAM_END0)	||
    226                 ( pDat[1] 	!= FRAM_END1) ) {
   \   000000E4   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000E8   0x2810             CMP      R0,#+16
   \   000000EA   0xD103             BNE.N    ??CSNC_GetData_10
   \   000000EC   0xF89B 0x0001      LDRB     R0,[R11, #+1]
   \   000000F0   0x282C             CMP      R0,#+44
   \   000000F2   0xD001             BEQ.N    ??CSNC_GetData_11
    227                     return 0;
   \                     ??CSNC_GetData_10: (+1)
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0xE053             B.N      ??CSNC_GetData_1
    228                 }
    229              
    230              pDat            = &RecBuf[i];
   \                     ??CSNC_GetData_11: (+1)
   \   000000F8   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000FC   0xEB18 0x0004      ADDS     R0,R8,R4
   \   00000100   0x4683             MOV      R11,R0
    231              l_recslaveaddr 	= pDat[3];
   \   00000102   0xF89B 0x0003      LDRB     R0,[R11, #+3]
   \   00000106   0x....             LDR.N    R1,??DataTable7
   \   00000108   0x7008             STRB     R0,[R1, #+0]
    232              
    233              //DstAddr         = l_recslaveaddr;
    234              SourceAddr      = pDat[2];
   \   0000010A   0xF89B 0x0002      LDRB     R0,[R11, #+2]
   \   0000010E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    235              
    236              l_RecvFrameNbr  = pDat[4];
   \   00000112   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   00000116   0x....             LDR.N    R1,??DataTable7_1
   \   00000118   0x7008             STRB     R0,[R1, #+0]
    237              *InfoLen 		= DataLen; 
   \   0000011A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000011E   0x8030             STRH     R0,[R6, #+0]
    238              
    239              SumCheck8 		= GetCheckSumNR((unsigned char *)&pDat[2],5);	//索引区校验
   \   00000120   0x2105             MOVS     R1,#+5
   \   00000122   0xF11B 0x0002      ADDS     R0,R11,#+2
   \   00000126   0x.... 0x....      BL       GetCheckSumNR
   \   0000012A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    240              
    241              RecCRC16 		= ((unsigned short)pDat[8+DataLen])
    242                  * 256 + pDat[9+DataLen];	        //校验	
   \   0000012E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000132   0xEB10 0x000B      ADDS     R0,R0,R11
   \   00000136   0x7A00             LDRB     R0,[R0, #+8]
   \   00000138   0xF44F 0x7180      MOV      R1,#+256
   \   0000013C   0xF8BD 0x2000      LDRH     R2,[SP, #+0]
   \   00000140   0xEB12 0x020B      ADDS     R2,R2,R11
   \   00000144   0x7A52             LDRB     R2,[R2, #+9]
   \   00000146   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000014A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    243              
    244              switch(pDat[5]>>4) {							    //校验和算法判断
   \   0000014E   0xF89B 0x0005      LDRB     R0,[R11, #+5]
   \   00000152   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000154   0x0900             LSRS     R0,R0,#+4
   \   00000156   0x2801             CMP      R0,#+1
   \   00000158   0xD004             BEQ.N    ??CSNC_GetData_12
   \   0000015A   0xD30E             BCC.N    ??CSNC_GetData_13
   \   0000015C   0x2803             CMP      R0,#+3
   \   0000015E   0xD00C             BEQ.N    ??CSNC_GetData_14
   \   00000160   0xD20B             BCS.N    ??CSNC_GetData_13
    245                  case	RS485_CHK_SUM:
    246                      break;
   \                     ??CSNC_GetData_15: (+1)
   \   00000162   0xE00A             B.N      ??CSNC_GetData_13
    247                      case	RS485_CHK_CRC:
    248                          Check16 = GetCrc16Check(&pDat[2],6+DataLen);;
   \                     ??CSNC_GetData_12: (+1)
   \   00000164   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000168   0x1D81             ADDS     R1,R0,#+6
   \   0000016A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000016C   0xF11B 0x0002      ADDS     R0,R11,#+2
   \   00000170   0x.... 0x....      BL       GetCrc16Check
   \   00000174   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    249                          break;
   \   00000178   0xE7FF             B.N      ??CSNC_GetData_13
    250                          case	RS485_CHK_RESUM:
    251                              break;
    252              }
    253              
    254              if(	(SumCheck8 == 	pDat[7] ) && 
    255                 (RecCRC16  ==	Check16 ) ) {
   \                     ??CSNC_GetData_14: (+1)
   \                     ??CSNC_GetData_13: (+1)
   \   0000017A   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000017E   0xF89B 0x1007      LDRB     R1,[R11, #+7]
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD10B             BNE.N    ??CSNC_GetData_16
   \   00000186   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000018A   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000018E   0x4288             CMP      R0,R1
   \   00000190   0xD105             BNE.N    ??CSNC_GetData_16
    256                     /***********************************************
    257                     * 描述： 获取帧头
    258                     */
    259                     //memcpy( (INT08U *)&Rd.Head, (INT08U *)&pDat[0], 8 );
    260                     
    261                     /***********************************************
    262                     * 描述： 获取数据
    263                     */       
    264                     //memcpy( (INT08U *)DataBuf,  (INT08U *)&pDat[8], DataLen);					//数据拷贝
    265                     
    266                     
    267                     //DataBuf     = (INT08U *)&pDat[8];
    268                     *Datapos   = 8;
   \   00000192   0x2008             MOVS     R0,#+8
   \   00000194   0x9904             LDR      R1,[SP, #+16]
   \   00000196   0x7008             STRB     R0,[R1, #+0]
    269                     //return		DstAddr;//SourceAddr;
    270                     return  SourceAddr;
   \   00000198   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000019C   0xE000             B.N      ??CSNC_GetData_1
    271                 }
    272              
    273              return	0;
   \                     ??CSNC_GetData_16: (+1)
   \   0000019E   0x2000             MOVS     R0,#+0
   \                     ??CSNC_GetData_1: (+1)
   \   000001A0   0xB005             ADD      SP,SP,#+20
   \   000001A2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    274          }
    275          

   \                                 In section .bss, align 1
    276          static uint8	SendFrameNbr = 0;
   \                     SendFrameNbr:
   \   00000000                      DS8 1
    277          
    278          /***********************************************
    279          * 描述： 
    280          */

   \                                 In section .text, align 2, keep-with-next
    281          uint8	GetSendFrameNbr(void)
    282          {
    283          	return SendFrameNbr;		
   \                     GetSendFrameNbr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_4
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    284          }
    285          
    286          /***********************************************
    287          * 描述： 
    288          */

   \                                 In section .text, align 2, keep-with-next
    289          void	SetSendFrameNbr(void)
    290          {
    291          	SendFrameNbr++;		
   \                     SetSendFrameNbr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_4
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable7_4
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    292          }
   \   0000000A   0x4770             BX       LR               ;; return
    293          

   \                                 In section .bss, align 4
    294          static  unsigned char	SndBuf[250] = {0};
   \                     SndBuf:
   \   00000000                      DS8 252

   \                                 In section .bss, align 4
    295          static  unsigned char	SndBufTmp[250] = {0};
   \                     SndBufTmp:
   \   00000000                      DS8 252
    296          /*******************************************************************************
    297          * 名    称： CSNC_SendData
    298          * 功    能： 
    299          * 入口参数： 无
    300          * 出口参数： 无
    301          * 作  　者： wumingshen.
    302          * 创建日期： 2015-12-07
    303          * 修    改：
    304          * 修改日期：
    305          * 备    注：
    306          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    307          void	CSNC_SendData(	MODBUS_CH *pch,
    308                                INT08U  SourceAddr,
    309                                INT08U  DistAddr,
    310                                INT08U  SendFrameNum,
    311                                INT08U  SendCode,                       
    312                                INT08U *DataBuf,
    313                                INT16U  DataLen)
    314          {
   \                     CSNC_SendData: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0xF8DD 0xB03C      LDR      R11,[SP, #+60]
   \   0000000C   0x9C10             LDR      R4,[SP, #+64]
    315          	unsigned char	    SumCheck8;
    316          	unsigned short	Crc16;
    317          	unsigned short	AddHeadNum;
    318          	unsigned short	i;
    319          	unsigned char	    ByteStation;	
    320              
    321              BSP_OS_SemWait(&Bsp_Fram_Sem,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R0,??DataTable7_3
   \   00000012   0x.... 0x....      BL       BSP_OS_SemWait
    322              
    323          	ByteStation = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4681             MOV      R9,R0
    324          	SndBuf[ByteStation++] = FRAM_HERD0;
   \   0000001A   0x2010             MOVS     R0,#+16
   \   0000001C   0x....             LDR.N    R1,??DataTable7_5
   \   0000001E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000022   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000026   0xF119 0x0901      ADDS     R9,R9,#+1
    325          	SndBuf[ByteStation++] = FRAM_HERD1;
   \   0000002A   0x2028             MOVS     R0,#+40
   \   0000002C   0x....             LDR.N    R1,??DataTable7_5
   \   0000002E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000032   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000036   0xF119 0x0901      ADDS     R9,R9,#+1
    326          	SndBuf[ByteStation++] = SourceAddr;	 
   \   0000003A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000003E   0x....             LDR.N    R1,??DataTable7_5
   \   00000040   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000044   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000048   0xF119 0x0901      ADDS     R9,R9,#+1
    327          	SndBuf[ByteStation++] = DistAddr;				    // 地址
   \   0000004C   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000050   0x....             LDR.N    R1,??DataTable7_5
   \   00000052   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000056   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000005A   0xF119 0x0901      ADDS     R9,R9,#+1
    328          	SndBuf[ByteStation++] = SendFrameNum;               // 发送帧序号
   \   0000005E   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000062   0x....             LDR.N    R1,??DataTable7_5
   \   00000064   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000068   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000006C   0xF119 0x0901      ADDS     R9,R9,#+1
    329              
    330          	SndBuf[ByteStation++] = RS485_CHK_CRC<<4 + SendCode;// 发送控制字	
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xF89D 0x1038      LDRB     R1,[SP, #+56]
   \   00000076   0x1D09             ADDS     R1,R1,#+4
   \   00000078   0x4088             LSLS     R0,R0,R1
   \   0000007A   0x....             LDR.N    R1,??DataTable7_5
   \   0000007C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000080   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000084   0xF119 0x0901      ADDS     R9,R9,#+1
    331          	SndBuf[ByteStation++] = DataLen;
   \   00000088   0x....             LDR.N    R0,??DataTable7_5
   \   0000008A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000008E   0xF809 0x4000      STRB     R4,[R9, R0]
   \   00000092   0xF119 0x0901      ADDS     R9,R9,#+1
    332          	
    333          	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	// 索引区校验
   \   00000096   0x2105             MOVS     R1,#+5
   \   00000098   0x....             LDR.N    R0,??DataTable7_6
   \   0000009A   0x.... 0x....      BL       GetCheckSumNR
   \   0000009E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    334              
    335          	SndBuf[ByteStation++] = SumCheck8;
   \   000000A2   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000000A6   0x....             LDR.N    R1,??DataTable7_5
   \   000000A8   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000AC   0xF809 0x0001      STRB     R0,[R9, R1]
   \   000000B0   0xF119 0x0901      ADDS     R9,R9,#+1
    336              
    337          	memcpy(&SndBuf[8],DataBuf,DataLen);
   \   000000B4   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000B6   0x.... 0x....      LDR.W    R10,??DataTable7_7
   \   000000BA   0x0022             MOVS     R2,R4
   \   000000BC   0x4659             MOV      R1,R11
   \   000000BE   0x4650             MOV      R0,R10
   \   000000C0   0x.... 0x....      BL       __aeabi_memcpy
    338              
    339          	Crc16 = GetCrc16Check(&SndBuf[2],6+DataLen);
   \   000000C4   0x1DA1             ADDS     R1,R4,#+6
   \   000000C6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C8   0x....             LDR.N    R0,??DataTable7_6
   \   000000CA   0x.... 0x....      BL       GetCrc16Check
   \   000000CE   0x0006             MOVS     R6,R0
    340              
    341          	SndBuf[2+6+DataLen+1] = Crc16;
   \   000000D0   0x....             LDR.N    R0,??DataTable7_5
   \   000000D2   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000D4   0x1820             ADDS     R0,R4,R0
   \   000000D6   0x7246             STRB     R6,[R0, #+9]
    342          	SndBuf[2+6+DataLen]   = Crc16>>8;
   \   000000D8   0x0030             MOVS     R0,R6
   \   000000DA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DC   0x0A00             LSRS     R0,R0,#+8
   \   000000DE   0x....             LDR.N    R1,??DataTable7_5
   \   000000E0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000E2   0x1861             ADDS     R1,R4,R1
   \   000000E4   0x7208             STRB     R0,[R1, #+8]
    343              
    344          	SndBufTmp[0] = SndBuf[0];						    // 准备数据发送
   \   000000E6   0x....             LDR.N    R0,??DataTable7_5
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x....             LDR.N    R1,??DataTable7_8
   \   000000EC   0x7008             STRB     R0,[R1, #+0]
    345          	SndBufTmp[1] = SndBuf[1];
   \   000000EE   0x....             LDR.N    R0,??DataTable7_5
   \   000000F0   0x7840             LDRB     R0,[R0, #+1]
   \   000000F2   0x....             LDR.N    R1,??DataTable7_8
   \   000000F4   0x7048             STRB     R0,[R1, #+1]
    346          	
    347          	AddHeadNum = 0;
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x0007             MOVS     R7,R0
    348          	for(i = 2; i< 2+6+DataLen + 2;i++ )	{				// 数据，补移位 FRAM_HERD0
   \   000000FA   0x2002             MOVS     R0,#+2
   \   000000FC   0x4680             MOV      R8,R0
   \                     ??CSNC_SendData_0: (+1)
   \   000000FE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000102   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000104   0xF114 0x000A      ADDS     R0,R4,#+10
   \   00000108   0x4580             CMP      R8,R0
   \   0000010A   0xDA1F             BGE.N    ??CSNC_SendData_1
    349                  
    350          		SndBufTmp[i+AddHeadNum] = SndBuf[i];
   \   0000010C   0x....             LDR.N    R0,??DataTable7_5
   \   0000010E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000112   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000116   0x....             LDR.N    R1,??DataTable7_8
   \   00000118   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000011C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000011E   0xEB17 0x0208      ADDS     R2,R7,R8
   \   00000122   0x5450             STRB     R0,[R2, R1]
    351          		
    352          		if(SndBuf[i] == FRAM_HERD0) {
   \   00000124   0x....             LDR.N    R0,??DataTable7_5
   \   00000126   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000012A   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000012E   0x2810             CMP      R0,#+16
   \   00000130   0xD109             BNE.N    ??CSNC_SendData_2
    353          			SndBufTmp[i+AddHeadNum+1] = FRAM_HERD0;
   \   00000132   0x....             LDR.N    R0,??DataTable7_8
   \   00000134   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000138   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000013A   0xEB17 0x0108      ADDS     R1,R7,R8
   \   0000013E   0x1808             ADDS     R0,R1,R0
   \   00000140   0x2110             MOVS     R1,#+16
   \   00000142   0x7041             STRB     R1,[R0, #+1]
    354          			AddHeadNum++;
   \   00000144   0x1C7F             ADDS     R7,R7,#+1
    355          		}
    356          	}
   \                     ??CSNC_SendData_2: (+1)
   \   00000146   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000014A   0xE7D8             B.N      ??CSNC_SendData_0
    357              
    358          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum] = FRAM_END0;
   \                     ??CSNC_SendData_1: (+1)
   \   0000014C   0x....             LDR.N    R0,??DataTable7_8
   \   0000014E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000150   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000152   0x1939             ADDS     R1,R7,R4
   \   00000154   0x1808             ADDS     R0,R1,R0
   \   00000156   0x2110             MOVS     R1,#+16
   \   00000158   0x7281             STRB     R1,[R0, #+10]
    359          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum+1] = FRAM_END1;      
   \   0000015A   0x....             LDR.N    R0,??DataTable7_8
   \   0000015C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000015E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000160   0x1939             ADDS     R1,R7,R4
   \   00000162   0x1808             ADDS     R0,R1,R0
   \   00000164   0x212C             MOVS     R1,#+44
   \   00000166   0x72C1             STRB     R1,[R0, #+11]
    360              
    361              CPU_INT16U nbr_bytes= (2+6+DataLen + 2 +AddHeadNum +2);
   \   00000168   0x1938             ADDS     R0,R7,R4
   \   0000016A   0x300C             ADDS     R0,R0,#+12
   \   0000016C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    362              if ( nbr_bytes < MB_DATA_NBR_REGS * 2 ) {  
   \   00000170   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000174   0x28FA             CMP      R0,#+250
   \   00000176   0xDA17             BGE.N    ??CSNC_SendData_3
    363                  //串口在非接收状态，发送数据。
    364                  //        if (pch->RxBufByteCtr == 0) 
    365                  uint8   times = 0;
   \   00000178   0xF05F 0x0A00      MOVS     R10,#+0
    366                   while(pch->RxBufByteCtr != 0)
   \                     ??CSNC_SendData_4: (+1)
   \   0000017C   0x8E28             LDRH     R0,[R5, #+48]
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xD00C             BEQ.N    ??CSNC_SendData_5
    367                   {
    368                      BSP_OS_TimeDly(5);
   \   00000182   0x2005             MOVS     R0,#+5
   \   00000184   0x.... 0x....      BL       BSP_OS_TimeDly
    369                      times++;
   \   00000188   0xF11A 0x0A01      ADDS     R10,R10,#+1
    370                       if(pch->RxBufByteCtr == 0 || times > 10){
   \   0000018C   0x8E28             LDRH     R0,[R5, #+48]
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xD004             BEQ.N    ??CSNC_SendData_6
   \   00000192   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000196   0xF1BA 0x0F0B      CMP      R10,#+11
   \   0000019A   0xDBEF             BLT.N    ??CSNC_SendData_4
    371                           break;
    372                       }
    373                   }
    374                       
    375                  {                
    376                      NMB_Tx(pch,
    377                             (CPU_INT08U  *)SndBufTmp,
    378                             (CPU_INT16U   )nbr_bytes);
   \                     ??CSNC_SendData_6: (+1)
   \                     ??CSNC_SendData_5: (+1)
   \   0000019C   0xF8BD 0x2000      LDRH     R2,[SP, #+0]
   \   000001A0   0x....             LDR.N    R1,??DataTable7_8
   \   000001A2   0x0028             MOVS     R0,R5
   \   000001A4   0x.... 0x....      BL       NMB_Tx
    379                  }
    380              }
    381              //BSP_OS_TimeDlyMs( nbr_bytes * 1000 * 10 / pch->BaudRate + 2 );
    382              BSP_OS_SemPost(&Bsp_Fram_Sem);                        	// 发送信号量
   \                     ??CSNC_SendData_3: (+1)
   \   000001A8   0x....             LDR.N    R0,??DataTable7_3
   \   000001AA   0x.... 0x....      BL       BSP_OS_SemPost
    383              
    384          }
   \   000001AE   0xB005             ADD      SP,SP,#+20
   \   000001B0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     l_recslaveaddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     l_RecvFrameNbr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     Bsp_Fram_Sem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     SendFrameNbr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     SndBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     SndBuf+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     SndBuf+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     SndBufTmp

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Protocol Sem"
   \              0x6F 0x74    
   \              0x6F 0x63    
   \              0x6F 0x6C    
   \              0x20 0x53    
   \              0x65 0x6D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    385          
    386          /*******************************************************************************
    387          * 				                    end of file                                *
    388          *******************************************************************************/
    389          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   CSNC_GetData
        56   -> GetCheckSumNR
        56   -> GetCrc16Check
      56   CSNC_SendData
        56   -> BSP_OS_SemPost
        56   -> BSP_OS_SemWait
        56   -> BSP_OS_TimeDly
        56   -> GetCheckSumNR
        56   -> GetCrc16Check
        56   -> NMB_Tx
        56   -> __aeabi_memcpy
       4   GetCheckSumNR
       0   GetRecSlaveAddr
       0   GetRecvFrameNbr
       0   GetSendFrameNbr
       8   OS_ProtocolInit
         8   -> BSP_OS_SemCreate
       0   SetRecvFrameNbr
       0   SetSendFrameNbr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
      16  ?_0
      40  Bsp_Fram_Sem
     422  CSNC_GetData
     436  CSNC_SendData
      42  GetCheckSumNR
       8  GetRecSlaveAddr
       8  GetRecvFrameNbr
       6  GetSendFrameNbr
      18  OS_ProtocolInit
       1  SendFrameNbr
      16  SetRecvFrameNbr
      12  SetSendFrameNbr
     252  SndBuf
     252  SndBufTmp
       1  l_RecvFrameNbr
       1  l_recslaveaddr

 
   547 bytes in section .bss
    16 bytes in section .rodata
 1 004 bytes in section .text
 
 1 004 bytes of CODE  memory
    16 bytes of CONST memory
   547 bytes of DATA  memory

Errors: none
Warnings: none
