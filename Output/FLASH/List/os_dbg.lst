###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uCOS-III\Source\os_dbg.c
#    Command line =  
#        "F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uCOS-III\Source\os_dbg.c" -D
#        RELEASE -lCN "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\os_dbg.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\os_dbg.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uCOS-III\Source\os_dbg.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2016; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                  DEBUGGER CONSTANTS
     10          *
     11          * File    : OS_DBG.C
     12          * By      : JJL
     13          * Version : V3.06.00
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your
     20          *           application/product.   We provide ALL the source code for your convenience and to help you
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can find our product's user manual, API reference, release notes and
     30          *           more information at https://doc.micrium.com.
     31          *           You can contact us at www.micrium.com.
     32          ************************************************************************************************************************
     33          */
     34          
     35          #define  MICRIUM_SOURCE
     36          #include "os.h"
     37          
     38          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     39          const  CPU_CHAR  *os_dbg__c = "$Id: $";
     40          #endif
     41          

   \                                 In section .rodata, align 1
     42          CPU_INT08U  const  OSDbg_DbgEn                 = OS_CFG_DBG_EN;                /* Debug constants are defined below   */
   \                     OSDbg_DbgEn:
   \   00000000   0x01               DC8 1
     43          
     44          #if (OS_CFG_DBG_EN == DEF_ENABLED)
     45          
     46          /*
     47          ************************************************************************************************************************
     48          *                                                      DEBUG DATA
     49          ************************************************************************************************************************
     50          */
     51          

   \                                 In section .rodata, align 1
     52          CPU_INT08U  const  OSDbg_ArgChkEn              = OS_CFG_ARG_CHK_EN;
   \                     OSDbg_ArgChkEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
     53          CPU_INT08U  const  OSDbg_AppHooksEn            = OS_CFG_APP_HOOKS_EN;
   \                     OSDbg_AppHooksEn:
   \   00000000   0x01               DC8 1
     54          

   \                                 In section .rodata, align 4
     55          CPU_INT32U  const  OSDbg_EndiannessTest        = 0x12345678LU;                 /* Variable to test CPU endianness     */
   \                     OSDbg_EndiannessTest:
   \   00000000   0x12345678         DC32 305419896
     56          

   \                                 In section .rodata, align 1
     57          CPU_INT08U  const  OSDbg_CalledFromISRChkEn    = OS_CFG_CALLED_FROM_ISR_CHK_EN;
   \                     OSDbg_CalledFromISRChkEn:
   \   00000000   0x01               DC8 1
     58          

   \                                 In section .rodata, align 1
     59          CPU_INT08U  const  OSDbg_FlagEn                = OS_CFG_FLAG_EN;
   \                     OSDbg_FlagEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 4
     60          OS_FLAG_GRP const  OSDbg_FlagGrp               = { 0u };
   \                     OSDbg_FlagGrp:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     61          #if (OS_CFG_FLAG_EN == DEF_ENABLED)

   \                                 In section .rodata, align 1
     62          CPU_INT08U  const  OSDbg_FlagDelEn             = OS_CFG_FLAG_DEL_EN;
   \                     OSDbg_FlagDelEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
     63          CPU_INT08U  const  OSDbg_FlagModeClrEn         = OS_CFG_FLAG_MODE_CLR_EN;
   \                     OSDbg_FlagModeClrEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
     64          CPU_INT08U  const  OSDbg_FlagPendAbortEn       = OS_CFG_FLAG_PEND_ABORT_EN;
   \                     OSDbg_FlagPendAbortEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 2
     65          CPU_INT16U  const  OSDbg_FlagGrpSize           = sizeof(OS_FLAG_GRP);          /* Size in Bytes of OS_FLAG_GRP        */
   \                     OSDbg_FlagGrpSize:
   \   00000000   0x0028             DC16 40

   \                                 In section .rodata, align 2
     66          CPU_INT16U  const  OSDbg_FlagWidth             = sizeof(OS_FLAGS);             /* Width (in bytes) of OS_FLAGS        */
   \                     OSDbg_FlagWidth:
   \   00000000   0x0004             DC16 4
     67          #else
     68          CPU_INT08U  const  OSDbg_FlagDelEn             = 0u;
     69          CPU_INT08U  const  OSDbg_FlagModeClrEn         = 0u;
     70          CPU_INT08U  const  OSDbg_FlagPendAbortEn       = 0u;
     71          CPU_INT16U  const  OSDbg_FlagGrpSize           = 0u;
     72          CPU_INT16U  const  OSDbg_FlagWidth             = 0u;
     73          #endif
     74          

   \                                 In section .rodata, align 4
     75          OS_MEM      const  OSDbg_Mem                   = { 0u };
   \                     OSDbg_Mem:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 1
     76          CPU_INT08U  const  OSDbg_MemEn                 = OS_CFG_MEM_EN;
   \                     OSDbg_MemEn:
   \   00000000   0x01               DC8 1
     77          #if OS_CFG_MEM_EN > 0u

   \                                 In section .rodata, align 2
     78          CPU_INT16U  const  OSDbg_MemSize               = sizeof(OS_MEM);               /* Mem. Partition header size (bytes)  */
   \                     OSDbg_MemSize:
   \   00000000   0x0020             DC16 32
     79          #else
     80          CPU_INT16U  const  OSDbg_MemSize               = 0u;
     81          #endif
     82          
     83          
     84          #if (OS_MSG_EN == DEF_ENABLED)

   \                                 In section .rodata, align 1
     85          CPU_INT08U  const  OSDbg_MsgEn                 = 1u;
   \                     OSDbg_MsgEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 2
     86          CPU_INT16U  const  OSDbg_MsgSize               = sizeof(OS_MSG);               /* OS_MSG size                         */
   \                     OSDbg_MsgSize:
   \   00000000   0x0010             DC16 16

   \                                 In section .rodata, align 2
     87          CPU_INT16U  const  OSDbg_MsgPoolSize           = sizeof(OS_MSG_POOL);
   \                     OSDbg_MsgPoolSize:
   \   00000000   0x000C             DC16 12

   \                                 In section .rodata, align 2
     88          CPU_INT16U  const  OSDbg_MsgQSize              = sizeof(OS_MSG_Q);
   \                     OSDbg_MsgQSize:
   \   00000000   0x0010             DC16 16
     89          #else
     90          CPU_INT08U  const  OSDbg_MsgEn                 = 0u;
     91          CPU_INT16U  const  OSDbg_MsgSize               = 0u;
     92          CPU_INT16U  const  OSDbg_MsgPoolSize           = 0u;
     93          CPU_INT16U  const  OSDbg_MsgQSize              = 0u;
     94          #endif
     95          
     96          

   \                                 In section .rodata, align 4
     97          OS_MUTEX    const  OSDbg_Mutex                 = { 0u };
   \                     OSDbg_Mutex:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 1
     98          CPU_INT08U  const  OSDbg_MutexEn               = OS_CFG_MUTEX_EN;
   \                     OSDbg_MutexEn:
   \   00000000   0x01               DC8 1
     99          #if (OS_CFG_MUTEX_EN == DEF_ENABLED)

   \                                 In section .rodata, align 1
    100          CPU_INT08U  const  OSDbg_MutexDelEn            = OS_CFG_MUTEX_DEL_EN;
   \                     OSDbg_MutexDelEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    101          CPU_INT08U  const  OSDbg_MutexPendAbortEn      = OS_CFG_MUTEX_PEND_ABORT_EN;
   \                     OSDbg_MutexPendAbortEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 2
    102          CPU_INT16U  const  OSDbg_MutexSize             = sizeof(OS_MUTEX);             /* Size in bytes of OS_MUTEX           */
   \                     OSDbg_MutexSize:
   \   00000000   0x0030             DC16 48
    103          #else
    104          CPU_INT08U  const  OSDbg_MutexDelEn            = 0u;
    105          CPU_INT08U  const  OSDbg_MutexPendAbortEn      = 0u;
    106          CPU_INT16U  const  OSDbg_MutexSize             = 0u;
    107          #endif
    108          

   \                                 In section .rodata, align 1
    109          CPU_INT08U  const  OSDbg_ObjTypeChkEn          = OS_CFG_OBJ_TYPE_CHK_EN;
   \                     OSDbg_ObjTypeChkEn:
   \   00000000   0x01               DC8 1
    110          
    111          

   \                                 In section .rodata, align 2
    112          CPU_INT16U  const  OSDbg_PendListSize          = sizeof(OS_PEND_LIST);
   \                     OSDbg_PendListSize:
   \   00000000   0x000C             DC16 12

   \                                 In section .rodata, align 2
    113          CPU_INT16U  const  OSDbg_PendObjSize           = sizeof(OS_PEND_OBJ);
   \                     OSDbg_PendObjSize:
   \   00000000   0x0020             DC16 32
    114          
    115          

   \                                 In section .rodata, align 2
    116          CPU_INT16U  const  OSDbg_PrioMax               = OS_CFG_PRIO_MAX;              /* Maximum number of priorities        */
   \                     OSDbg_PrioMax:
   \   00000000   0x0020             DC16 32

   \                                 In section .rodata, align 2
    117          CPU_INT16U  const  OSDbg_PrioTblSize           = sizeof(OSPrioTbl);
   \                     OSDbg_PrioTblSize:
   \   00000000   0x0004             DC16 4
    118          

   \                                 In section .rodata, align 2
    119          CPU_INT16U  const  OSDbg_PtrSize               = sizeof(void *);               /* Size in Bytes of a pointer          */
   \                     OSDbg_PtrSize:
   \   00000000   0x0004             DC16 4
    120          
    121          

   \                                 In section .rodata, align 4
    122          OS_Q        const  OSDbg_Q                     = { 0u };
   \                     OSDbg_Q:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 1
    123          CPU_INT08U  const  OSDbg_QEn                   = OS_CFG_Q_EN;
   \                     OSDbg_QEn:
   \   00000000   0x01               DC8 1
    124          #if (OS_CFG_Q_EN == DEF_ENABLED)

   \                                 In section .rodata, align 1
    125          CPU_INT08U  const  OSDbg_QDelEn                = OS_CFG_Q_DEL_EN;
   \                     OSDbg_QDelEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    126          CPU_INT08U  const  OSDbg_QFlushEn              = OS_CFG_Q_FLUSH_EN;
   \                     OSDbg_QFlushEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    127          CPU_INT08U  const  OSDbg_QPendAbortEn          = OS_CFG_Q_PEND_ABORT_EN;
   \                     OSDbg_QPendAbortEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 2
    128          CPU_INT16U  const  OSDbg_QSize                 = sizeof(OS_Q);                 /* Size in bytes of OS_Q structure     */
   \                     OSDbg_QSize:
   \   00000000   0x0030             DC16 48
    129          #else
    130          CPU_INT08U  const  OSDbg_QDelEn                = 0u;
    131          CPU_INT08U  const  OSDbg_QFlushEn              = 0u;
    132          CPU_INT08U  const  OSDbg_QPendAbortEn          = 0u;
    133          CPU_INT16U  const  OSDbg_QSize                 = 0u;
    134          #endif
    135          
    136          

   \                                 In section .rodata, align 1
    137          CPU_INT08U  const  OSDbg_SchedRoundRobinEn     = OS_CFG_SCHED_ROUND_ROBIN_EN;
   \                     OSDbg_SchedRoundRobinEn:
   \   00000000   0x00               DC8 0
    138          
    139          

   \                                 In section .rodata, align 4
    140          OS_SEM      const  OSDbg_Sem                   = { 0u };
   \                     OSDbg_Sem:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 1
    141          CPU_INT08U  const  OSDbg_SemEn                 = OS_CFG_SEM_EN;
   \                     OSDbg_SemEn:
   \   00000000   0x01               DC8 1
    142          #if (OS_CFG_SEM_EN == DEF_ENABLED)

   \                                 In section .rodata, align 1
    143          CPU_INT08U  const  OSDbg_SemDelEn              = OS_CFG_SEM_DEL_EN;
   \                     OSDbg_SemDelEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    144          CPU_INT08U  const  OSDbg_SemPendAbortEn        = OS_CFG_SEM_PEND_ABORT_EN;
   \                     OSDbg_SemPendAbortEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    145          CPU_INT08U  const  OSDbg_SemSetEn              = OS_CFG_SEM_SET_EN;
   \                     OSDbg_SemSetEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 2
    146          CPU_INT16U  const  OSDbg_SemSize               = sizeof(OS_SEM);               /* Size in bytes of OS_SEM             */
   \                     OSDbg_SemSize:
   \   00000000   0x0028             DC16 40
    147          #else
    148          CPU_INT08U  const  OSDbg_SemDelEn              = 0u;
    149          CPU_INT08U  const  OSDbg_SemPendAbortEn        = 0u;
    150          CPU_INT08U  const  OSDbg_SemSetEn              = 0u;
    151          CPU_INT16U  const  OSDbg_SemSize               = 0u;
    152          #endif
    153          
    154          

   \                                 In section .rodata, align 2
    155          CPU_INT16U  const  OSDbg_RdyList               = sizeof(OS_RDY_LIST);
   \                     OSDbg_RdyList:
   \   00000000   0x000C             DC16 12

   \                                 In section .rodata, align 4
    156          CPU_INT32U  const  OSDbg_RdyListSize           = sizeof(OSRdyList);            /* Number of bytes in the ready table  */
   \                     OSDbg_RdyListSize:
   \   00000000   0x00000180         DC32 384
    157          

   \                                 In section .rodata, align 1
    158          CPU_INT08U  const  OSDbg_StkWidth              = sizeof(CPU_STK);
   \                     OSDbg_StkWidth:
   \   00000000   0x04               DC8 4
    159          

   \                                 In section .rodata, align 1
    160          CPU_INT08U  const  OSDbg_StatTaskEn            = OS_CFG_STAT_TASK_EN;
   \                     OSDbg_StatTaskEn:
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 1
    161          CPU_INT08U  const  OSDbg_StatTaskStkChkEn      = OS_CFG_STAT_TASK_STK_CHK_EN;
   \                     OSDbg_StatTaskStkChkEn:
   \   00000000   0x01               DC8 1
    162          

   \                                 In section .rodata, align 1
    163          CPU_INT08U  const  OSDbg_TaskChangePrioEn      = OS_CFG_TASK_CHANGE_PRIO_EN;
   \                     OSDbg_TaskChangePrioEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    164          CPU_INT08U  const  OSDbg_TaskDelEn             = OS_CFG_TASK_DEL_EN;
   \                     OSDbg_TaskDelEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    165          CPU_INT08U  const  OSDbg_TaskQEn               = OS_CFG_TASK_Q_EN;
   \                     OSDbg_TaskQEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    166          CPU_INT08U  const  OSDbg_TaskQPendAbortEn      = OS_CFG_TASK_Q_PEND_ABORT_EN;
   \                     OSDbg_TaskQPendAbortEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    167          CPU_INT08U  const  OSDbg_TaskProfileEn         = OS_CFG_TASK_PROFILE_EN;
   \                     OSDbg_TaskProfileEn:
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 2
    168          CPU_INT16U  const  OSDbg_TaskRegTblSize        = OS_CFG_TASK_REG_TBL_SIZE;
   \                     OSDbg_TaskRegTblSize:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 1
    169          CPU_INT08U  const  OSDbg_TaskSemPendAbortEn    = OS_CFG_TASK_SEM_PEND_ABORT_EN;
   \                     OSDbg_TaskSemPendAbortEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    170          CPU_INT08U  const  OSDbg_TaskSuspendEn         = OS_CFG_TASK_SUSPEND_EN;
   \                     OSDbg_TaskSuspendEn:
   \   00000000   0x01               DC8 1
    171          
    172          

   \                                 In section .rodata, align 2
    173          CPU_INT16U  const  OSDbg_TCBSize               = sizeof(OS_TCB);               /* Size in Bytes of OS_TCB             */
   \                     OSDbg_TCBSize:
   \   00000000   0x00A0             DC16 160
    174          

   \                                 In section .rodata, align 2
    175          CPU_INT16U  const  OSDbg_TickListSize          = sizeof(OS_TICK_LIST);
   \                     OSDbg_TickListSize:
   \   00000000   0x0008             DC16 8
    176          

   \                                 In section .rodata, align 1
    177          CPU_INT08U  const  OSDbg_TimeDlyHMSMEn         = OS_CFG_TIME_DLY_HMSM_EN;
   \                     OSDbg_TimeDlyHMSMEn:
   \   00000000   0x01               DC8 1

   \                                 In section .rodata, align 1
    178          CPU_INT08U  const  OSDbg_TimeDlyResumeEn       = OS_CFG_TIME_DLY_RESUME_EN;
   \                     OSDbg_TimeDlyResumeEn:
   \   00000000   0x01               DC8 1
    179          
    180          #if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    181          CPU_INT16U  const  OSDbg_TLS_TblSize           = OS_CFG_TLS_TBL_SIZE * sizeof(OS_TLS);
    182          #else

   \                                 In section .rodata, align 2
    183          CPU_INT16U  const  OSDbg_TLS_TblSize           = 0u;
   \                     OSDbg_TLS_TblSize:
   \   00000000   0x0000             DC16 0
    184          #endif
    185          
    186          

   \                                 In section .rodata, align 4
    187          OS_TMR      const  OSDbg_Tmr                   = { 0u };
   \                     OSDbg_Tmr:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 1
    188          CPU_INT08U  const  OSDbg_TmrEn                 = OS_CFG_TMR_EN;
   \                     OSDbg_TmrEn:
   \   00000000   0x00               DC8 0
    189          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    190          CPU_INT08U  const  OSDbg_TmrDelEn              = OS_CFG_TMR_DEL_EN;
    191          CPU_INT16U  const  OSDbg_TmrSize               = sizeof(OS_TMR);
    192          #else

   \                                 In section .rodata, align 1
    193          CPU_INT08U  const  OSDbg_TmrDelEn              = 0u;
   \                     OSDbg_TmrDelEn:
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 2
    194          CPU_INT16U  const  OSDbg_TmrSize               = 0u;
   \                     OSDbg_TmrSize:
   \   00000000   0x0000             DC16 0
    195          #endif
    196          

   \                                 In section .rodata, align 2
    197          CPU_INT16U  const  OSDbg_VersionNbr            = OS_VERSION;
   \                     OSDbg_VersionNbr:
   \   00000000   0x7788             DC16 30600
    198          
    199          
    200          /*
    201          ************************************************************************************************************************
    202          *                                                      DEBUG DATA
    203          *                                     TOTAL DATA SPACE (i.e. RAM) USED BY uC/OS-III
    204          ************************************************************************************************************************
    205          */
    206          

   \                                 In section .rodata, align 4
    207          CPU_INT32U  const  OSDbg_DataSize = sizeof(OSIntNestingCtr)
   \                     OSDbg_DataSize:
   \   00000000   0x00000343         DC32 835
    208          
    209          #if (OS_CFG_APP_HOOKS_EN == DEF_ENABLED)
    210          #if (OS_CFG_TASK_STK_REDZONE_EN == DEF_ENABLED)
    211                                            + sizeof(OS_AppRedzoneHitHookPtr)
    212          #endif
    213                                            + sizeof(OS_AppTaskCreateHookPtr)
    214                                            + sizeof(OS_AppTaskDelHookPtr)
    215                                            + sizeof(OS_AppTaskReturnHookPtr)
    216          
    217                                            + sizeof(OS_AppIdleTaskHookPtr)
    218                                            + sizeof(OS_AppStatTaskHookPtr)
    219                                            + sizeof(OS_AppTaskSwHookPtr)
    220                                            + sizeof(OS_AppTimeTickHookPtr)
    221          #endif
    222          
    223          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    224                                            + sizeof(OSIdleTaskCtr)
    225          #endif
    226          #if (OS_CFG_TASK_IDLE_EN == DEF_ENABLED)
    227                                            + sizeof(OSIdleTaskTCB)
    228          #endif
    229          
    230          #ifdef CPU_CFG_INT_DIS_MEAS_EN
    231                                            + sizeof(OSIntDisTimeMax)
    232          #endif
    233          
    234                                            + sizeof(OSRunning)
    235                                            + sizeof(OSInitialized)
    236          
    237          #ifdef OS_SAFETY_CRITICAL_IEC61508
    238                                            + sizeof(OSSafetyCriticalStartFlag)
    239          #endif
    240          
    241          #if (OS_CFG_FLAG_EN == DEF_ENABLED)
    242          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    243                                            + sizeof(OSFlagDbgListPtr)
    244                                            + sizeof(OSFlagQty)
    245          #endif
    246          #endif
    247          
    248          #if (OS_CFG_MON_EN == DEF_ENABLED)
    249          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    250                                            + sizeof(OSMonDbgListPtr)
    251                                            + sizeof(OSMonQty)
    252          #endif
    253          #endif
    254          
    255          #if (OS_CFG_MEM_EN == DEF_ENABLED)
    256          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    257                                            + sizeof(OSMemDbgListPtr)
    258                                            + sizeof(OSMemQty)
    259          #endif
    260          #endif
    261          
    262          #if (OS_MSG_EN == DEF_ENABLED)
    263                                            + sizeof(OSMsgPool)
    264          #endif
    265          
    266          #if (OS_CFG_MUTEX_EN == DEF_ENABLED)
    267          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    268                                            + sizeof(OSMutexDbgListPtr)
    269                                            + sizeof(OSMutexQty)
    270          #endif
    271          #endif
    272          
    273                                            + sizeof(OSPrioCur)
    274                                            + sizeof(OSPrioHighRdy)
    275                                            + sizeof(OSPrioTbl)
    276          
    277          #if (OS_CFG_Q_EN == DEF_ENABLED)
    278          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    279                                            + sizeof(OSQDbgListPtr)
    280                                            + sizeof(OSQQty)
    281          #endif
    282          #endif
    283          
    284                                            + sizeof(OSRdyList)
    285          
    286                                            + sizeof(OSSchedLockNestingCtr)
    287          
    288          #if (OS_CFG_SCHED_LOCK_TIME_MEAS_EN == DEF_ENABLED)
    289                                            + sizeof(OSSchedLockTimeBegin)
    290                                            + sizeof(OSSchedLockTimeMax)
    291                                            + sizeof(OSSchedLockTimeMaxCur)
    292          #endif
    293          
    294          #if (OS_CFG_SCHED_ROUND_ROBIN_EN == DEF_ENABLED)
    295                                            + sizeof(OSSchedRoundRobinDfltTimeQuanta)
    296                                            + sizeof(OSSchedRoundRobinEn)
    297          #endif
    298          
    299          #if (OS_CFG_SEM_EN == DEF_ENABLED)
    300          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    301                                            + sizeof(OSSemDbgListPtr)
    302          #endif
    303                                            + sizeof(OSSemQty)
    304          #endif
    305          #if ((OS_CFG_TASK_PROFILE_EN == DEF_ENABLED) || (OS_CFG_DBG_EN == DEF_ENABLED))
    306                                            + sizeof(OSTaskCtxSwCtr)
    307          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    308                                            + sizeof(OSTaskDbgListPtr)
    309          #endif
    310          #endif
    311          
    312                                            + sizeof(OSTaskQty)
    313          
    314          
    315          #if (OS_CFG_STAT_TASK_EN == DEF_ENABLED)
    316                                            + sizeof(OSStatResetFlag)
    317                                            + sizeof(OSStatTaskCPUUsage)
    318                                            + sizeof(OSStatTaskCPUUsageMax)
    319                                            + sizeof(OSStatTaskCtr)
    320                                            + sizeof(OSStatTaskCtrMax)
    321                                            + sizeof(OSStatTaskCtrRun)
    322                                            + sizeof(OSStatTaskRdy)
    323                                            + sizeof(OSStatTaskTCB)
    324          #if (OS_CFG_TS_EN == DEF_ENABLED)
    325                                            + sizeof(OSStatTaskTimeMax)
    326          #endif
    327          #endif
    328          
    329          #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
    330                                            + sizeof(OSTickCtr)
    331                                            + sizeof(OSTickTaskTCB)
    332          #if (OS_CFG_TS_EN == DEF_ENABLED)
    333                                            + sizeof(OSTickTaskTimeMax)
    334          #endif
    335                                            + sizeof(OSTickListDly)
    336                                            + sizeof(OSTickListTimeout)
    337          #endif
    338          
    339          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    340          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    341                                            + sizeof(OSTmrDbgListPtr)
    342                                            + sizeof(OSTmrListEntries)
    343          #endif
    344                                            + sizeof(OSTmrListPtr)
    345          #if (OS_CFG_MUTEX_EN == DEF_ENABLED)
    346                                            + sizeof(OSTmrMutex)
    347          #endif
    348          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    349                                            + sizeof(OSTmrQty)
    350          #endif
    351                                            + sizeof(OSTmrTaskTCB)
    352          #if (OS_CFG_TS_EN == DEF_ENABLED)
    353                                            + sizeof(OSTmrTaskTimeMax)
    354          #endif
    355                                            + sizeof(OSTmrTickCtr)
    356                                            + sizeof(OSTmrUpdateCnt)
    357                                            + sizeof(OSTmrUpdateCtr)
    358          #endif
    359          
    360          #if (OS_CFG_TASK_REG_TBL_SIZE > 0u)
    361                                            + sizeof(OSTaskRegNextAvailID)
    362          #endif
    363          
    364                                            + sizeof(OSTCBCurPtr)
    365                                            + sizeof(OSTCBHighRdyPtr);
    366          
    367          
    368          /*
    369          ************************************************************************************************************************
    370          *                                               OS DEBUG INITIALIZATION
    371          *
    372          * Description: This function is used to make sure that debug variables that are unused in the application are not
    373          *              optimized away.  This function might not be necessary for all compilers.  In this case, you should simply
    374          *              DELETE the code in this function while still leaving the declaration of the function itself.
    375          *
    376          * Arguments  : none
    377          *
    378          * Returns    : none
    379          *
    380          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'
    381          *                  variables which are declared in this file.
    382          *              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler
    383          *                  DOES NOT optimize out the 'const' variables above.
    384          ************************************************************************************************************************
    385          */
    386          

   \                                 In section .text, align 4, keep-with-next
    387          void  OS_Dbg_Init (void)
    388          {
    389              CPU_INT08U const  *p_temp08;
    390              CPU_INT16U const  *p_temp16;
    391              CPU_INT32U const  *p_temp32;
    392          
    393          
    394              p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
   \                     OS_Dbg_Init: (+1)
   \   00000000   0x4B40             LDR.N    R3,??OS_Dbg_Init_0
   \   00000002   0x0018             MOVS     R0,R3
    395          
    396              p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
   \   00000004   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x4
   \   00000006   0x001A             MOVS     R2,R3
    397          
    398              p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
   \   00000008   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x8
   \   0000000A   0x0018             MOVS     R0,R3
    399              p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
   \   0000000C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xC
   \   0000000E   0x0018             MOVS     R0,R3
    400          
    401              p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
   \   00000010   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x10
   \   00000012   0x001A             MOVS     R2,R3
    402          
    403              p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
   \   00000014   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x14
   \   00000016   0x0018             MOVS     R0,R3
    404          
    405              p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
   \   00000018   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x18
   \   0000001A   0x0019             MOVS     R1,R3
    406              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
   \   0000001C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x1C
   \   0000001E   0x0018             MOVS     R0,R3
    407          #if (OS_CFG_FLAG_EN == DEF_ENABLED)
    408              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
   \   00000020   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x20
   \   00000022   0x0018             MOVS     R0,R3
    409              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
   \   00000024   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x24
   \   00000026   0x0018             MOVS     R0,R3
    410              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
   \   00000028   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x28
   \   0000002A   0x0018             MOVS     R0,R3
    411              p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
   \   0000002C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x2C
   \   0000002E   0x0019             MOVS     R1,R3
    412              p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
   \   00000030   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x30
   \   00000032   0x0019             MOVS     R1,R3
    413          #endif
    414          
    415              p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
   \   00000034   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x34
   \   00000036   0x0019             MOVS     R1,R3
    416              p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
   \   00000038   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x38
   \   0000003A   0x0018             MOVS     R0,R3
    417          #if (OS_CFG_MEM_EN == DEF_ENABLED)
    418              p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
   \   0000003C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x3C
   \   0000003E   0x0019             MOVS     R1,R3
    419          #endif
    420          
    421              p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
   \   00000040   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x40
   \   00000042   0x0018             MOVS     R0,R3
    422          #if (OS_MSG_EN == DEF_ENABLED)
    423              p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
   \   00000044   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x44
   \   00000046   0x0019             MOVS     R1,R3
    424              p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
   \   00000048   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x48
   \   0000004A   0x0019             MOVS     R1,R3
    425              p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
   \   0000004C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x4C
   \   0000004E   0x0019             MOVS     R1,R3
    426          #endif
    427          
    428              p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
   \   00000050   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x50
   \   00000052   0x0019             MOVS     R1,R3
    429              p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
   \   00000054   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x54
   \   00000056   0x0018             MOVS     R0,R3
    430          #if (OS_CFG_MUTEX_EN == DEF_ENABLED)
    431              p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
   \   00000058   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x58
   \   0000005A   0x0018             MOVS     R0,R3
    432              p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
   \   0000005C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x5C
   \   0000005E   0x0018             MOVS     R0,R3
    433              p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
   \   00000060   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x60
   \   00000062   0x0019             MOVS     R1,R3
    434          #endif
    435          
    436              p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
   \   00000064   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x64
   \   00000066   0x0018             MOVS     R0,R3
    437          
    438              p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
   \   00000068   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x68
   \   0000006A   0x0019             MOVS     R1,R3
    439              p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
   \   0000006C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x6C
   \   0000006E   0x0019             MOVS     R1,R3
    440          
    441              p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
   \   00000070   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x70
   \   00000072   0x0019             MOVS     R1,R3
    442              p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
   \   00000074   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x74
   \   00000076   0x0019             MOVS     R1,R3
    443          
    444              p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
   \   00000078   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x78
   \   0000007A   0x0019             MOVS     R1,R3
    445          
    446              p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
   \   0000007C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x7C
   \   0000007E   0x0019             MOVS     R1,R3
    447              p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
   \   00000080   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x80
   \   00000082   0x0018             MOVS     R0,R3
    448          #if (OS_CFG_Q_EN == DEF_ENABLED)
    449              p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
   \   00000084   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x84
   \   00000086   0x0018             MOVS     R0,R3
    450              p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
   \   00000088   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x88
   \   0000008A   0x0018             MOVS     R0,R3
    451              p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
   \   0000008C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x8C
   \   0000008E   0x0018             MOVS     R0,R3
    452              p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
   \   00000090   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x90
   \   00000092   0x0019             MOVS     R1,R3
    453          #endif
    454          
    455              p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
   \   00000094   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x94
   \   00000096   0x0019             MOVS     R1,R3
    456          
    457              p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
   \   00000098   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x98
   \   0000009A   0x0019             MOVS     R1,R3
    458              p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
   \   0000009C   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0x9C
   \   0000009E   0x0018             MOVS     R0,R3
    459          #if (OS_CFG_SEM_EN == DEF_ENABLED)
    460              p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
   \   000000A0   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xA0
   \   000000A2   0x0018             MOVS     R0,R3
    461              p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
   \   000000A4   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xA4
   \   000000A6   0x0018             MOVS     R0,R3
    462              p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
   \   000000A8   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xA8
   \   000000AA   0x0019             MOVS     R1,R3
    463              p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
   \   000000AC   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xAC
   \   000000AE   0x0019             MOVS     R1,R3
    464          #endif
    465          
    466              p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
   \   000000B0   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xB0
   \   000000B2   0x0019             MOVS     R1,R3
    467              p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
   \   000000B4   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xB4
   \   000000B6   0x001A             MOVS     R2,R3
    468          
    469              p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
   \   000000B8   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xB8
   \   000000BA   0x0019             MOVS     R1,R3
    470          
    471              p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
   \   000000BC   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xBC
   \   000000BE   0x0018             MOVS     R0,R3
    472              p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
   \   000000C0   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xC0
   \   000000C2   0x0018             MOVS     R0,R3
    473          
    474              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
   \   000000C4   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xC4
   \   000000C6   0x0018             MOVS     R0,R3
    475              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
   \   000000C8   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xC8
   \   000000CA   0x0018             MOVS     R0,R3
    476              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
   \   000000CC   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xCC
   \   000000CE   0x0018             MOVS     R0,R3
    477              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
   \   000000D0   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xD0
   \   000000D2   0x0018             MOVS     R0,R3
    478              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
   \   000000D4   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xD4
   \   000000D6   0x0018             MOVS     R0,R3
    479              p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
   \   000000D8   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xD8
   \   000000DA   0x0019             MOVS     R1,R3
    480              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
   \   000000DC   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xDC
   \   000000DE   0x0018             MOVS     R0,R3
    481              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
   \   000000E0   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xE0
   \   000000E2   0x0018             MOVS     R0,R3
    482          
    483              p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
   \   000000E4   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xE4
   \   000000E6   0x0019             MOVS     R1,R3
    484          
    485              p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
   \   000000E8   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xE8
   \   000000EA   0x0019             MOVS     R1,R3
    486          
    487              p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
   \   000000EC   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xEC
   \   000000EE   0x0018             MOVS     R0,R3
    488              p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
   \   000000F0   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xF0
   \   000000F2   0x0018             MOVS     R0,R3
    489          
    490          
    491              p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
   \   000000F4   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xF4
   \   000000F6   0x0019             MOVS     R1,R3
    492              p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
   \   000000F8   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xF8
   \   000000FA   0x0018             MOVS     R0,R3
    493          #if (OS_CFG_TMR_EN == DEF_ENABLED)
    494              p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
    495              p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
    496          #endif
    497          
    498              p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
   \   000000FC   0x4B40             LDR.N    R3,??OS_Dbg_Init_0+0xFC
   \   000000FE   0x0019             MOVS     R1,R3
    499          
    500              p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    501              p_temp16 = p_temp16;
    502              p_temp32 = p_temp32;
    503          }
   \   00000100   0x4770             BX       LR               ;; return
   \   00000102   0xBF00             Nop      
   \                     ??OS_Dbg_Init_0:
   \   00000104   0x........         DC32     OSDbg_DbgEn
   \   00000108   0x........         DC32     OSDbg_DataSize
   \   0000010C   0x........         DC32     OSDbg_ArgChkEn
   \   00000110   0x........         DC32     OSDbg_AppHooksEn
   \   00000114   0x........         DC32     OSDbg_EndiannessTest
   \   00000118   0x........         DC32     OSDbg_CalledFromISRChkEn
   \   0000011C   0x........         DC32     OSDbg_FlagGrp
   \   00000120   0x........         DC32     OSDbg_FlagEn
   \   00000124   0x........         DC32     OSDbg_FlagDelEn
   \   00000128   0x........         DC32     OSDbg_FlagModeClrEn
   \   0000012C   0x........         DC32     OSDbg_FlagPendAbortEn
   \   00000130   0x........         DC32     OSDbg_FlagGrpSize
   \   00000134   0x........         DC32     OSDbg_FlagWidth
   \   00000138   0x........         DC32     OSDbg_Mem
   \   0000013C   0x........         DC32     OSDbg_MemEn
   \   00000140   0x........         DC32     OSDbg_MemSize
   \   00000144   0x........         DC32     OSDbg_MsgEn
   \   00000148   0x........         DC32     OSDbg_MsgSize
   \   0000014C   0x........         DC32     OSDbg_MsgPoolSize
   \   00000150   0x........         DC32     OSDbg_MsgQSize
   \   00000154   0x........         DC32     OSDbg_Mutex
   \   00000158   0x........         DC32     OSDbg_MutexEn
   \   0000015C   0x........         DC32     OSDbg_MutexDelEn
   \   00000160   0x........         DC32     OSDbg_MutexPendAbortEn
   \   00000164   0x........         DC32     OSDbg_MutexSize
   \   00000168   0x........         DC32     OSDbg_ObjTypeChkEn
   \   0000016C   0x........         DC32     OSDbg_PendListSize
   \   00000170   0x........         DC32     OSDbg_PendObjSize
   \   00000174   0x........         DC32     OSDbg_PrioMax
   \   00000178   0x........         DC32     OSDbg_PrioTblSize
   \   0000017C   0x........         DC32     OSDbg_PtrSize
   \   00000180   0x........         DC32     OSDbg_Q
   \   00000184   0x........         DC32     OSDbg_QEn
   \   00000188   0x........         DC32     OSDbg_QDelEn
   \   0000018C   0x........         DC32     OSDbg_QFlushEn
   \   00000190   0x........         DC32     OSDbg_QPendAbortEn
   \   00000194   0x........         DC32     OSDbg_QSize
   \   00000198   0x........         DC32     OSDbg_SchedRoundRobinEn
   \   0000019C   0x........         DC32     OSDbg_Sem
   \   000001A0   0x........         DC32     OSDbg_SemEn
   \   000001A4   0x........         DC32     OSDbg_SemDelEn
   \   000001A8   0x........         DC32     OSDbg_SemPendAbortEn
   \   000001AC   0x........         DC32     OSDbg_SemSetEn
   \   000001B0   0x........         DC32     OSDbg_SemSize
   \   000001B4   0x........         DC32     OSDbg_RdyList
   \   000001B8   0x........         DC32     OSDbg_RdyListSize
   \   000001BC   0x........         DC32     OSDbg_StkWidth
   \   000001C0   0x........         DC32     OSDbg_StatTaskEn
   \   000001C4   0x........         DC32     OSDbg_StatTaskStkChkEn
   \   000001C8   0x........         DC32     OSDbg_TaskChangePrioEn
   \   000001CC   0x........         DC32     OSDbg_TaskDelEn
   \   000001D0   0x........         DC32     OSDbg_TaskQEn
   \   000001D4   0x........         DC32     OSDbg_TaskQPendAbortEn
   \   000001D8   0x........         DC32     OSDbg_TaskProfileEn
   \   000001DC   0x........         DC32     OSDbg_TaskRegTblSize
   \   000001E0   0x........         DC32     OSDbg_TaskSemPendAbortEn
   \   000001E4   0x........         DC32     OSDbg_TaskSuspendEn
   \   000001E8   0x........         DC32     OSDbg_TCBSize
   \   000001EC   0x........         DC32     OSDbg_TickListSize
   \   000001F0   0x........         DC32     OSDbg_TimeDlyHMSMEn
   \   000001F4   0x........         DC32     OSDbg_TimeDlyResumeEn
   \   000001F8   0x........         DC32     OSDbg_Tmr
   \   000001FC   0x........         DC32     OSDbg_TmrEn
   \   00000200   0x........         DC32     OSDbg_VersionNbr
    504          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OS_Dbg_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  OSDbg_AppHooksEn
       1  OSDbg_ArgChkEn
       1  OSDbg_CalledFromISRChkEn
       4  OSDbg_DataSize
       1  OSDbg_DbgEn
       4  OSDbg_EndiannessTest
       1  OSDbg_FlagDelEn
       1  OSDbg_FlagEn
      40  OSDbg_FlagGrp
       2  OSDbg_FlagGrpSize
       1  OSDbg_FlagModeClrEn
       1  OSDbg_FlagPendAbortEn
       2  OSDbg_FlagWidth
      32  OSDbg_Mem
       1  OSDbg_MemEn
       2  OSDbg_MemSize
       1  OSDbg_MsgEn
       2  OSDbg_MsgPoolSize
       2  OSDbg_MsgQSize
       2  OSDbg_MsgSize
      48  OSDbg_Mutex
       1  OSDbg_MutexDelEn
       1  OSDbg_MutexEn
       1  OSDbg_MutexPendAbortEn
       2  OSDbg_MutexSize
       1  OSDbg_ObjTypeChkEn
       2  OSDbg_PendListSize
       2  OSDbg_PendObjSize
       2  OSDbg_PrioMax
       2  OSDbg_PrioTblSize
       2  OSDbg_PtrSize
      48  OSDbg_Q
       1  OSDbg_QDelEn
       1  OSDbg_QEn
       1  OSDbg_QFlushEn
       1  OSDbg_QPendAbortEn
       2  OSDbg_QSize
       2  OSDbg_RdyList
       4  OSDbg_RdyListSize
       1  OSDbg_SchedRoundRobinEn
      40  OSDbg_Sem
       1  OSDbg_SemDelEn
       1  OSDbg_SemEn
       1  OSDbg_SemPendAbortEn
       1  OSDbg_SemSetEn
       2  OSDbg_SemSize
       1  OSDbg_StatTaskEn
       1  OSDbg_StatTaskStkChkEn
       1  OSDbg_StkWidth
       2  OSDbg_TCBSize
       2  OSDbg_TLS_TblSize
       1  OSDbg_TaskChangePrioEn
       1  OSDbg_TaskDelEn
       1  OSDbg_TaskProfileEn
       1  OSDbg_TaskQEn
       1  OSDbg_TaskQPendAbortEn
       2  OSDbg_TaskRegTblSize
       1  OSDbg_TaskSemPendAbortEn
       1  OSDbg_TaskSuspendEn
       2  OSDbg_TickListSize
       1  OSDbg_TimeDlyHMSMEn
       1  OSDbg_TimeDlyResumeEn
      48  OSDbg_Tmr
       1  OSDbg_TmrDelEn
       1  OSDbg_TmrEn
       2  OSDbg_TmrSize
       2  OSDbg_VersionNbr
     516  OS_Dbg_Init

 
 347 bytes in section .rodata
 516 bytes in section .text
 
 516 bytes of CODE  memory
 347 bytes of CONST memory

Errors: none
Warnings: none
