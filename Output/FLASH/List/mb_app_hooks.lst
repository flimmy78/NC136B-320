###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:40
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uC-MB\Cfg\Template\mb_app_hooks.c
#    Command line =  
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\uC-MB\Cfg\Template\mb_app_hooks.c" -D RELEASE -lCN
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\mb_app_hooks.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\mb_app_hooks.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uC-MB\Cfg\Template\mb_app_hooks.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                     uC/MB-III
      4          *                                                The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2010; Micrium, Inc.; Weston, FL
      7          *                          All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                  APPLICATION HOOKS
     10          *
     11          * File    : MB_APP_HOOKS.C
     12          * By      : JJL
     13          * Version : V3.01.2
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *               uC/MB-III is provided in source form to reg_baseistered licensees ONLY.  It is
     18          *               illegal to distribute this source code to any third party unless you receive
     19          *               written permission by an authorized Micrium representative.  Knowledge of
     20          *               the source code may NOT be used to develop a similar product.
     21          *
     22          *               Please help us continue to provide the Embedded community with the finest
     23          *               software available.  Your honesty is greatly appreciated.
     24          *
     25          *               You can contact us at www.micrium.com.
     26          ************************************************************************************************************************
     27          */
     28          
     29          #include <app.h>
     30          #include <includes.h>
     31          #include <global.h>
     32          
     33          //extern BOOL App_SetParaToSensor(INT08U dev, INT32U addr, INT08U *dat, INT16U len);
     34          
     35          /*$PAGE*/
     36          /*
     37          ************************************************************************************************************************
     38          *                                              SET ALL APPLICATION HOOKS
     39          *
     40          * Description: Set ALL application hooks.
     41          *
     42          * Arguments  : none.
     43          *
     44          * Note(s)    : none
     45          ************************************************************************************************************************
     46          */
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void  App_MB_SetAllHooks (void)
     49          {
     50          #if MB_CFG_APP_HOOKS_EN > 0u
     51          
     52          #endif
     53          }
   \                     App_MB_SetAllHooks: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     54          
     55          /*$PAGE*/
     56          /*
     57          ************************************************************************************************************************
     58          *                                             CLEAR ALL APPLICATION HOOKS
     59          *
     60          * Description: Clear ALL application hooks.
     61          *
     62          * Arguments  : none.
     63          *
     64          * Note(s)    : none
     65          ************************************************************************************************************************
     66          */

   \                                 In section .text, align 2, keep-with-next
     67          CPU_INT08U  App_MB_RdNRegsHook    ( CPU_INT16U  reg_base,
     68                                              CPU_INT16U *prx_data,
     69                                              CPU_INT16U  reg_nbr,
     70                                              CPU_INT16U *perr)
     71          {
   \                     App_MB_RdNRegsHook: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0004             MOVS     R4,R0
     72          //    /***********************************************
     73          //    * ÃèÊö£º ÃÜÂëÈ·ÈÏ£¬Í¨Ñ¶Ç°ÏÈ½«MB_DATA_ACC_PASSWORDÐ´Èëreg0
     74          //    */
     75          //    if ( Ctrl.Para.dat.Password != MB_DATA_ACC_PASSWORD ) {
     76          //        *perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
     77          //        return 1;
     78          //    }
     79          //    
     80          //    /***********************************************
     81          //    * ÃèÊö£º ·Ç¸¡µã¼Ä´æÆ÷
     82          //    */
     83          //    if (reg_base < MODBUS_CFG_FP_START_IX) { 
     84          //        CPU_INT16U *preg        = (CPU_INT16U *)&Ctrl.Para.buf2[0];
     85          //        CPU_INT16U  reg         = reg_base + reg_nbr;
     86          //        CPU_INT16U  reg_max     = sizeof(Ctrl) / 2;
     87          //        /***********************************************
     88          //        * ÃèÊö£º »ñÈ¡Öµ
     89          //        */
     90          //        if ( reg < reg_max ) {
     91          //            preg    += reg_base;
     92          //            
     93          //            CPU_SR_ALLOC();
     94          //            CPU_CRITICAL_ENTER();
     95          //            
     96          //            for ( int i = 0; i < reg_nbr; i++,preg++ ) {
     97          //                prx_data[i]   = SW_INT16U(*preg);
     98          //            }
     99          //            CPU_CRITICAL_EXIT();
    100          //            *perr = MODBUS_ERR_NONE;
    101          //            return TRUE;
    102          //        } else {
    103          //        }
    104          //    /***********************************************
    105          //    * ÃèÊö£º ¸¡µã¼Ä´æÆ÷
    106          //    */
    107          //    } else {
    108          //        CPU_INT16U  *preg       = (CPU_INT16U *)&Ctrl.Sen.Para.buf2[0];
    109          //        CPU_INT16U  reg         = reg_base + reg_nbr - MODBUS_CFG_FP_START_IX;
    110          //        CPU_INT16U  reg_max     = sizeof(UnionSenPara) / 2;
    111          //        /***********************************************
    112          //        * ÃèÊö£º »ñÈ¡Öµ
    113          //        */
    114          //        if ( reg < reg_max ) {
    115          //            preg    += reg_base - MODBUS_CFG_FP_START_IX;
    116          //            CPU_SR_ALLOC();
    117          //            CPU_CRITICAL_ENTER();
    118          //            
    119          //            for ( int i = 0; i < reg_nbr; i++,preg++ ) {
    120          //                prx_data[i]   = SW_INT16U(*preg);
    121          //            }
    122          //            
    123          //            CPU_CRITICAL_EXIT();
    124          //            *perr = MODBUS_ERR_NONE;
    125          //            return TRUE;
    126          //        } else {
    127          //        }
    128          //    }
    129          //    
    130              return 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBC10             POP      {R4}
   \   00000008   0x4770             BX       LR               ;; return
    131          }
    132          
    133          /*$PAGE*/
    134          /*
    135          ************************************************************************************************************************
    136          *                                             CLEAR ALL APPLICATION HOOKS
    137          *
    138          * Description: Clear ALL application hooks.
    139          *
    140          * Arguments  : none.
    141          *
    142          * Note(s)    : none
    143          ************************************************************************************************************************
    144          */

   \                                 In section .text, align 2, keep-with-next
    145          CPU_INT08U  App_MB_WrNRegsHook    ( CPU_INT16U reg_base,
    146                                              CPU_INT16U *prx_data,
    147                                              CPU_INT16U reg_nbr,
    148                                              CPU_INT16U  *perr)
    149          {
   \                     App_MB_WrNRegsHook: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0004             MOVS     R4,R0
    150              /***********************************************
    151              * ÃèÊö£º ÃÜÂëÈ·ÈÏ£¬Í¨Ñ¶Ç°ÏÈ½«MB_DATA_ACC_PASSWORDÐ´Èëreg0
    152              */
    153          //    if ( ( Ctrl.Para.dat.Password == MB_DATA_ACC_PASSWORD ) ||
    154          //         ( ( reg_base == 0 ) && ( *prx_data == MB_DATA_ACC_PASSWORD ) ) ) {
    155          //    } else {
    156          //        *perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
    157          //        return 1;
    158          //    }
    159              
    160          //    /***********************************************
    161          //    * ÃèÊö£º ·Ç¸¡µã¼Ä´æÆ÷
    162          //    */
    163          //    if (reg_base < MODBUS_CFG_FP_START_IX) { 
    164          //        CPU_INT16U *preg        = (CPU_INT16U *)&Ctrl.Para.buf2[0];
    165          //        CPU_INT16U  reg         = reg_base + reg_nbr;
    166          //        /***********************************************
    167          //        * ÃèÊö£º Ð´ÈëÖµ
    168          //        */
    169          //        if ( reg < sizeof(Ctrl) / 2 ) {
    170          //            preg    += reg_base;
    171          //            CPU_SR_ALLOC();
    172          //            CPU_CRITICAL_ENTER();
    173          //            for ( int i = 0; i < reg_nbr; i++,preg++ ) {
    174          //                *preg = SW_INT16U(prx_data[i]);
    175          //            }
    176          //            CPU_CRITICAL_EXIT();
    177          //            
    178          //            /***********************************************
    179          //            * ÃèÊö£º Ð´ÈëÏÔÊ¾Ä£¿éÐ£×¼²ÎÊý
    180          //            */
    181          //            CPU_INT16U __packed *pe     = &Ctrl.Para.buf2[127];
    182          //            CPU_INT16U __packed *pe2    = &Ctrl.Sen.Para.buf2[127];
    183          //            //CPU_INT16U __packed *pe3    = (INT16U *)&Ctrl.Tab.buf2;
    184                      
    185          //            // ´«¸ÐÆ÷Ä£¿é²ÎÊý
    186          //            if ( ( preg >= Ctrl.Sen.Para.buf2 ) &&
    187          //               ( ( preg <= ( pe2 - reg_nbr * 2 ) ) ) ) {
    188          //                INT16U addr = 2 * ( preg - Ctrl.Sen.Para.buf2 );
    189          //                //INT08U *pb  = (INT08U *)&Ctrl.Sen.Para.buf2 + addr;
    190          //                
    191          //                //if ( !App_SetParaToSensor(1, 0, NULL, 256) ) {
    192          //                if ( !App_SetParaToSensor(1, addr, NULL, addr + reg_nbr<<1) ) {
    193          //                    *perr = MODBUS_ERR_ILLEGAL_DATA_VAL;
    194          //                    return TRUE;
    195          //                }
    196          //            // ²âÁ¿Ä£¿é²ÎÊý
    197          //            } else if ( ( preg >= Ctrl.Para.buf2 ) &&
    198          //               ( ( preg <= ( pe - reg_nbr * 2 ) ) ) ) {
    199          //                INT16U addr = 2 * ( preg - Ctrl.Para.buf2 );
    200          //                //INT08U *pb  = (INT08U *)&Ctrl.Para.buf2 + addr;
    201          //                //if ( !App_SetParaToSensor(2, 0, NULL, 256) ) {
    202          //                if ( !App_SetParaToSensor(2, addr, NULL, addr + reg_nbr<<1) ) {
    203          //                    *perr = MODBUS_ERR_ILLEGAL_DATA_VAL;
    204          //                    return TRUE;
    205          //                }
    206                      // ÈÝ»ý±í
    207          //            }// else if ( ( preg > (INT16U *)&Ctrl.Tab ) &&
    208                      //    ( ( preg <= ( pe3 - reg_nbr * 2 ) ) ) ) {
    209                      //    
    210                      //    INT16U addr = (preg - (INT16U *)&Ctrl.Tab)*2;
    211                      //    INT08U *pb  = (INT08U *)&Ctrl.Tab + addr;
    212                      //    //addr    += 256;
    213                      //    
    214                      //    if ( !App_SetParaToSensor(2, 256 + addr, NULL, addr + reg_nbr<<1) ) {
    215                      //        *perr = MODBUS_ERR_ILLEGAL_DATA_VAL;
    216                      //        return TRUE;
    217                      //    }
    218                      //}
    219                      
    220          //            /***********************************************
    221          //            * ÃèÊö£º 
    222          //            */
    223          //            *perr = MODBUS_ERR_NONE;
    224          //            return TRUE;
    225          //        } else {
    226          //            //reg_val = 0;
    227          //            //*perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
    228          //        }
    229          //    /***********************************************
    230          //    * ÃèÊö£º ¸¡µã¼Ä´æÆ÷
    231          //    */
    232          //    } else {
    233          //        CPU_INT16U  *preg       = (CPU_INT16U *)&Ctrl.Sen.Para.buf2[0];
    234          //        CPU_INT16U  reg         = reg_base + reg_nbr - MODBUS_CFG_FP_START_IX;
    235          //        
    236          //        /***********************************************
    237          //        * ÃèÊö£º »ñÈ¡Öµ
    238          //        */
    239          //        if ( reg < sizeof(UnionSenPara) / 2 ) {
    240          //            preg    += reg_base - MODBUS_CFG_FP_START_IX;
    241          //            CPU_SR_ALLOC();
    242          //            CPU_CRITICAL_ENTER();
    243          //            memcpy((CPU_INT16U *)&preg[reg_base], (CPU_INT16U *)&prx_data[0], reg_nbr);
    244          //            CPU_CRITICAL_EXIT();
    245          //            *perr = MODBUS_ERR_NONE;
    246          //            return TRUE;
    247          //        } else {
    248          //            //reg_val = 0;
    249          //            //*perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
    250          //        }
    251          //    }
    252          //    
    253              return 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBC10             POP      {R4}
   \   00000008   0x4770             BX       LR               ;; return
    254          }
    255          
    256          /*$PAGE*/
    257          /*
    258          ************************************************************************************************************************
    259          *                                                APPLICATION TICK HOOK
    260          *
    261          * Description: This function is called every tick.
    262          *
    263          * Arguments  : none
    264          *
    265          * Note(s)    : 1) This function is assumed to be called from the Tick ISR.
    266          ************************************************************************************************************************
    267          */
    268          

   \                                 In section .text, align 2, keep-with-next
    269          void  App_MB_TimeTickHook (void)
    270          {
    271          
    272          }
   \                     App_MB_TimeTickHook: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   App_MB_RdNRegsHook
       0   App_MB_SetAllHooks
       0   App_MB_TimeTickHook
       4   App_MB_WrNRegsHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  App_MB_RdNRegsHook
       2  App_MB_SetAllHooks
       2  App_MB_TimeTickHook
      10  App_MB_WrNRegsHook

 
 24 bytes in section .text
 
 24 bytes of CODE memory

Errors: none
Warnings: none
