###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uCOS-III\Source\os_msg.c
#    Command line =  
#        "F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uCOS-III\Source\os_msg.c" -D
#        RELEASE -lCN "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\os_msg.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\os_msg.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\uCOS-III\Source\os_msg.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2016; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                              MESSAGE HANDLING SERVICES
     10          *
     11          * File    : OS_MSG.C
     12          * By      : JJL
     13          * Version : V3.06.00
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your
     20          *           application/product.   We provide ALL the source code for your convenience and to help you
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can find our product's user manual, API reference, release notes and
     30          *           more information at https://doc.micrium.com.
     31          *           You can contact us at www.micrium.com.
     32          ************************************************************************************************************************
     33          */
     34          
     35          #define  MICRIUM_SOURCE
     36          #include "os.h"
     37          
     38          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     39          const  CPU_CHAR  *os_msg__c = "$Id: $";
     40          #endif
     41          
     42          
     43          #if (OS_MSG_EN == DEF_ENABLED)
     44          
     45          /*
     46          ************************************************************************************************************************
     47          *                                            INITIALIZE THE POOL OF 'OS_MSG'
     48          *
     49          * Description: This function is called by OSInit() to initialize the free list of OS_MSGs.
     50          *
     51          * Argument(s): p_err     is a pointer to a variable that will contain an error code returned by this function.
     52          *
     53          *                            OS_ERR_MSG_POOL_NULL_PTR
     54          *                            OS_ERR_MSG_POOL_EMPTY
     55          *                            OS_ERR_NONE
     56          *
     57          * Returns    : none
     58          *
     59          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
     60          ************************************************************************************************************************
     61          */
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void  OS_MsgPoolInit (OS_ERR  *p_err)
     64          {
   \                     OS_MsgPoolInit: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     65              OS_MSG      *p_msg1;
     66              OS_MSG      *p_msg2;
     67              OS_MSG_QTY   i;
     68              OS_MSG_QTY   loops;
     69          
     70          
     71          #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
     72              if (OSCfg_MsgPoolBasePtr == DEF_NULL) {
   \   00000002   0x....             LDR.N    R5,??DataTable3
   \   00000004   0x682D             LDR      R5,[R5, #+0]
   \   00000006   0x2D00             CMP      R5,#+0
   \   00000008   0xD103             BNE.N    ??OS_MsgPoolInit_0
     73                 *p_err = OS_ERR_MSG_POOL_NULL_PTR;
   \   0000000A   0xF245 0x751E      MOVW     R5,#+22302
   \   0000000E   0x8005             STRH     R5,[R0, #+0]
     74                  return;
   \   00000010   0xE03B             B.N      ??OS_MsgPoolInit_1
     75              }
     76              if (OSCfg_MsgPoolSize == 0u) {
   \                     ??OS_MsgPoolInit_0: (+1)
   \   00000012   0x....             LDR.N    R5,??DataTable3_1
   \   00000014   0x882D             LDRH     R5,[R5, #+0]
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD103             BNE.N    ??OS_MsgPoolInit_2
     77                 *p_err = OS_ERR_MSG_POOL_EMPTY;
   \   0000001A   0xF245 0x751D      MOVW     R5,#+22301
   \   0000001E   0x8005             STRH     R5,[R0, #+0]
     78                  return;
   \   00000020   0xE033             B.N      ??OS_MsgPoolInit_1
     79              }
     80          #endif
     81          
     82              p_msg1 = OSCfg_MsgPoolBasePtr;
   \                     ??OS_MsgPoolInit_2: (+1)
   \   00000022   0x....             LDR.N    R5,??DataTable3
   \   00000024   0x682D             LDR      R5,[R5, #+0]
   \   00000026   0x0029             MOVS     R1,R5
     83              p_msg2 = OSCfg_MsgPoolBasePtr;
   \   00000028   0x....             LDR.N    R5,??DataTable3
   \   0000002A   0x682D             LDR      R5,[R5, #+0]
   \   0000002C   0x002A             MOVS     R2,R5
     84              p_msg2++;
   \   0000002E   0x3210             ADDS     R2,R2,#+16
     85              loops  = OSCfg_MsgPoolSize - 1u;
   \   00000030   0x....             LDR.N    R5,??DataTable3_1
   \   00000032   0x882D             LDRH     R5,[R5, #+0]
   \   00000034   0x1E6D             SUBS     R5,R5,#+1
   \   00000036   0x002C             MOVS     R4,R5
     86              for (i = 0u; i < loops; i++) {                              /* Init. list of free OS_MSGs                           */
   \   00000038   0x2500             MOVS     R5,#+0
   \   0000003A   0x002B             MOVS     R3,R5
   \                     ??OS_MsgPoolInit_3: (+1)
   \   0000003C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000003E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   0x42A3             CMP      R3,R4
   \   00000042   0xD20A             BCS.N    ??OS_MsgPoolInit_4
     87                  p_msg1->NextPtr = p_msg2;
   \   00000044   0x600A             STR      R2,[R1, #+0]
     88                  p_msg1->MsgPtr  = DEF_NULL;
   \   00000046   0x2500             MOVS     R5,#+0
   \   00000048   0x604D             STR      R5,[R1, #+4]
     89                  p_msg1->MsgSize = 0u;
   \   0000004A   0x2500             MOVS     R5,#+0
   \   0000004C   0x810D             STRH     R5,[R1, #+8]
     90          #if (OS_CFG_TS_EN == DEF_ENABLED)
     91                  p_msg1->MsgTS   = 0u;
   \   0000004E   0x2500             MOVS     R5,#+0
   \   00000050   0x60CD             STR      R5,[R1, #+12]
     92          #endif
     93                  p_msg1++;
   \   00000052   0x3110             ADDS     R1,R1,#+16
     94                  p_msg2++;
   \   00000054   0x3210             ADDS     R2,R2,#+16
     95              }
   \   00000056   0x1C5B             ADDS     R3,R3,#+1
   \   00000058   0xE7F0             B.N      ??OS_MsgPoolInit_3
     96              p_msg1->NextPtr = DEF_NULL;                                 /* Last OS_MSG                                          */
   \                     ??OS_MsgPoolInit_4: (+1)
   \   0000005A   0x2500             MOVS     R5,#+0
   \   0000005C   0x600D             STR      R5,[R1, #+0]
     97              p_msg1->MsgPtr  = DEF_NULL;
   \   0000005E   0x2500             MOVS     R5,#+0
   \   00000060   0x604D             STR      R5,[R1, #+4]
     98              p_msg1->MsgSize = 0u;
   \   00000062   0x2500             MOVS     R5,#+0
   \   00000064   0x810D             STRH     R5,[R1, #+8]
     99          #if (OS_CFG_TS_EN == DEF_ENABLED)
    100              p_msg1->MsgTS   = 0u;
   \   00000066   0x2500             MOVS     R5,#+0
   \   00000068   0x60CD             STR      R5,[R1, #+12]
    101          #endif
    102          
    103              OSMsgPool.NextPtr    = OSCfg_MsgPoolBasePtr;
   \   0000006A   0x....             LDR.N    R5,??DataTable3
   \   0000006C   0x682D             LDR      R5,[R5, #+0]
   \   0000006E   0x....             LDR.N    R6,??DataTable3_2
   \   00000070   0x6035             STR      R5,[R6, #+0]
    104              OSMsgPool.NbrFree    = OSCfg_MsgPoolSize;
   \   00000072   0x....             LDR.N    R5,??DataTable3_1
   \   00000074   0x882D             LDRH     R5,[R5, #+0]
   \   00000076   0x....             LDR.N    R6,??DataTable3_2
   \   00000078   0x80B5             STRH     R5,[R6, #+4]
    105              OSMsgPool.NbrUsed    = 0u;
   \   0000007A   0x2500             MOVS     R5,#+0
   \   0000007C   0x....             LDR.N    R6,??DataTable3_2
   \   0000007E   0x80F5             STRH     R5,[R6, #+6]
    106          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    107              OSMsgPool.NbrUsedMax = 0u;
   \   00000080   0x2500             MOVS     R5,#+0
   \   00000082   0x....             LDR.N    R6,??DataTable3_2
   \   00000084   0x8135             STRH     R5,[R6, #+8]
    108          #endif
    109             *p_err                =  OS_ERR_NONE;
   \   00000086   0x2500             MOVS     R5,#+0
   \   00000088   0x8005             STRH     R5,[R0, #+0]
    110          }
   \                     ??OS_MsgPoolInit_1: (+1)
   \   0000008A   0xBC70             POP      {R4-R6}
   \   0000008C   0x4770             BX       LR               ;; return
    111          
    112          
    113          /*
    114          ************************************************************************************************************************
    115          *                                        RELEASE ALL MESSAGE IN MESSAGE QUEUE
    116          *
    117          * Description: This function returns all the messages in a message queue to the free list.
    118          *
    119          * Arguments  : p_msg_q       is a pointer to the OS_MSG_Q structure containing messages to free.
    120          *              -------
    121          *
    122          * Returns    : the number of OS_MSGs returned to the free list
    123          *
    124          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    125          ************************************************************************************************************************
    126          */
    127          

   \                                 In section .text, align 2, keep-with-next
    128          OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
    129          {
   \                     OS_MsgQFreeAll: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
    130              OS_MSG      *p_msg;
    131              OS_MSG_QTY   qty;
    132          
    133          
    134          
    135              qty = p_msg_q->NbrEntries;                                  /* Get the number of OS_MSGs being freed                */
   \   00000004   0x894B             LDRH     R3,[R1, #+10]
   \   00000006   0x0018             MOVS     R0,R3
    136              if (p_msg_q->NbrEntries > 0u) {
   \   00000008   0x894B             LDRH     R3,[R1, #+10]
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD01B             BEQ.N    ??OS_MsgQFreeAll_0
    137                  p_msg                   = p_msg_q->InPtr;               /* Point to end of message chain                        */
   \   0000000E   0x680B             LDR      R3,[R1, #+0]
   \   00000010   0x001A             MOVS     R2,R3
    138                  p_msg->NextPtr          = OSMsgPool.NextPtr;
   \   00000012   0x....             LDR.N    R3,??DataTable3_2
   \   00000014   0x681B             LDR      R3,[R3, #+0]
   \   00000016   0x6013             STR      R3,[R2, #+0]
    139                  OSMsgPool.NextPtr       = p_msg_q->OutPtr;              /* Point to beginning of message chain                  */
   \   00000018   0x684B             LDR      R3,[R1, #+4]
   \   0000001A   0x....             LDR.N    R4,??DataTable3_2
   \   0000001C   0x6023             STR      R3,[R4, #+0]
    140                  OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;          /* Update statistics for free list of messages          */
   \   0000001E   0x....             LDR.N    R3,??DataTable3_2
   \   00000020   0x88DB             LDRH     R3,[R3, #+6]
   \   00000022   0x894C             LDRH     R4,[R1, #+10]
   \   00000024   0x1B1B             SUBS     R3,R3,R4
   \   00000026   0x....             LDR.N    R4,??DataTable3_2
   \   00000028   0x80E3             STRH     R3,[R4, #+6]
    141                  OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
   \   0000002A   0x....             LDR.N    R3,??DataTable3_2
   \   0000002C   0x889B             LDRH     R3,[R3, #+4]
   \   0000002E   0x894C             LDRH     R4,[R1, #+10]
   \   00000030   0x18E3             ADDS     R3,R4,R3
   \   00000032   0x....             LDR.N    R4,??DataTable3_2
   \   00000034   0x80A3             STRH     R3,[R4, #+4]
    142                  p_msg_q->NbrEntries     = 0u;                           /* Flush the message queue                              */
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x814B             STRH     R3,[R1, #+10]
    143          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    144                  p_msg_q->NbrEntriesMax  = 0u;
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x818B             STRH     R3,[R1, #+12]
    145          #endif
    146                  p_msg_q->InPtr          = DEF_NULL;
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0x600B             STR      R3,[R1, #+0]
    147                  p_msg_q->OutPtr         = DEF_NULL;
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x604B             STR      R3,[R1, #+4]
    148              }
    149              return (qty);
   \                     ??OS_MsgQFreeAll_0: (+1)
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0xBC10             POP      {R4}
   \   0000004A   0x4770             BX       LR               ;; return
    150          }
    151          
    152          
    153          /*
    154          ************************************************************************************************************************
    155          *                                               INITIALIZE A MESSAGE QUEUE
    156          *
    157          * Description: This function is called to initialize a message queue
    158          *
    159          * Arguments  : p_msg_q      is a pointer to the message queue to initialize
    160          *              -------
    161          *
    162          *              size          is the maximum number of entries that a message queue can have.
    163          *
    164          * Returns    : none
    165          *
    166          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    167          ************************************************************************************************************************
    168          */
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
    171                             OS_MSG_QTY   size)
    172          {
    173              p_msg_q->NbrEntriesSize = size;
   \                     OS_MsgQInit: (+1)
   \   00000000   0x8101             STRH     R1,[R0, #+8]
    174              p_msg_q->NbrEntries     = 0u;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x8142             STRH     R2,[R0, #+10]
    175          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    176              p_msg_q->NbrEntriesMax  = 0u;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x8182             STRH     R2,[R0, #+12]
    177          #endif
    178              p_msg_q->InPtr          = DEF_NULL;
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x6002             STR      R2,[R0, #+0]
    179              p_msg_q->OutPtr         = DEF_NULL;
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x6042             STR      R2,[R0, #+4]
    180          }
   \   00000012   0x4770             BX       LR               ;; return
    181          
    182          
    183          /*
    184          ************************************************************************************************************************
    185          *                                           RETRIEVE MESSAGE FROM MESSAGE QUEUE
    186          *
    187          * Description: This function retrieves a message from a message queue
    188          *
    189          * Arguments  : p_msg_q     is a pointer to the message queue where we want to extract the message from
    190          *              -------
    191          *
    192          *              p_msg_size  is a pointer to where the size (in bytes) of the message will be placed
    193          *
    194          *              p_ts        is a pointer to where the time stamp will be placed
    195          *
    196          *              p_err       is a pointer to an error code that will be returned from this call.
    197          *
    198          *                              OS_ERR_Q_EMPTY
    199          *                              OS_ERR_NONE
    200          *
    201          * Returns    : The message (a pointer)
    202          *
    203          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    204          ************************************************************************************************************************
    205          */
    206          

   \                                 In section .text, align 2, keep-with-next
    207          void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
    208                             OS_MSG_SIZE  *p_msg_size,
    209                             CPU_TS       *p_ts,
    210                             OS_ERR       *p_err)
    211          {
   \                     OS_MsgQGet: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x0004             MOVS     R4,R0
    212              OS_MSG  *p_msg;
    213              void    *p_void;
    214          
    215          
    216          #if (OS_CFG_TS_EN == DEF_DISABLED)
    217              (void)p_ts;                                                 /* Prevent compiler warning for not using 'ts'          */
    218          #endif
    219          
    220              if (p_msg_q->NbrEntries == 0u) {                            /* Is the queue empty?                                  */
   \   00000004   0x8960             LDRH     R0,[R4, #+10]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD10A             BNE.N    ??OS_MsgQGet_0
    221                 *p_msg_size = 0u;                                        /* Yes                                                  */
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
    222          #if (OS_CFG_TS_EN == DEF_ENABLED)
    223                  if (p_ts != DEF_NULL) {
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD001             BEQ.N    ??OS_MsgQGet_1
    224                     *p_ts = 0u;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6010             STR      R0,[R2, #+0]
    225                  }
    226          #endif
    227                 *p_err = OS_ERR_Q_EMPTY;
   \                     ??OS_MsgQGet_1: (+1)
   \   00000016   0xF246 0x5092      MOVW     R0,#+26002
   \   0000001A   0x8018             STRH     R0,[R3, #+0]
    228                  return (DEF_NULL);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE028             B.N      ??OS_MsgQGet_2
    229              }
    230          
    231              p_msg           = p_msg_q->OutPtr;                          /* No, get the next message to extract from the queue   */
   \                     ??OS_MsgQGet_0: (+1)
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x0005             MOVS     R5,R0
    232              p_void          = p_msg->MsgPtr;
   \   00000024   0x6868             LDR      R0,[R5, #+4]
   \   00000026   0x0006             MOVS     R6,R0
    233             *p_msg_size      = p_msg->MsgSize;
   \   00000028   0x8928             LDRH     R0,[R5, #+8]
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
    234          #if (OS_CFG_TS_EN == DEF_ENABLED)
    235              if (p_ts != DEF_NULL) {
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD001             BEQ.N    ??OS_MsgQGet_3
    236                 *p_ts = p_msg->MsgTS;
   \   00000030   0x68E8             LDR      R0,[R5, #+12]
   \   00000032   0x6010             STR      R0,[R2, #+0]
    237              }
    238          #endif
    239          
    240              p_msg_q->OutPtr = p_msg->NextPtr;                           /* Point to next message to extract                     */
   \                     ??OS_MsgQGet_3: (+1)
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x6060             STR      R0,[R4, #+4]
    241          
    242              if (p_msg_q->OutPtr == DEF_NULL) {                          /* Are there any more messages in the queue?            */
   \   00000038   0x6860             LDR      R0,[R4, #+4]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD104             BNE.N    ??OS_MsgQGet_4
    243                  p_msg_q->InPtr      = DEF_NULL;                         /* No                                                   */
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x6020             STR      R0,[R4, #+0]
    244                  p_msg_q->NbrEntries = 0u;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x8160             STRH     R0,[R4, #+10]
   \   00000046   0xE002             B.N      ??OS_MsgQGet_5
    245              } else {
    246                  p_msg_q->NbrEntries--;                                  /* Yes, One less message in the queue                   */
   \                     ??OS_MsgQGet_4: (+1)
   \   00000048   0x8960             LDRH     R0,[R4, #+10]
   \   0000004A   0x1E40             SUBS     R0,R0,#+1
   \   0000004C   0x8160             STRH     R0,[R4, #+10]
    247              }
    248          
    249              p_msg->NextPtr    = OSMsgPool.NextPtr;                      /* Return message control block to free list            */
   \                     ??OS_MsgQGet_5: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable3_2
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x6028             STR      R0,[R5, #+0]
    250              OSMsgPool.NextPtr = p_msg;
   \   00000054   0x....             LDR.N    R0,??DataTable3_2
   \   00000056   0x6005             STR      R5,[R0, #+0]
    251              OSMsgPool.NbrFree++;
   \   00000058   0x....             LDR.N    R0,??DataTable3_2
   \   0000005A   0x8880             LDRH     R0,[R0, #+4]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x....             LDR.N    R7,??DataTable3_2
   \   00000060   0x80B8             STRH     R0,[R7, #+4]
    252              OSMsgPool.NbrUsed--;
   \   00000062   0x....             LDR.N    R0,??DataTable3_2
   \   00000064   0x88C0             LDRH     R0,[R0, #+6]
   \   00000066   0x1E40             SUBS     R0,R0,#+1
   \   00000068   0x....             LDR.N    R7,??DataTable3_2
   \   0000006A   0x80F8             STRH     R0,[R7, #+6]
    253          
    254             *p_err             = OS_ERR_NONE;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x8018             STRH     R0,[R3, #+0]
    255              return (p_void);
   \   00000070   0x0030             MOVS     R0,R6
   \                     ??OS_MsgQGet_2: (+1)
   \   00000072   0xBCF0             POP      {R4-R7}
   \   00000074   0x4770             BX       LR               ;; return
    256          }
    257          
    258          
    259          /*
    260          ************************************************************************************************************************
    261          *                                           DEPOSIT MESSAGE IN MESSAGE QUEUE
    262          *
    263          * Description: This function places a message in a message queue
    264          *
    265          * Arguments  : p_msg_q     is a pointer to the OS_TCB of the task to post the message to
    266          *              -------
    267          *
    268          *              p_void      is a pointer to the message to send.
    269          *
    270          *              msg_size    is the size of the message (in bytes)
    271          *
    272          *              opt         specifies whether the message will be posted in FIFO or LIFO order
    273          *
    274          *                              OS_OPT_POST_FIFO
    275          *                              OS_OPT_POST_LIFO
    276          *
    277          *              ts          is a timestamp as to when the message was posted
    278          *
    279          *              p_err       is a pointer to a variable that will contain an error code returned by this function.
    280          *
    281          *                              OS_ERR_Q_MAX           if the queue is full
    282          *                              OS_ERR_MSG_POOL_EMPTY  if we no longer have any OS_MSG to use
    283          *                              OS_ERR_NONE            the message was deposited in the queue
    284          *
    285          * Returns    : none
    286          *
    287          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    288          ************************************************************************************************************************
    289          */
    290          

   \                                 In section .text, align 2, keep-with-next
    291          void  OS_MsgQPut (OS_MSG_Q     *p_msg_q,
    292                            void         *p_void,
    293                            OS_MSG_SIZE   msg_size,
    294                            OS_OPT        opt,
    295                            CPU_TS        ts,
    296                            OS_ERR       *p_err)
    297          {
   \                     OS_MsgQPut: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x9C05             LDR      R4,[SP, #+20]
   \   00000004   0x9D06             LDR      R5,[SP, #+24]
    298              OS_MSG  *p_msg;
    299              OS_MSG  *p_msg_in;
    300          
    301          
    302          #if (OS_CFG_TS_EN == DEF_DISABLED)
    303              (void)ts;                                                   /* Prevent compiler warning for not using 'ts'          */
    304          #endif
    305          
    306              if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
   \   00000006   0xF8B0 0xC00A      LDRH     R12,[R0, #+10]
   \   0000000A   0xF8B0 0xE008      LDRH     LR,[R0, #+8]
   \   0000000E   0x45F4             CMP      R12,LR
   \   00000010   0xD304             BCC.N    ??OS_MsgQPut_0
    307                 *p_err = OS_ERR_Q_MAX;                                   /* Message queue cannot accept any more messages        */
   \   00000012   0xF246 0x5C93      MOVW     R12,#+26003
   \   00000016   0xF8A5 0xC000      STRH     R12,[R5, #+0]
    308                  return;
   \   0000001A   0xE075             B.N      ??OS_MsgQPut_1
    309              }
    310          
    311              if (OSMsgPool.NbrFree == 0u) {
   \                     ??OS_MsgQPut_0: (+1)
   \   0000001C   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   00000020   0xF8BC 0xC004      LDRH     R12,[R12, #+4]
   \   00000024   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000028   0xD104             BNE.N    ??OS_MsgQPut_2
    312                 *p_err = OS_ERR_MSG_POOL_EMPTY;                          /* No more OS_MSG to use                                */
   \   0000002A   0xF245 0x7C1D      MOVW     R12,#+22301
   \   0000002E   0xF8A5 0xC000      STRH     R12,[R5, #+0]
    313                  return;
   \   00000032   0xE069             B.N      ??OS_MsgQPut_1
    314              }
    315          
    316              p_msg = OSMsgPool.NextPtr;                                  /* Remove message control block from free list          */
   \                     ??OS_MsgQPut_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   00000038   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   0000003C   0x4666             MOV      R6,R12
    317              OSMsgPool.NextPtr = p_msg->NextPtr;
   \   0000003E   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \   00000042   0x.... 0x....      LDR.W    LR,??DataTable3_2
   \   00000046   0xF8CE 0xC000      STR      R12,[LR, #+0]
    318              OSMsgPool.NbrFree--;
   \   0000004A   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   0000004E   0xF8BC 0xC004      LDRH     R12,[R12, #+4]
   \   00000052   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000056   0x.... 0x....      LDR.W    LR,??DataTable3_2
   \   0000005A   0xF8AE 0xC004      STRH     R12,[LR, #+4]
    319              OSMsgPool.NbrUsed++;
   \   0000005E   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   00000062   0xF8BC 0xC006      LDRH     R12,[R12, #+6]
   \   00000066   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \   0000006A   0x.... 0x....      LDR.W    LR,??DataTable3_2
   \   0000006E   0xF8AE 0xC006      STRH     R12,[LR, #+6]
    320          
    321          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    322              if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
   \   00000072   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   00000076   0xF8BC 0xC008      LDRH     R12,[R12, #+8]
   \   0000007A   0x.... 0x....      LDR.W    LR,??DataTable3_2
   \   0000007E   0xF8BE 0xE006      LDRH     LR,[LR, #+6]
   \   00000082   0x45F4             CMP      R12,LR
   \   00000084   0xD207             BCS.N    ??OS_MsgQPut_3
    323                  OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
   \   00000086   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   0000008A   0xF8BC 0xC006      LDRH     R12,[R12, #+6]
   \   0000008E   0x.... 0x....      LDR.W    LR,??DataTable3_2
   \   00000092   0xF8AE 0xC008      STRH     R12,[LR, #+8]
    324              }
    325          #endif
    326          
    327              if (p_msg_q->NbrEntries == 0u) {                            /* Is this first message placed in the queue?           */
   \                     ??OS_MsgQPut_3: (+1)
   \   00000096   0xF8B0 0xC00A      LDRH     R12,[R0, #+10]
   \   0000009A   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000009E   0xD10A             BNE.N    ??OS_MsgQPut_4
    328                  p_msg_q->InPtr         = p_msg;                         /* Yes                                                  */
   \   000000A0   0x6006             STR      R6,[R0, #+0]
    329                  p_msg_q->OutPtr        = p_msg;
   \   000000A2   0x6046             STR      R6,[R0, #+4]
    330                  p_msg_q->NbrEntries    = 1u;
   \   000000A4   0xF05F 0x0C01      MOVS     R12,#+1
   \   000000A8   0xF8A0 0xC00A      STRH     R12,[R0, #+10]
    331                  p_msg->NextPtr         = DEF_NULL;
   \   000000AC   0xF05F 0x0C00      MOVS     R12,#+0
   \   000000B0   0xF8C6 0xC000      STR      R12,[R6, #+0]
   \   000000B4   0xE017             B.N      ??OS_MsgQPut_5
    332              } else {                                                    /* No                                                   */
    333                  if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) {     /* Is it FIFO or LIFO?                                  */
   \                     ??OS_MsgQPut_4: (+1)
   \   000000B6   0xEA5F 0x6CC3      LSLS     R12,R3,#+27
   \   000000BA   0xD409             BMI.N    ??OS_MsgQPut_6
    334                      p_msg_in           = p_msg_q->InPtr;                /* FIFO, add to the head                                */
   \   000000BC   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   000000C0   0x4667             MOV      R7,R12
    335                      p_msg_in->NextPtr  = p_msg;
   \   000000C2   0x603E             STR      R6,[R7, #+0]
    336                      p_msg_q->InPtr     = p_msg;
   \   000000C4   0x6006             STR      R6,[R0, #+0]
    337                      p_msg->NextPtr     = DEF_NULL;
   \   000000C6   0xF05F 0x0C00      MOVS     R12,#+0
   \   000000CA   0xF8C6 0xC000      STR      R12,[R6, #+0]
   \   000000CE   0xE004             B.N      ??OS_MsgQPut_7
    338                  } else {
    339                      p_msg->NextPtr     = p_msg_q->OutPtr;               /* LIFO, add to the tail                                */
   \                     ??OS_MsgQPut_6: (+1)
   \   000000D0   0xF8D0 0xC004      LDR      R12,[R0, #+4]
   \   000000D4   0xF8C6 0xC000      STR      R12,[R6, #+0]
    340                      p_msg_q->OutPtr    = p_msg;
   \   000000D8   0x6046             STR      R6,[R0, #+4]
    341                  }
    342                  p_msg_q->NbrEntries++;
   \                     ??OS_MsgQPut_7: (+1)
   \   000000DA   0xF8B0 0xC00A      LDRH     R12,[R0, #+10]
   \   000000DE   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \   000000E2   0xF8A0 0xC00A      STRH     R12,[R0, #+10]
    343              }
    344          
    345          #if (OS_CFG_DBG_EN == DEF_ENABLED)
    346              if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
   \                     ??OS_MsgQPut_5: (+1)
   \   000000E6   0xF8B0 0xC00C      LDRH     R12,[R0, #+12]
   \   000000EA   0xF8B0 0xE00A      LDRH     LR,[R0, #+10]
   \   000000EE   0x45F4             CMP      R12,LR
   \   000000F0   0xD203             BCS.N    ??OS_MsgQPut_8
    347                  p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
   \   000000F2   0xF8B0 0xC00A      LDRH     R12,[R0, #+10]
   \   000000F6   0xF8A0 0xC00C      STRH     R12,[R0, #+12]
    348              }
    349          #endif
    350          
    351              p_msg->MsgPtr  = p_void;                                    /* Deposit message in the message queue entry           */
   \                     ??OS_MsgQPut_8: (+1)
   \   000000FA   0x6071             STR      R1,[R6, #+4]
    352              p_msg->MsgSize = msg_size;
   \   000000FC   0x8132             STRH     R2,[R6, #+8]
    353          #if (OS_CFG_TS_EN == DEF_ENABLED)
    354              p_msg->MsgTS   = ts;
   \   000000FE   0x60F4             STR      R4,[R6, #+12]
    355          #endif
    356             *p_err          = OS_ERR_NONE;
   \   00000100   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000104   0xF8A5 0xC000      STRH     R12,[R5, #+0]
    357          }
   \                     ??OS_MsgQPut_1: (+1)
   \   00000108   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     OSCfg_MsgPoolBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     OSCfg_MsgPoolSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     OSMsgPool
    358          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   OS_MsgPoolInit
       4   OS_MsgQFreeAll
      16   OS_MsgQGet
       0   OS_MsgQInit
      20   OS_MsgQPut


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
     142  OS_MsgPoolInit
      76  OS_MsgQFreeAll
     118  OS_MsgQGet
      20  OS_MsgQInit
     266  OS_MsgQPut

 
 634 bytes in section .text
 
 634 bytes of CODE memory

Errors: none
Warnings: none
