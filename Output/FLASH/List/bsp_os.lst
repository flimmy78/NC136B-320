###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\BSP\OS\uCOS-III\bsp_os.c
#    Command line =  
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\BSP\OS\uCOS-III\bsp_os.c"
#        -D RELEASE -lCN "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\bsp_os.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\bsp_os.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\BSP\OS\uCOS-III\bsp_os.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     MICRIUM BOARD SUPPORT SUPPORT
      4          *
      5          *                          (c) Copyright 2003-2009; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                    MICRIUM BOARD SUPPORT PACKAGE
     18          *                                             OS LAYER
     19          *
     20          * Filename      : bsp_os.c
     21          * Version       : V1.00
     22          * Programmer(s) : FT
     23          *                 EHS
     24          *********************************************************************************************************
     25          */
     26          
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                             INCLUDE FILES
     31          *********************************************************************************************************
     32          */
     33          
     34          #define  BSP_OS_MODULE
     35          #include <bsp_os.h>
     36          #include <bsp.h>
     37          
     38          #if (APP_CFG_PROBE_COM_EN == DEF_ENABLED)
     39          #include <app_probe.h>
     40          #endif
     41          
     42          
     43          /*
     44          *********************************************************************************************************
     45          *                                            LOCAL DEFINES
     46          *********************************************************************************************************
     47          */
     48          
     49          
     50          /*
     51          *********************************************************************************************************
     52          *                                           LOCAL CONSTANTS
     53          *********************************************************************************************************
     54          */
     55          
     56          
     57          /*
     58          *********************************************************************************************************
     59          *                                          LOCAL DATA TYPES
     60          *********************************************************************************************************
     61          */
     62          
     63          
     64          /*
     65          *********************************************************************************************************
     66          *                                            LOCAL TABLES
     67          *********************************************************************************************************
     68          */
     69          
     70          
     71          /*
     72          *********************************************************************************************************
     73          *                                       LOCAL GLOBAL VARIABLES
     74          *********************************************************************************************************
     75          */
     76          
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                      LOCAL FUNCTION PROTOTYPES
     81          *********************************************************************************************************
     82          */
     83          
     84          
     85          /*
     86          *********************************************************************************************************
     87          *                                     LOCAL CONFIGURATION ERRORS
     88          *********************************************************************************************************
     89          */
     90          
     91          /*
     92          *********************************************************************************************************
     93          *********************************************************************************************************
     94          **                                         GLOBAL FUNCTIONS
     95          *********************************************************************************************************
     96          *********************************************************************************************************
     97          */
     98          
     99          
    100          /*
    101          *********************************************************************************************************
    102          *********************************************************************************************************
    103          **                                     BSP OS LOCKS FUNCTIONS
    104          *********************************************************************************************************
    105          *********************************************************************************************************
    106          */
    107          
    108          /*
    109          *********************************************************************************************************
    110          *********************************************************************************************************
    111          **                                     BSP OS LOCKS FUNCTIONS
    112          *********************************************************************************************************
    113          *********************************************************************************************************
    114          */
    115          
    116          /*
    117          *********************************************************************************************************
    118          *                                      BSP_OS_SemCreate()
    119          *
    120          * Description : Creates a sempahore to lock/unlock
    121          *
    122          * Argument(s) : p_sem        Pointer to a BSP_OS_SEM structure
    123          *
    124          *               sem_val      Initial value of the semaphore.
    125          *
    126          *               p_sem_name   Pointer to the semaphore name.
    127          *
    128          * Return(s)   : DEF_OK       if the semaphore was created.
    129          *               DEF_FAIL     if the sempahore could not be created.
    130          *
    131          * Caller(s)   : Application.
    132          *
    133          * Note(s)     : none.
    134          *
    135          *********************************************************************************************************
    136          */
    137          

   \                                 In section .text, align 2, keep-with-next
    138          CPU_BOOLEAN  BSP_OS_SemCreate (BSP_OS_SEM       *p_sem,
    139                                         BSP_OS_SEM_VAL    sem_val,
    140                                         CPU_CHAR         *p_sem_name)
    141          {
   \                     BSP_OS_SemCreate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    142              OS_ERR     err;
    143          
    144          
    145              OSSemCreate((OS_SEM    *)p_sem,
    146                          (CPU_CHAR  *)p_sem_name,
    147                          (OS_SEM_CTR )sem_val,
    148                          (OS_ERR    *)&err);
   \   0000000A   0x466B             MOV      R3,SP
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x0031             MOVS     R1,R6
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       OSSemCreate
    149          
    150              if (err != OS_ERR_NONE) {
   \   00000016   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD001             BEQ.N    ??BSP_OS_SemCreate_0
    151                  return (DEF_FAIL);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xE000             B.N      ??BSP_OS_SemCreate_1
    152              }
    153          
    154              return (DEF_OK);
   \                     ??BSP_OS_SemCreate_0: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemCreate_1: (+1)
   \   00000024   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    155          }
    156          
    157          
    158          /*
    159          *********************************************************************************************************
    160          *                                     BSP_OS_SemWait()
    161          *
    162          * Description : Wait on a semaphore to become available
    163          *
    164          * Argument(s) : sem          sempahore handler
    165          *
    166          *               dly_ms       delay in miliseconds to wait on the semaphore
    167          *
    168          * Return(s)   : DEF_OK       if the semaphore was acquire
    169          *               DEF_FAIL     if the sempahore could not be acquire
    170          *
    171          * Caller(s)   : Application.
    172          *
    173          * Note(s)     : none.
    174          *********************************************************************************************************
    175          */
    176          

   \                                 In section .text, align 2, keep-with-next
    177          CPU_BOOLEAN  BSP_OS_SemWait (BSP_OS_SEM  *p_sem,
    178                                       CPU_INT32U   dly_ms)
    179          {
   \                     BSP_OS_SemWait: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    180              OS_ERR      err;
    181              CPU_INT32U  dly_ticks;
    182          
    183          
    184              dly_ticks  = ((dly_ms * DEF_TIME_NBR_mS_PER_SEC) / OSCfg_TickRate_Hz);
   \   00000006   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable0
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000016   0x0006             MOVS     R6,R0
    185          
    186              OSSemPend((OS_SEM *)p_sem,
    187                        (OS_TICK )dly_ticks,
    188                        (OS_OPT  )OS_OPT_PEND_BLOCKING,
    189                        (CPU_TS  )0,
    190                        (OS_ERR *)&err);
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       OSSemPend
    191          
    192              if (err != OS_ERR_NONE) {
   \   00000028   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD001             BEQ.N    ??BSP_OS_SemWait_0
    193                 return (DEF_FAIL);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??BSP_OS_SemWait_1
    194              }
    195          
    196              return (DEF_OK);
   \                     ??BSP_OS_SemWait_0: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemWait_1: (+1)
   \   00000036   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    197          }
    198          
    199          /*
    200          *********************************************************************************************************
    201          *                                      BSP_OS_SemPost()
    202          *
    203          * Description : Post a semaphore
    204          *
    205          * Argument(s) : sem          Semaphore handler
    206          *
    207          * Return(s)   : DEF_OK     if the semaphore was posted.
    208          *               DEF_FAIL      if the sempahore could not be posted.
    209          *
    210          * Caller(s)   : Application.
    211          *
    212          * Note(s)     : none.
    213          *********************************************************************************************************
    214          */
    215          

   \                                 In section .text, align 2, keep-with-next
    216          CPU_BOOLEAN  BSP_OS_SemPost (BSP_OS_SEM *p_sem)
    217          {
   \                     BSP_OS_SemPost: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    218              OS_ERR  err;
    219          
    220          
    221              OSSemPost((OS_SEM *)p_sem,
    222                        (OS_OPT  )OS_OPT_POST_1,
    223                        (OS_ERR *)&err);
   \   00000006   0x466A             MOV      R2,SP
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       OSSemPost
    224          
    225              if (err != OS_ERR_NONE) {
   \   00000010   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD001             BEQ.N    ??BSP_OS_SemPost_0
    226                  return (DEF_FAIL);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE000             B.N      ??BSP_OS_SemPost_1
    227              }
    228          
    229              return (DEF_OK);
   \                     ??BSP_OS_SemPost_0: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemPost_1: (+1)
   \   0000001E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    230          }
    231          
    232          
    233          /*
    234          *********************************************************************************************************
    235          *********************************************************************************************************
    236          **                                     uC/OS-II TIMER FUNCTIONS
    237          *********************************************************************************************************
    238          *********************************************************************************************************
    239          */
    240          
    241          /*
    242          *********************************************************************************************************
    243          *                                    BSP_TimeDlyMs()
    244          *
    245          * Description : This function delay the exceution for specifi amount of miliseconds
    246          *
    247          * Argument(s) : dly_ms       Delay in miliseconds
    248          *
    249          * Return(s)   : none.
    250          *
    251          * Caller(s)   : Application
    252          *
    253          * Note(s)     : none.
    254          *
    255          *********************************************************************************************************
    256          */
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void   BSP_OS_TimeDly (CPU_INT32U  dly_ms)
    259          {
   \                     BSP_OS_TimeDly: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    260              CPU_INT16U  ms;
    261              CPU_INT16U  sec;
    262              OS_ERR      err;
    263          
    264          
    265              if (dly_ms > 10000u) {                                       /* Limit delays to 10 seconds.                        */
   \   00000006   0xF242 0x7011      MOVW     R0,#+10001
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD302             BCC.N    ??BSP_OS_TimeDly_0
    266                  dly_ms = 10000u;
   \   0000000E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000012   0x0004             MOVS     R4,R0
    267              }
    268          
    269              if (dly_ms >= 1000u) {
   \                     ??BSP_OS_TimeDly_0: (+1)
   \   00000014   0xF5B4 0x7F7A      CMP      R4,#+1000
   \   00000018   0xD30C             BCC.N    ??BSP_OS_TimeDly_1
    270                  ms  = dly_ms % 1000u;
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   00000022   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000026   0x0005             MOVS     R5,R0
    271                  sec = dly_ms / 1000u;
   \   00000028   0xF44F 0x707A      MOV      R0,#+1000
   \   0000002C   0xFBB4 0xF0F0      UDIV     R0,R4,R0
   \   00000030   0x0006             MOVS     R6,R0
   \   00000032   0xE003             B.N      ??BSP_OS_TimeDly_2
    272              } else {
    273                  ms  = dly_ms;
   \                     ??BSP_OS_TimeDly_1: (+1)
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x0005             MOVS     R5,R0
    274                  sec = 0u;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0006             MOVS     R6,R0
    275              }
    276          
    277          
    278              OSTimeDlyHMSM((CPU_INT16U) 0u,
    279                            (CPU_INT16U) 0u,
    280                            (CPU_INT16U) sec,
    281                            (CPU_INT32U) ms,
    282                            (OS_OPT    ) OS_OPT_TIME_HMSM_STRICT,
    283                            (OS_ERR   *)&err);
   \                     ??BSP_OS_TimeDly_2: (+1)
   \   0000003C   0xA802             ADD      R0,SP,#+8
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x002B             MOVS     R3,R5
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       OSTimeDlyHMSM
    284          }
   \   00000054   0xBD7F             POP      {R0-R6,PC}       ;; return
    285          
    286          /*
    287          *********************************************************************************************************
    288          *                                    BSP_TimeDlyMs()
    289          *
    290          * Description : This function delay the exceution for specifi amount of miliseconds
    291          *
    292          * Argument(s) : dly_ms       Delay in miliseconds
    293          *
    294          * Return(s)   : none.
    295          *
    296          * Caller(s)   : Application
    297          *
    298          * Note(s)     : none.
    299          *
    300          *********************************************************************************************************
    301          */
    302          

   \                                 In section .text, align 2, keep-with-next
    303          void  BSP_OS_TimeDlyHMSM(  CPU_INT16U   hours,
    304                                     CPU_INT16U   minutes,
    305                                     CPU_INT16U   seconds,
    306                                     CPU_INT32U   milli)
    307          {
   \                     BSP_OS_TimeDlyHMSM: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    308              OS_ERR      err;
    309              OSTimeDlyHMSM((CPU_INT16U) hours,
    310                            (CPU_INT16U) minutes,
    311                            (CPU_INT16U) seconds,
    312                            (CPU_INT32U) milli,
    313                            (OS_OPT    ) OS_OPT_TIME_HMSM_STRICT,
    314                            (OS_ERR   *)&err);
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x003B             MOVS     R3,R7
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       OSTimeDlyHMSM
    315          }
   \   00000024   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    316          
    317          /*
    318          *********************************************************************************************************
    319          *                                            BSP_OS_TickGet()
    320          *
    321          * Description : Get the OS Tick Counter as if it was running continuously.
    322          *
    323          * Argument(s) : none.
    324          *
    325          * Return(s)   : The effective OS Tick Counter.
    326          *
    327          * Caller(s)   : OS_TaskBlock, OS_TickListInsertDly and OSTimeGet.
    328          *
    329          *               This function is an INTERNAL uC/OS-III function & MUST NOT be called by application
    330          *               function(s).
    331          *
    332          * Note(s)     : none.
    333          *********************************************************************************************************
    334          */
    335          
    336          /*
    337          *********************************************************************************************************
    338          *                                             EXAMPLE CODE
    339          *********************************************************************************************************
    340          * Licensing terms:
    341          *   This file is provided as an example on how to use Micrium products. It has not necessarily been
    342          *   tested under every possible condition and is only offered as a reference, without any guarantee.
    343          *
    344          *   Please feel free to use any application code labeled as 'EXAMPLE CODE' in your application products.
    345          *   Example code may be used as is, in whole or in part, or may be used as a reference only. This file
    346          *   can be modified as required.
    347          *
    348          *   You can find user manuals, API references, release notes and more at: https://doc.micrium.com
    349          *
    350          *   You can contact us at: http://www.micrium.com
    351          *
    352          *   Please help us continue to provide the Embedded community with the finest software available.
    353          *
    354          *   Your honesty is greatly appreciated.
    355          *********************************************************************************************************
    356          */
    357          
    358          /*
    359          *********************************************************************************************************
    360          *
    361          *                                             OS TICK BSP
    362          *
    363          * File : bsp_os.c
    364          *********************************************************************************************************
    365          */
    366          
    367          /*
    368          *********************************************************************************************************
    369          *********************************************************************************************************
    370          *                                             INCLUDE FILES
    371          *********************************************************************************************************
    372          *********************************************************************************************************
    373          */
    374          
    375          #include  <cpu.h>
    376          #include  <lib_def.h>
    377          #include  <os.h>
    378          #include  <bsp_os.h>
    379          
    380          //#include "em_cmu.h"
    381          //#include "em_rtc.h"
    382          
    383          
    384          /*
    385          *********************************************************************************************************
    386          *********************************************************************************************************
    387          *                                            LOCAL DEFINES
    388          *********************************************************************************************************
    389          *********************************************************************************************************
    390          */
    391          
    392          #ifndef  OS_CFG_DYN_TICK_EN                                     /* Dynamic tick only available for uCOS-III             */
    393          #define  OS_CFG_DYN_TICK_EN      DEF_DISABLED
    394          #endif
    395          
    396          #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
    397          #define  BSP_OS_LPTIMER_TICK_RATE_HZ          (16384u)
    398          #define  BSP_OS_LPTICK_TO_OSTICK(lptick)    (((lptick) * OSCfg_TickRate_Hz)/BSP_OS_LPTIMER_TICK_RATE_HZ)
    399          #define  BSP_OS_OSTICK_TO_LPTICK(ostick)    (((ostick) * BSP_OS_LPTIMER_TICK_RATE_HZ)/OSCfg_TickRate_Hz)
    400          #endif
    401          
    402          
    403          /*
    404          *********************************************************************************************************
    405          *********************************************************************************************************
    406          *                                       LOCAL GLOBAL VARIABLES
    407          *********************************************************************************************************
    408          *********************************************************************************************************
    409          */
    410          
    411          #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
    412          static  OS_TICK  BSP_OS_TicksToGo = 0u;                         /* Stored in OS Tick units.                             */
    413          static  OS_TICK  BSP_OS_LastTick  = 0u;                         /* Stored in OS Tick units.                             */
    414          static  OS_TICK  BSP_OS_UnTick    = 0u;                         /* Stored in OS Tick units.                             */
    415          #endif
    416          
    417          
    418          /*
    419          *********************************************************************************************************
    420          *********************************************************************************************************
    421          *                                           LOCAL CONSTANTS
    422          *********************************************************************************************************
    423          *********************************************************************************************************
    424          */
    425          
    426          
    427          /*
    428          *********************************************************************************************************
    429          *********************************************************************************************************
    430          *                                          LOCAL DATA TYPES
    431          *********************************************************************************************************
    432          *********************************************************************************************************
    433          */
    434          
    435          
    436          /*
    437          *********************************************************************************************************
    438          *********************************************************************************************************
    439          *                                      LOCAL FUNCTION PROTOTYPES
    440          *********************************************************************************************************
    441          *********************************************************************************************************
    442          */
    443          
    444          #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
    445          static  void     BSP_OS_LP_TickInit(void);
    446          static  OS_TICK  BSP_OS_LP_TickGet (void);
    447          #endif
    448          
    449          
    450          /*
    451          *********************************************************************************************************
    452          *********************************************************************************************************
    453          *                                           GLOBAL FUNCTIONS
    454          *********************************************************************************************************
    455          *********************************************************************************************************
    456          */
    457          
    458          /*
    459          *********************************************************************************************************
    460          *                                    INITIALIZE OS TICK INTERRUPT
    461          *
    462          * Description : Initialize the tick interrupt.
    463          *
    464          * Argument(s) : none.
    465          *
    466          * Return(s)   : none.
    467          *
    468          * Caller(s)   : Application.
    469          *
    470          * Note(s)     : none
    471          *********************************************************************************************************
    472          */
    473          

   \                                 In section .text, align 2, keep-with-next
    474          void  BSP_OSTickInit (void)
    475          {
   \                     BSP_OSTickInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    476          #if (OS_CFG_DYN_TICK_EN != DEF_ENABLED)
    477          //    CPU_INT32U  cpu_freq;
    478          #endif
    479          
    480          #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
    481              BSP_OS_LP_TickInit();
    482          #else
    483              extern void BSP_Start(void);
    484              BSP_Start();
   \   00000002   0x.... 0x....      BL       BSP_Start
    485              //cpu_freq = SystemCoreClockGet();                            /* Determine SysTick reference freq.                    */
    486              //OS_CPU_SysTickInitFreq(cpu_freq);                           /* Init uC/OS periodic time src (SysTick).              */
    487          #endif
    488          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    489          
    490          
    491          /*
    492          *********************************************************************************************************
    493          *                                     DISABLE OS TICK INTERRUPT
    494          *
    495          * Description : Disable the tick interrupt.
    496          *
    497          * Argument(s) : none.
    498          *
    499          * Return(s)   : none.
    500          *
    501          * Caller(s)   : Application.
    502          *
    503          * Note(s)     : none
    504          *********************************************************************************************************
    505          */
    506          

   \                                 In section .text, align 2, keep-with-next
    507          void  BSP_OSTickDisable (void)
    508          {
    509              //SysTick->CTRL = 0x0000000;
    510          }
   \                     BSP_OSTickDisable: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     OSCfg_TickRate_Hz
    511          
    512          
    513          /*
    514          *********************************************************************************************************
    515          *********************************************************************************************************
    516          **                                       uC/OS-III Low Power Tick
    517          *********************************************************************************************************
    518          *********************************************************************************************************
    519          */
    520          
    521          #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
    522          
    523          /*
    524          *********************************************************************************************************
    525          *                                          BSP_OS_LP_TickInit()
    526          *
    527          * Description : Initialize the RTC timer to enable dynamic ticking.
    528          *
    529          * Argument(s) : none.
    530          *
    531          * Return(s)   : none.
    532          *
    533          * Caller(s)   : BSP_Tick_Init.
    534          *
    535          *               This function is an INTERNAL uC/OS-III function & MUST NOT be called by application
    536          *               function(s).
    537          *
    538          * Note(s)     : none.
    539          *********************************************************************************************************
    540          */
    541          
    542          void  BSP_OS_LP_TickInit (void)
    543          {
    544          //    RTC_Init_TypeDef  rtc_init_cfg;
    545          //
    546          //
    547          //    BSP_OS_TicksToGo = 0u;
    548          //    BSP_OS_LastTick  = 0u;
    549          //
    550          //
    551          //    CMU_ClockEnable(cmuClock_CORELE, true);                     /* Enable and select RTC oscillator.                    */
    552          //
    553          //    CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFXO);           /* Select the low frequency crystal oscillator.         */
    554          //
    555          //    CMU_ClockDivSet(cmuClock_RTC, cmuClkDiv_2);                 /* Set 2 times divider to reduce energy.                */
    556          //
    557          //    CMU_ClockEnable(cmuClock_RTC, true);                        /* Enable clock to RTC module.                          */
    558          //
    559          //    rtc_init_cfg.enable   = false;                              /* Specify the RTC initial configuration.               */
    560          //    rtc_init_cfg.debugRun = false;
    561          //    rtc_init_cfg.comp0Top = true;
    562          //
    563          //    RTC_Init(&rtc_init_cfg);                                    /* Initialization of RTC.                               */
    564          //
    565          //    RTC_IntDisable(RTC_IFC_COMP0);                              /* Disable interrupt generation from RTC0.              */
    566          //
    567          //    NVIC_SetPriority(RTC_IRQn, 255);                            /* Tick interrupt MUST execute at the lowest int prio.  */
    568          //
    569          //    NVIC_ClearPendingIRQ(RTC_IRQn);                             /* Enable interrupts.                                   */
    570          //    NVIC_EnableIRQ(RTC_IRQn);
    571          //
    572          //    RTC_CompareSet(0, 128);                                     /* Set compare register.                                */
    573          //
    574          //    RTC_IntClear(RTC_IFC_COMP0);                                /* Get the RTC started.                                 */
    575          //    RTC_IntEnable(RTC_IF_COMP0);
    576          //    RTC_Enable(true);
    577          }
    578          
    579          
    580          /*
    581          *********************************************************************************************************
    582          *                                        RTC_IRQHandler()
    583          *
    584          * Description : Handle the RTC interrupt for the OS LP mode.
    585          *
    586          * Argument(s) : none.
    587          *
    588          * Return(s)   : none.
    589          *
    590          * Caller(s)   : This is an ISR.
    591          *
    592          * Note(s)     : none.
    593          *********************************************************************************************************
    594          */
    595          
    596          void  RTC_IRQHandler (void)
    597          {
    598              CPU_SR_ALLOC();
    599          
    600          
    601              CPU_CRITICAL_ENTER();
    602              OSIntEnter();
    603              CPU_CRITICAL_EXIT();
    604          
    605              RTC_IntClear(_RTC_IFC_MASK);                                /* Clear the RTC tick interrupt.                        */
    606          
    607              if (BSP_OS_TicksToGo != 0) {
    608              	RTC_CounterSet(0);
    609                  OSTimeDynTick(BSP_OS_TicksToGo + BSP_OS_UnTick + BSP_OS_LPTICK_TO_OSTICK(RTC_CounterGet()));
    610                  BSP_OS_LastTick += BSP_OS_TicksToGo + BSP_OS_LPTICK_TO_OSTICK(RTC_CounterGet());
    611          
    612                  BSP_OS_TicksToGo = 0;
    613                  BSP_OS_UnTick    = 0;
    614              } else {
    615                                                                          /* No tasks need to be awakened only keep track of time */
    616                  BSP_OS_LastTick += BSP_OS_LPTICK_TO_OSTICK(RTC_CompareGet(0));
    617                  BSP_OS_UnTick   += BSP_OS_LPTICK_TO_OSTICK(RTC_CompareGet(0));
    618              }
    619          
    620              OSIntExit();
    621          }
    622          
    623          
    624          /*
    625          *********************************************************************************************************
    626          *                                            BSP_OS_TickGet()
    627          *
    628          * Description : Get the OS Tick Counter as if it was running continuously.
    629          *
    630          * Argument(s) : none.
    631          *
    632          * Return(s)   : The effective OS Tick Counter.
    633          *
    634          * Caller(s)   : OS_TaskBlock, OS_TickListInsertDly and OSTimeGet.
    635          *
    636          *               This function is an INTERNAL uC/OS-III function & MUST NOT be called by application
    637          *               function(s).
    638          *
    639          * Note(s)     : none.
    640          *********************************************************************************************************
    641          */
    642          
    643          OS_TICK  BSP_OS_TickGet (void)
    644          {
    645              OS_TICK  tick;
    646          
    647          
    648              tick = BSP_OS_LastTick + BSP_OS_LPTICK_TO_OSTICK(BSP_OS_LP_TickGet());
    649          
    650              return (tick);
    651          }
    652          
    653          
    654          /*
    655          *********************************************************************************************************
    656          *                                          BSP_OS_TickNextSet()
    657          *
    658          * Description : Set the number of OS Ticks to wait before calling OSTimeTick.
    659          *
    660          * Argument(s) : ticks       number of OS Ticks to wait.
    661          *
    662          * Return(s)   : Number of effective OS Ticks until next OSTimeTick.
    663          *
    664          * Caller(s)   : OS_TickTask and OS_TickListInsert.
    665          *
    666          *               This function is an INTERNAL uC/OS-III function & MUST NOT be called by application
    667          *               function(s).
    668          *
    669          * Note(s)     : none.
    670          *********************************************************************************************************
    671          */
    672          
    673          OS_TICK  BSP_OS_TickNextSet (OS_TICK  ticks)
    674          {
    675              OS_TICK     lpticks;
    676          
    677                                                                          /* Check if OSTimeTick needs to be called.              */
    678              if (ticks != (OS_TICK)-1) {
    679                                                                          /* Get tick count in LPTMR units.                       */
    680                  lpticks = BSP_OS_OSTICK_TO_LPTICK(ticks);
    681                                                                          /* Adjust for maximum value.                            */
    682                  if (lpticks > DEF_INT_16U_MAX_VAL) {
    683                      BSP_OS_TicksToGo = BSP_OS_LPTICK_TO_OSTICK(DEF_INT_16U_MAX_VAL);
    684                      lpticks          = DEF_INT_16U_MAX_VAL;
    685                  } else {
    686                      BSP_OS_TicksToGo = ticks;
    687                  }
    688                                                                          /* Adjust for invalid value.                            */
    689                  if (lpticks & 0xFFFF == 0) {
    690                      lpticks          = DEF_INT_16U_MAX_VAL;
    691                      BSP_OS_TicksToGo = BSP_OS_LPTICK_TO_OSTICK(DEF_INT_16U_MAX_VAL);
    692                  }
    693              } else if (ticks == 0) {
    694                  lpticks          = 1;
    695                  BSP_OS_TicksToGo = 1;
    696              } else {
    697                  lpticks          = DEF_INT_16U_MAX_VAL;
    698                  BSP_OS_TicksToGo = 0;
    699              }
    700          
    701          
    702              RTC_Enable(false);                                          /* Stop timer.                                          */
    703          
    704                                                                          /* Re-configure timer.                                  */
    705          
    706              RTC_CompareSet(0, lpticks);                                 /* Reset the RTC compare value to trigger at the        */
    707                                                                          /* configured tick rate.                                */
    708          
    709              RTC_Enable(true);                                           /* Restart timer.                                       */
    710          
    711                                                                          /* Return the the number of effective OS ticks that     */
    712              return (BSP_OS_TicksToGo);                                  /* will elapse before the next interrupt.               */
    713          }
    714          
    715          
    716          /*
    717          *********************************************************************************************************
    718          *                                          BSP_OS_LP_TickGet()
    719          *
    720          * Description : Gets the RTC timer state.
    721          *
    722          * Argument(s) : none.
    723          *
    724          * Return(s)   : RTC state.
    725          *
    726          * Caller(s)   : BSP_OS_TickNextSet and BSP_OS_TickGet.
    727          *
    728          *               This function is an INTERNAL uC/OS-III function & MUST NOT be called by application
    729          *               function(s).
    730          *
    731          * Note(s)     : none.
    732          *********************************************************************************************************
    733          */
    734          
    735          OS_TICK  BSP_OS_LP_TickGet(void)
    736          {
    737              OS_TICK  ticks;
    738          
    739          
    740              //ticks = RTC_CounterGet();
    741          
    742              return (ticks);
    743          }
    744          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BSP_OSTickDisable
       8   BSP_OSTickInit
         8   -> BSP_Start
      24   BSP_OS_SemCreate
        24   -> OSSemCreate
      16   BSP_OS_SemPost
        16   -> OSSemPost
      24   BSP_OS_SemWait
        24   -> OSSemPend
      32   BSP_OS_TimeDly
        32   -> OSTimeDlyHMSM
      32   BSP_OS_TimeDlyHMSM
        32   -> OSTimeDlyHMSM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       2  BSP_OSTickDisable
       8  BSP_OSTickInit
      38  BSP_OS_SemCreate
      32  BSP_OS_SemPost
      56  BSP_OS_SemWait
      86  BSP_OS_TimeDly
      38  BSP_OS_TimeDlyHMSM

 
 264 bytes in section .text
 
 264 bytes of CODE memory

Errors: none
Warnings: none
