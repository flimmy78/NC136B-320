###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_osal.c
#    Command line =  
#        "F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_osal.c" -D
#        RELEASE -lCN "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\app_task_osal.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\app_task_osal.o
#
###############################################################################

F:\iar\NC136B-320 IC卡模块\Software\APP\Tasks\app_task_osal.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_osal.c
      3           *   Revised:        All copyrights reserved to wumingshen.
      4           *   Revision:       v1.0
      5           *   Writer:	     wumingshen.
      6           *
      7           *   Description:    双击选中 osal 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Osal 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 OSAL 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （APP_TASK_OSAL_PRIO）
     14           *                                            和 任务堆栈（APP_TASK_OSAL_STK_SIZE）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskOsalCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Osal ）
     17           *
     18           *   Notes:
     19           *     				E-mail: shenchangwei945@163.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          #include <app_ctrl.h>
     29          #include <os.h>
     30          #include <osal.h>
     31          #include <osal_event.h>
     32          #include <os_cfg_app.h>
     33          
     34          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     35          const  CPU_CHAR  *app_task_osal__c = "$Id: $";
     36          #endif
     37          
     38          #define APP_TASK_OSAL_EN     DEF_ENABLED
     39          #if APP_TASK_OSAL_EN == DEF_ENABLED
     40          /*******************************************************************************
     41           * CONSTANTS
     42           */
     43          
     44          /*******************************************************************************
     45           * MACROS
     46           */
     47          #define  CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ / 1u)
     48          
     49          /*******************************************************************************
     50           * TYPEDEFS
     51           */
     52          #if ( OSAL_EN == DEF_ENABLED )
     53          /***********************************************
     54          * 描述： 任务控制块（TCB）
     55          */

   \                                 In section .bss, align 4
     56          static  OS_TCB   AppTaskOsalTCB;
   \                     AppTaskOsalTCB:
   \   00000000                      DS8 160
     57          
     58          /***********************************************
     59          * 描述： 任务堆栈（STACKS）
     60          */

   \                                 In section .bss, align 4
     61          static  CPU_STK  AppTaskOsalStk[ APP_TASK_OSAL_STK_SIZE ];
   \                     AppTaskOsalStk:
   \   00000000                      DS8 1024
     62          #endif
     63          /*******************************************************************************
     64           * LOCAL VARIABLES
     65           */
     66          
     67          /*******************************************************************************
     68           * GLOBAL VARIABLES
     69           */
     70          /*******************************************************************************
     71           * LOCAL FUNCTIONS
     72           */
     73          static  void    AppTaskOsal             (void *p_arg);
     74          static  void    APP_OsalInit            (void);
     75          
     76          /*******************************************************************************
     77           * GLOBAL FUNCTIONS
     78           */
     79          
     80          /*******************************************************************************
     81           * EXTERN VARIABLES
     82           */
     83          extern void     OSAL_TaskCreateHook     (void);
     84              
     85           /*******************************************************************************
     86           * EXTERN FUNCTIONS
     87           */
     88          
     89          /*******************************************************************************/
     90          
     91          /*******************************************************************************
     92           * 名    称： App_TaskOsalCreate
     93           * 功    能： **任务创建
     94           * 入口参数： 无
     95           * 出口参数： 无
     96           * 作　　者： wumingshen.
     97           * 创建日期： 2015-02-05
     98           * 修    改：
     99           * 修改日期：
    100           * 备    注： 任务创建函数需要在app.h文件中声明
    101           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          void  App_TaskOsalCreate(void)
    103          {
   \                     App_TaskOsalCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    104          #if ( OSAL_EN == DEF_ENABLED )
    105              OS_ERR  err;
    106          
    107              /***********************************************
    108              * 描述： 任务创建
    109              */
    110              OSTaskCreate((OS_TCB     *)&AppTaskOsalTCB,                 // 任务控制块  （当前文件中定义）
    111                           (CPU_CHAR   *)"App Task Osal",                 // 任务名称
    112                           (OS_TASK_PTR ) AppTaskOsal,                    // 任务函数指针（当前文件中定义）
    113                           (void       *) 0,                              // 任务函数参数
    114                           (OS_PRIO     ) APP_TASK_OSAL_PRIO,             // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    115                           (CPU_STK    *)&AppTaskOsalStk[0],              // 任务栈顶
    116                           (CPU_STK_SIZE) APP_TASK_OSAL_STK_SIZE / 10,    // 任务栈溢出报警值
    117                           (CPU_STK_SIZE) APP_TASK_OSAL_STK_SIZE,         // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    118                           (OS_MSG_QTY  ) 5u,                             // 可以发送给任务的最大消息队列数量
    119                           (OS_TICK     ) 0u,                             // 相同优先级任务的轮循时间（ms），0为默认
    120                           (void       *) 0,                              // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    121                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |           // 允许堆栈检查该任务
    122                                          OS_OPT_TASK_STK_CLR),           // 创建任务时堆栈清零
    123                           (OS_ERR     *)&err);                           // 指向错误代码的指针，用于创建结果处理
   \   00000004   0xA809             ADD      R0,SP,#+36
   \   00000006   0x9008             STR      R0,[SP, #+32]
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x9007             STR      R0,[SP, #+28]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9006             STR      R0,[SP, #+24]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9005             STR      R0,[SP, #+20]
   \   00000014   0x2005             MOVS     R0,#+5
   \   00000016   0x9004             STR      R0,[SP, #+16]
   \   00000018   0xF44F 0x7080      MOV      R0,#+256
   \   0000001C   0x9003             STR      R0,[SP, #+12]
   \   0000001E   0x2019             MOVS     R0,#+25
   \   00000020   0x9002             STR      R0,[SP, #+8]
   \   00000022   0x....             LDR.N    R0,??DataTable2
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x201E             MOVS     R0,#+30
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      ADR.W    R2,AppTaskOsal
   \   00000030   0x....             LDR.N    R1,??DataTable2_1
   \   00000032   0x....             LDR.N    R0,??DataTable2_2
   \   00000034   0x.... 0x....      BL       OSTaskCreate
    124          #else
    125          #endif
    126          }
   \   00000038   0xB00B             ADD      SP,SP,#+44
   \   0000003A   0xBD00             POP      {PC}             ;; return
    127          
    128          /*******************************************************************************
    129           * 名    称： AppTaskOsal
    130           * 功    能： 控制任务
    131           * 入口参数： p_arg - 由任务创建函数传入
    132           * 出口参数： 无
    133           * 作　　者： wumingshen.
    134           * 创建日期： 2015-02-05
    135           * 修    改：
    136           * 修改日期：
    137           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    138          static  void  AppTaskOsal (void *p_arg)
    139          {    
   \                     AppTaskOsal: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
    140          #if ( OSAL_EN == DEF_ENABLED )
    141              OS_ERR          err;
    142              INT32U          ticks;
    143              static INT32S   dly     = 1;
    144              
    145              osalEvt         events;
    146              halIntState_t   cpu_sr;
    147              
    148              /***********************************************
    149              * 描述： 任务初始化
    150              */
    151              APP_OsalInit();
   \   00000008   0x.... 0x....      BL       APP_OsalInit
    152              
    153              /***********************************************
    154              * 描述：OSAL系统初始化
    155              */
    156              osal_init_system();
   \   0000000C   0x.... 0x....      BL       osal_init_system
    157              
    158              /***********************************************
    159              * 描述： OSAL创建任务
    160              */
    161              OSAL_TaskCreateHook();
   \   00000010   0x.... 0x....      BL       OSAL_TaskCreateHook
    162              
    163              /***********************************************
    164              * 描述：OSAL任务初始化
    165              */
    166              osal_Task_init();
   \   00000014   0x.... 0x....      BL       osal_Task_init
    167              
    168              /***********************************************
    169              * 描述： Task body, always written as an infinite loop.
    170              *        OSAL任务查询和执行
    171              */
    172              while (DEF_TRUE) {
    173                  /***********************************************
    174                  * 描述： 得到系统当前时间
    175                  */
    176                  ticks = OSTimeGet(&err);
   \                     ??AppTaskOsal_0: (+1)
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x.... 0x....      BL       OSTimeGet
   \   0000001E   0x0005             MOVS     R5,R0
    177                  
    178          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
    179                  BOOL    ret = BSP_OS_SemWait(&Osal_EvtSem, dly);    // 等待信号量
   \   00000020   0x....             LDR.N    R0,??DataTable2_3
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0x....             LDR.N    R0,??DataTable2_4
   \   00000026   0x.... 0x....      BL       BSP_OS_SemWait
   \   0000002A   0x4680             MOV      R8,R0
    180          #endif
    181                  do {
    182                      /***********************************************
    183                      * 描述：用于需要系统总是查询的的事件，如：
    184                      *       串口接收事件，按钮扫描事件等
    185                      */
    186                      //HAL_ProcessPoll();
    187                      
    188                      /***********************************************
    189                      * 描述：查找是否有任务产生事件
    190                      */
    191                      TaskActive = osalNextActiveTask();
   \                     ??AppTaskOsal_1: (+1)
   \   0000002C   0x.... 0x....      BL       osalNextActiveTask
   \   00000030   0x....             LDR.N    R1,??DataTable2_5
   \   00000032   0x6008             STR      R0,[R1, #+0]
    192                      
    193                      /***********************************************
    194                      * 描述：如果当前任务有事件发生
    195                      */
    196                      if ( TaskActive ) {
   \   00000034   0x....             LDR.N    R0,??DataTable2_5
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD035             BEQ.N    ??AppTaskOsal_2
    197                          CPU_CRITICAL_ENTER();
   \   0000003C   0x.... 0x....      BL       CPU_SR_Save
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0x.... 0x....      BL       CPU_IntDisMeasStart
    198                          events = TaskActive->events;
   \   00000046   0x....             LDR.N    R0,??DataTable2_5
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x6940             LDR      R0,[R0, #+20]
   \   0000004C   0x0006             MOVS     R6,R0
    199                          
    200                          /***********************************************
    201                          * 描述：清除当前任务事件
    202                          */
    203                          TaskActive->events = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR.N    R1,??DataTable2_5
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x6148             STR      R0,[R1, #+20]
    204                          CPU_CRITICAL_EXIT();
   \   00000056   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       CPU_SR_Restore
    205                          
    206                          /***********************************************
    207                          * 描述：再次检查事件是否存在
    208                          */
    209                          if ( events != 0 ) {
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD020             BEQ.N    ??AppTaskOsal_2
    210                              /***********************************************
    211                              * 描述：判断任务函数是否存在
    212                              */
    213                              if ( TaskActive->pfnEventProcessor ) {
   \   00000066   0x....             LDR.N    R0,??DataTable2_5
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x6880             LDR      R0,[R0, #+8]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD01B             BEQ.N    ??AppTaskOsal_2
    214                                  /***********************************************
    215                                  * 描述：执行任务处理高优先级事件并返回未处理完的事件
    216                                  *       事件值越小，优先级越高
    217                                  */
    218                                  events = (TaskActive->pfnEventProcessor)( TaskActive->taskID, events );
   \   00000070   0x0031             MOVS     R1,R6
   \   00000072   0x....             LDR.N    R0,??DataTable2_5
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x68C0             LDR      R0,[R0, #+12]
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x....             LDR.N    R2,??DataTable2_5
   \   0000007C   0x6812             LDR      R2,[R2, #+0]
   \   0000007E   0x6892             LDR      R2,[R2, #+8]
   \   00000080   0x4790             BLX      R2
   \   00000082   0x0006             MOVS     R6,R0
    219                                  
    220                                  /***********************************************
    221                                  * 描述：添加返回未处理完的事件到当前任务，等待下次执行
    222                                  */
    223                                  CPU_CRITICAL_ENTER();
   \   00000084   0x.... 0x....      BL       CPU_SR_Save
   \   00000088   0x0007             MOVS     R7,R0
   \   0000008A   0x.... 0x....      BL       CPU_IntDisMeasStart
    224                                  TaskActive->events |= events;
   \   0000008E   0x....             LDR.N    R0,??DataTable2_5
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x6940             LDR      R0,[R0, #+20]
   \   00000094   0x4330             ORRS     R0,R6,R0
   \   00000096   0x....             LDR.N    R1,??DataTable2_5
   \   00000098   0x6809             LDR      R1,[R1, #+0]
   \   0000009A   0x6148             STR      R0,[R1, #+20]
    225                                  CPU_CRITICAL_EXIT();
   \   0000009C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000A0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000A2   0x0038             MOVS     R0,R7
   \   000000A4   0x.... 0x....      BL       CPU_SR_Restore
    226                              }
    227                          }
    228                      }
    229                  } while (TaskActive);                           // 等待所有任务执行完
   \                     ??AppTaskOsal_2: (+1)
   \   000000A8   0x....             LDR.N    R0,??DataTable2_5
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD1BD             BNE.N    ??AppTaskOsal_1
    230                  
    231                  /***********************************************
    232                  * 描述： 去除任务运行的时间，等到一个控制周期里剩余需要延时的时间
    233                  */
    234                  dly   = CYCLE_TIME_TICKS - ( OSTimeGet(&err) - ticks );
   \   000000B0   0x4668             MOV      R0,SP
   \   000000B2   0x.... 0x....      BL       OSTimeGet
   \   000000B6   0xF5D0 0x707A      RSBS     R0,R0,#+1000
   \   000000BA   0x1828             ADDS     R0,R5,R0
   \   000000BC   0x....             LDR.N    R1,??DataTable2_3
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    235                  if ( dly  < 1 ) {
   \   000000C0   0x....             LDR.N    R0,??DataTable2_3
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x2801             CMP      R0,#+1
   \   000000C6   0xDA03             BGE.N    ??AppTaskOsal_3
    236                      dly = 1;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x....             LDR.N    R1,??DataTable2_3
   \   000000CC   0x6008             STR      R0,[R1, #+0]
   \   000000CE   0xE7A3             B.N      ??AppTaskOsal_0
    237                  } else if ( dly > CYCLE_TIME_TICKS ) {
   \                     ??AppTaskOsal_3: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable2_3
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000D8   0xD99E             BLS.N    ??AppTaskOsal_0
    238                      dly = CYCLE_TIME_TICKS;
   \   000000DA   0xF44F 0x707A      MOV      R0,#+1000
   \   000000DE   0x....             LDR.N    R1,??DataTable2_3
   \   000000E0   0x6008             STR      R0,[R1, #+0]
   \   000000E2   0xE799             B.N      ??AppTaskOsal_0
    239                  }
    240              }
    241          #else
    242          #endif
    243          }

   \                                 In section .data, align 4
   \                     ??dly:
   \   00000000   0x00000001         DC32 1
    244          
    245          /*******************************************************************************
    246           * 名    称： APP_OsalInit
    247           * 功    能： 任务初始化
    248           * 入口参数： 无
    249           * 出口参数： 无
    250           * 作　　者： wumingshen.
    251           * 创建日期： 2015-03-28
    252           * 修    改：
    253           * 修改日期：
    254           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    255          static void APP_OsalInit(void)
    256          {
   \                     APP_OsalInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    257              /***********************************************
    258              * 描述： 在看门狗标志组注册本任务的看门狗标志
    259              */
    260              BSP_OS_SemCreate(&Osal_EvtSem,0,"Osal EvtSem");
   \   00000002   0x....             LDR.N    R2,??DataTable2_6
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable2_4
   \   00000008   0x.... 0x....      BL       BSP_OS_SemCreate
    261          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     AppTaskOsalStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     AppTaskOsalTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ??dly

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     Osal_EvtSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     TaskActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Osal"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x4F    
   \              0x73 0x61    
   \              0x6C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4F 0x73          DC8 "Osal EvtSem"
   \              0x61 0x6C    
   \              0x20 0x45    
   \              0x76 0x74    
   \              0x53 0x65    
   \              0x6D 0x00    
    262          
    263          /*******************************************************************************
    264           * 				end of file
    265           *******************************************************************************/
    266          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   APP_OsalInit
         8   -> BSP_OS_SemCreate
      32   AppTaskOsal
        32   -- Indirect call
        32   -> APP_OsalInit
        32   -> BSP_OS_SemWait
        32   -> CPU_IntDisMeasStart
        32   -> CPU_IntDisMeasStop
        32   -> CPU_SR_Restore
        32   -> CPU_SR_Save
        32   -> OSAL_TaskCreateHook
        32   -> OSTimeGet
        32   -> osalNextActiveTask
        32   -> osal_Task_init
        32   -> osal_init_system
      48   App_TaskOsalCreate
        48   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
      16  ?_0
      12  ?_1
      14  APP_OsalInit
     228  AppTaskOsal
    1024  AppTaskOsalStk
     160  AppTaskOsalTCB
      60  App_TaskOsalCreate
       4  dly

 
 1 184 bytes in section .bss
     4 bytes in section .data
    28 bytes in section .rodata
   330 bytes in section .text
 
   330 bytes of CODE  memory
    28 bytes of CONST memory
 1 188 bytes of DATA  memory

Errors: none
Warnings: none
