###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Application\Library\CardOperations\ParaCard.c
#    Command line =  
#        "F:\iar\NC136B-320
#        IC卡模块\Application\Library\CardOperations\ParaCard.c" -D RELEASE
#        -lCN "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\ParaCard.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\ParaCard.o
#
###############################################################################

F:\iar\NC136B-320 IC卡模块\Application\Library\CardOperations\ParaCard.c
      1          ////#include 	"config.h"
      2          ////#include 	"String.h"
      3          ////#include	"Globe.h"
      4          ////#include	"HardDrive.h"
      5          ////#include	"CpuDrive.h"
      6          ////#include	"OperateCard.h"
      7          ////#include	"FramStore.h"
      8          ////#include	"CardTest.h"
      9          //
     10          //
     11          #include    "includes.h"  
     12          #include	"Card.h"
     13          #include	"OperateCard.h" 
     14          #include	"FRAM.h" 
     15          //
     16          ////-------------------------------------------------------------------------------------------------
     17          ////函数名称:             uint8	SetSucceedIndicate(void)
     18          ////函数功能:             设置处理成功指示
     19          ////入口参数:             无
     20          ////出口参数:             无
     21          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     22          void	SetSucceedIndicate(void)
     23          {
     24          //	DisplaySet(60,0,"SETS");	
     25          //	DisplaySet(60,0,"        ");	
     26          }
   \                     SetSucceedIndicate: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     27          
     28          ////-------------------------------------------------------------------------------------------------
     29          ////函数名称:             uint8	StoreErrIndicate(void)
     30          ////函数功能:             存设置信息失败指示
     31          ////入口参数:             无
     32          ////出口参数:             无
     33          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     34          void	StoreErrIndicate(void)
     35          {
   \                     StoreErrIndicate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     36          	DisplaySet(60,100,"STRE");	
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000006   0x2164             MOVS     R1,#+100
   \   00000008   0x203C             MOVS     R0,#+60
   \   0000000A   0x.... 0x....      BL       DisplaySet
     37          	DisplaySet(60,100,"        ");	
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable8_1
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0x203C             MOVS     R0,#+60
   \   00000016   0x.... 0x....      BL       DisplaySet
     38          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     39          
     40          ////-------------------------------------------------------------------------------------------------
     41          ////函数名称:             uint8	CrcCheckErrIndicate(void)
     42          ////函数功能:             设置信息校验和失败指示
     43          ////入口参数:             无
     44          ////出口参数:             无
     45          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     46          void	CrcCheckErrIndicate(void)
     47          {
   \                     CrcCheckErrIndicate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     48          	DisplaySet(60,100,"CRCE");	
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable8_2
   \   00000006   0x2164             MOVS     R1,#+100
   \   00000008   0x203C             MOVS     R0,#+60
   \   0000000A   0x.... 0x....      BL       DisplaySet
     49          	DisplaySet(60,100,"        ");	
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable8_1
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0x203C             MOVS     R0,#+60
   \   00000016   0x.... 0x....      BL       DisplaySet
     50          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     51          
     52          
     53          
     54          ////-------------------------------------------------------------------------------------------------
     55          ////函数名称:             uint8	ModCard(stcCardFlg	sCardFlg)
     56          ////函数功能:             普通卡处理
     57          ////入口参数:             无
     58          ////出口参数:             无
     59          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     60          uint8	ModCard(void)
     61          {
   \                     ModCard: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0C1             SUB      SP,SP,#+260
     62          	uint8	buf[256];
     63          	uint32	writedsize = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     64          	uint32	readsize = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     65          		
     66          	while(writedsize < sizeof(stcModelCard))
   \                     ??ModCard_0: (+1)
   \   00000008   0xF241 0x7044      MOVW     R0,#+5956
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD218             BCS.N    ??ModCard_1
     67          	{
     68          		readsize = (sizeof(stcModelCard)- writedsize)>256?
     69          					256:(sizeof(stcModelCard)- writedsize);
   \   00000010   0xF241 0x7044      MOVW     R0,#+5956
   \   00000014   0x1B00             SUBS     R0,R0,R4
   \   00000016   0xF5B0 0x7F80      CMP      R0,#+256
   \   0000001A   0xD902             BLS.N    ??ModCard_2
   \   0000001C   0xF44F 0x7580      MOV      R5,#+256
   \   00000020   0xE002             B.N      ??ModCard_3
   \                     ??ModCard_2: (+1)
   \   00000022   0xF241 0x7044      MOVW     R0,#+5956
   \   00000026   0x1B05             SUBS     R5,R0,R4
     70          
     71          		ReadCard(CARD_DATA_ADDR+writedsize,buf,readsize);
   \                     ??ModCard_3: (+1)
   \   00000028   0x002A             MOVS     R2,R5
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0xF514 0x50A0      ADDS     R0,R4,#+5120
   \   00000030   0x.... 0x....      BL       ReadCard
     72          
     73          		StoreOilBoxModel(writedsize,buf,readsize);
   \   00000034   0x002A             MOVS     R2,R5
   \   00000036   0x4669             MOV      R1,SP
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       StoreOilBoxModel
     74          
     75          		writedsize +=readsize;
   \   0000003E   0x192C             ADDS     R4,R5,R4
   \   00000040   0xE7E2             B.N      ??ModCard_0
     76          	}	
     77          		
     78          	return	1;
   \                     ??ModCard_1: (+1)
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xB041             ADD      SP,SP,#+260
   \   00000046   0xBD30             POP      {R4,R5,PC}       ;; return
     79          } 
     80          //
     81          //extern	stcModelCard	l_sModelCard;	 
     82          ////-------------------------------------------------------------------------------------------------
     83          ////函数名称:             uint8	COM0ModData(void)
     84          ////函数功能:             普通卡处理
     85          ////入口参数:             无
     86          ////出口参数:             无
     87          ////--------------------------------------------------------------------------------------------------
     88          //uint8	COM0ModData(void)
     89          //{
     90          //	uint16	CrcCheck;
     91          //		
     92          //	CrcCheck = GetCrc16Check((uint8 *)&l_sModelCard,sizeof(stcModelCard) - 2);
     93          //		
     94          //	if(CrcCheck == l_sModelCard.CrcCheck)				//校验和相等		
     95          //	{			
     96          //		//printfcom0("\r\nModCard(void) CCrcCheck == sModelCard.CrcCheck %d",l_sModelCard.CrcCheck);	
     97          //
     98          //		if(StoreOilBoxModel((stcModelCard *)&l_sModelCard))
     99          //		{
    100          //			SetSucceedIndicate();
    101          //			return	1;
    102          //		}
    103          //		else
    104          //		{
    105          //			StoreErrIndicate();
    106          //			return	0;
    107          //		}
    108          //	}
    109          //	
    110          //	CrcCheckErrIndicate();	
    111          //
    112          //	return	0;
    113          //} 
    114          ////-------------------------------------------------------------------------------------------------
    115          ////函数名称:             uint8	DensityCard(stcCardFlg	sCardFlg)
    116          ////函数功能:             普通卡处理
    117          ////入口参数:             无
    118          ////出口参数:             无
    119          ////--------------------------------------------------------------------------------------------------
    120          ////uint8	DensityCard(stcCardFlg *	sCardFlg)
    121          ////{
    122          ////	static	stcDensity	sDensity;						//密度
    123          ////	uint16		CrcCheck;
    124          ////	
    125          ////	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    126          ////	
    127          ////	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    128          ////	{
    129          ////		sDensity = sCardFlg->sCardPara.sDensity;
    130          ////		
    131          ////		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
    132          ////		
    133          ////		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
    134          ////		{			
    135          ////			//PrintfDebug("\r\n sDensity.Density %d",sDensity.Density );
    136          ////			
    137          ////			if(StoreDensity((stcDensity *)&sDensity))
    138          ////			{
    139          ////				DisplaySet(150,1,"%d",sDensity.Density);
    140          ////				
    141          ////				SetSucceedIndicate();	
    142          ////				
    143          ////				return	1;
    144          ////			}
    145          ////			else
    146          ////			{
    147          ////				StoreErrIndicate();	
    148          ////				
    149          ////				return	0;
    150          ////			}
    151          ////		}
    152          ////	}
    153          ////	
    154          ////	CrcCheckErrIndicate();
    155          ////		
    156          ////	return	0;
    157          ////}
    158          

   \                                 In section .text, align 2, keep-with-next
    159          uint8	ReadCardPara(stcCardPara * sCardPara)
    160          {
   \                     ReadCardPara: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    161          	uint16		CrcCheck;
    162          	ReadCard(CARD_FLG_ADDR+sizeof(stcCardID)+sizeof(stcCardType),
    163          			(uint8 *)sCardPara,sizeof(stcCardPara));
   \   00000004   0x22B4             MOVS     R2,#+180
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x2028             MOVS     R0,#+40
   \   0000000A   0x.... 0x....      BL       ReadCard
    164          
    165          	CrcCheck = GetCrc16Check((uint8 *)sCardPara,sizeof(stcCardPara) - 2);
   \   0000000E   0x21B2             MOVS     R1,#+178
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       GetCrc16Check
   \   00000016   0x0005             MOVS     R5,R0
    166          	
    167          	if(CrcCheck == sCardPara->CrcCheck)		
   \   00000018   0xF8B4 0x00B2      LDRH     R0,[R4, #+178]
   \   0000001C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001E   0x4285             CMP      R5,R0
   \   00000020   0xD101             BNE.N    ??ReadCardPara_0
    168          	{
    169          		return	1;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE000             B.N      ??ReadCardPara_1
    170          	}
    171          	else
    172          	{
    173          		return	0;
   \                     ??ReadCardPara_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??ReadCardPara_1: (+1)
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    174          	}
    175          }
    176          

   \                                 In section .text, align 2, keep-with-next
    177          uint8	WriteCardPara(stcCardPara * sCardPara)
    178          {
   \                     WriteCardPara: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    179          	uint16		CrcCheck;
    180          
    181          	CrcCheck = GetCrc16Check((uint8 *)sCardPara,sizeof(stcCardPara) - 2);
   \   00000004   0x21B2             MOVS     R1,#+178
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       GetCrc16Check
   \   0000000C   0x0005             MOVS     R5,R0
    182          
    183          	sCardPara->CrcCheck = CrcCheck;
   \   0000000E   0xF8A4 0x50B2      STRH     R5,[R4, #+178]
    184          
    185          	WriteCard(CARD_FLG_ADDR+sizeof(stcCardID)+sizeof(stcCardType),
    186          			(uint8 *)sCardPara,sizeof(stcCardPara));
   \   00000012   0x22B4             MOVS     R2,#+180
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x2028             MOVS     R0,#+40
   \   00000018   0x.... 0x....      BL       WriteCard
    187          	
    188          	return 1;	
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    189          }
    190          

   \                                 In section .text, align 2, keep-with-next
    191          uint16	GetCardDensityVal(void)
    192          {
   \                     GetCardDensityVal: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B4             SUB      SP,SP,#+208
    193          	stcDensity	sDensity;						//密度
    194          	stcCardPara	sCardPara;
    195          	uint16		CrcCheck;
    196          	
    197          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0xA806             ADD      R0,SP,#+24
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD021             BEQ.N    ??GetCardDensityVal_0
    198          	{
    199          		sDensity = sCardPara.sDensity;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0xA906             ADD      R1,SP,#+24
   \   00000012   0x2218             MOVS     R2,#+24
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    200          		
    201          		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
   \   00000018   0x2116             MOVS     R1,#+22
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       GetCrc16Check
   \   00000020   0x0004             MOVS     R4,R0
    202          		
    203          		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
   \   00000022   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD112             BNE.N    ??GetCardDensityVal_0
    204          		{			
    205          			if(StoreDensity((stcDensity *)&sDensity))
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       StoreDensity
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD009             BEQ.N    ??GetCardDensityVal_1
    206          			{
    207          				DisplaySet(150,1,"%d",sDensity.Density);
   \   00000036   0x9B02             LDR      R3,[SP, #+8]
   \   00000038   0x....             ADR.N    R2,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2096             MOVS     R0,#+150
   \   0000003E   0x.... 0x....      BL       DisplaySet
    208          				
    209          				SetSucceedIndicate();	
   \   00000042   0x.... 0x....      BL       SetSucceedIndicate
    210          				
    211          				return	1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE006             B.N      ??GetCardDensityVal_2
    212          			}
    213          			else
    214          			{
    215          				StoreErrIndicate();	
   \                     ??GetCardDensityVal_1: (+1)
   \   0000004A   0x.... 0x....      BL       StoreErrIndicate
    216          				
    217          				return	0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE002             B.N      ??GetCardDensityVal_2
    218          			}
    219          		}
    220          	}
    221          	
    222          	CrcCheckErrIndicate();
   \                     ??GetCardDensityVal_0: (+1)
   \   00000052   0x.... 0x....      BL       CrcCheckErrIndicate
    223          		
    224          	return	0;
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??GetCardDensityVal_2: (+1)
   \   00000058   0xB034             ADD      SP,SP,#+208
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    225          }
    226          

   \                                 In section .text, align 2, keep-with-next
    227          uint8	DensityCard(void)
    228          {
   \                     DensityCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B4             SUB      SP,SP,#+208
    229          	stcDensity	sDensity;						//密度
    230          	stcCardPara	sCardPara;
    231          	uint16		CrcCheck;
    232          	
    233          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0xA806             ADD      R0,SP,#+24
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD021             BEQ.N    ??DensityCard_0
    234          	{
    235          		sDensity = sCardPara.sDensity;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0xA906             ADD      R1,SP,#+24
   \   00000012   0x2218             MOVS     R2,#+24
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    236          		
    237          		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
   \   00000018   0x2116             MOVS     R1,#+22
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       GetCrc16Check
   \   00000020   0x0004             MOVS     R4,R0
    238          		
    239          		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
   \   00000022   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD112             BNE.N    ??DensityCard_0
    240          		{			
    241          			if(StoreDensity((stcDensity *)&sDensity))
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       StoreDensity
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD009             BEQ.N    ??DensityCard_1
    242          			{
    243          				DisplaySet(150,1,"%d",sDensity.Density);
   \   00000036   0x9B02             LDR      R3,[SP, #+8]
   \   00000038   0x....             ADR.N    R2,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2096             MOVS     R0,#+150
   \   0000003E   0x.... 0x....      BL       DisplaySet
    244          				
    245          				SetSucceedIndicate();	
   \   00000042   0x.... 0x....      BL       SetSucceedIndicate
    246          				
    247          				return	1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE006             B.N      ??DensityCard_2
    248          			}
    249          			else
    250          			{
    251          				StoreErrIndicate();	
   \                     ??DensityCard_1: (+1)
   \   0000004A   0x.... 0x....      BL       StoreErrIndicate
    252          				
    253          				return	0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE002             B.N      ??DensityCard_2
    254          			}
    255          		}
    256          	}
    257          	
    258          	CrcCheckErrIndicate();
   \                     ??DensityCard_0: (+1)
   \   00000052   0x.... 0x....      BL       CrcCheckErrIndicate
    259          		
    260          	return	0;
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??DensityCard_2: (+1)
   \   00000058   0xB034             ADD      SP,SP,#+208
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    261          } 
    262           
    263          //
    264          //extern	uint8 StoreDenChangeTimes(uint32  Times);
    265          //
    266          ////------------------------------------------------------------------------
    267          ////  名  称 ：	uint8 	ReadCurFlshTimes(void)
    268          ////  功  能 ：	读当前记录装置记录流水号
    269          //// 入口参数：	无
    270          //// 出口参数：	当前流水号
    271          ////------------------------------------------------------------------------
    272          //extern	uint32 ReadDenChangeTimes(void);
    273          //
    274          ////-------------------------------------------------------------------------------------------------
    275          ////函数名称:             uint8	DenDataCard(stcCardFlg	sCardFlg)
    276          ////函数功能:             普通卡处理
    277          ////入口参数:             无
    278          ////出口参数:             无
    279          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    280          uint8	DenDataCard(stcCardFlg *	sCardFlg)
    281          {
   \                     DenDataCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    282          
    283          	DensityCard();
   \   00000004   0x.... 0x....      BL       DensityCard
    284          
    285          	DisplaySet(100,1,"DATA.");
   \   00000008   0x....             LDR.N    R2,??DataTable8_3
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2064             MOVS     R0,#+100
   \   0000000E   0x.... 0x....      BL       DisplaySet
    286          	
    287          	DataCard(0);												//数据卡，进行数据转取
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       DataCard
    288          		
    289          	return	1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    290          } 
    291          
    292          ////-------------------------------------------------------------------------------------------------
    293          ////函数名称:             uint8	DataDensityCard(stcCardFlg	sCardFlg)
    294          ////函数功能:             普通卡处理
    295          ////入口参数:             无
    296          ////出口参数:             无
    297          ////--------------------------------------------------------------------------------------------------
    298          //void	DataDensityCard(stcCardFlg *	sCardFlg)
    299          //{
    300          //	static	stcDensity	sDensity;						//密度
    301          //	uint16		CrcCheck;
    302          //	
    303          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    304          //	
    305          //	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    306          //	{
    307          //		sDensity = sCardFlg->sCardPara.sDensity;
    308          //		
    309          //		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
    310          //		
    311          //		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
    312          //		{			
    313          //			if(sDensity.AddOilStationNum == 1)
    314          //			{
    315          //				//PrintfDebug("\r\n sDensity.Density %d",sDensity.Density );
    316          //				
    317          //				if(StoreDensity((stcDensity *)&sDensity))
    318          //				{
    319          //					SetSucceedIndicate();	
    320          //				}
    321          //			}
    322          //		}
    323          //	}	
    324          //} 
    325          //
    326          ////-------------------------------------------------------------------------------------------------
    327          ////函数名称:             void	ComModCard(stcCardFlg	sCardFlg)
    328          ////函数功能:           	特殊模型卡
    329          ////入口参数:             无
    330          ////出口参数:             无
    331          ////--------------------------------------------------------------------------------------------------
    332          //uint8	ComModCard(stcCardFlg	* sCardFlg)
    333          //{
    334          //	static	stcModelComplex	sModelComplex;	
    335          //	uint32	CardAddLen = 0;
    336          //	uint32	FlshAddLen = 0;
    337          //	uint8	i;
    338          //	uint8	CardFlg;
    339          //	uint8	FlshFlg;
    340          //	uint8   *p;
    341          //	uint32	j;
    342          //	
    343          //	FlshAddLen = 0;
    344          //		
    345          //	UnProtectFlash();
    346          //	
    347          //	CardAddLen = sizeof(stcModelCard);
    348          //
    349          //	for(i = 0; i< 1; i++)
    350          //	{
    351          //		CardFlg = ReadCard(CARD_DATA_ADDR + CardAddLen,(uint8 *)&sModelComplex,sizeof(stcModelComplex));
    352          //		FlshFlg = WriteFlsh(FRAM_SIZE + FlshAddLen,(uint16 *)&sModelComplex,sizeof(stcModelComplex));
    353          //    	
    354          //    	p = (uint8 *)&sModelComplex;
    355          //    	
    356          //    	
    357          //    	
    358          //    	
    359          //    	
    360          //    	//printfcom0("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
    361          //    	for(j=0;j < sizeof(stcModelComplex);j++)
    362          //    	{
    363          //    		//printfcom0("%2x",*(p++));
    364          //    	}
    365          //    	//printfcom0("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
    366          //
    367          //    	//printfcom0("\r\n  ModelNum %d;i =%d,CardFlg %d,CARD_DATA_ADDR + CardAddLen %d",sModelComplex.ModelNum,i,CardFlg,CARD_DATA_ADDR + CardAddLen);
    368          //
    369          //		////printfcom0("\r\n\r\n  OilBoxTypCod  %d   %d \r\n",OilBoxTypCod,sComplexModel->ModelNum);
    370          //
    371          //		CardAddLen += sizeof(stcModelComplex);
    372          //		FlshAddLen += sizeof(stcModelComplex);
    373          //	}
    374          //	
    375          //
    376          //	ProtectFlash();
    377          //
    378          //	if(CardFlg == TRUE && FlshFlg == TRUE)
    379          //	{
    380          //		SetSucceedIndicate();
    381          //		DisplaySet(60,2,"SETS");	
    382          //		DisplaySet(60,2,"        ");	
    383          //	}
    384          //	else
    385          //	{
    386          //		DisplaySet(60,2,"ERRO");	
    387          //		DisplaySet(60,2,"        ");	
    388          //		//printfcom0("\r\n CardFlg =%d,FlshFlg =%d,",CardFlg,FlshFlg);
    389          //	}
    390          //	
    391          //	return	1;
    392          //} 
    393          //
    394          ////-------------------------------------------------------------------------------------------------
    395          ////函数名称:             void	DensityCard(stcCardFlg	sCardFlg)
    396          ////函数功能:             普通卡处理
    397          ////入口参数:             无
    398          ////出口参数:             无
    399          ////--------------------------------------------------------------------------------------------------
    400          //uint8	TimeCard(stcCardFlg	* sCardFlg)
    401          //{
    402          ///*
    403          //	stcTime			sTime;							
    404          //	uint16			CrcCheck;
    405          //
    406          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    407          //	
    408          //	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    409          //	{
    410          //		sTime = sCardFlg->sCardPara.sTime;
    411          //		
    412          //		CrcCheck = GetCrc16Check((uint8 *)&sTime,sizeof(sTime) - 2);
    413          //		
    414          //		if(CrcCheck == sTime.CrcCheck)				//校验和相等		
    415          //		{
    416          //			DisplaySet(100,1,"STIM");	
    417          //			
    418          //			WriteTime(sTime);
    419          //	
    420          //			SetSucceedIndicate();	
    421          //			return	1;
    422          //		}
    423          //	}
    424          //	
    425          //	CrcCheckErrIndicate();
    426          //*/		
    427          //	return	0;
    428          //} 
    429          //
    430          ////extern	void	UsbSetAddDipVal( int16	Dip );
    431          ////-------------------------------------------------------------------------------------------------
    432          ////函数名称:             uint8	SetDataCard(stcCardFlg	* sCardFlg)
    433          ////函数功能:             置数据卡
    434          ////入口参数:             整个卡结构体
    435          ////出口参数:             是否成功
    436          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    437          uint8	SetDataCard(void)
    438          {
   \                     SetDataCard: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0AD             SUB      SP,SP,#+180
    439          	stcCardPara	sCardPara;
    440          	
    441          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ReadCardPara
    442          	{
    443          //		 AddDipVal = sCardPara.SetVal;
    444          	}
    445          	
    446          	return 1;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xB02D             ADD      SP,SP,#+180
   \   0000000E   0xBD00             POP      {PC}             ;; return
    447          } 
    448          
    449          
    450          ////-------------------------------------------------------------------------------------------------
    451          ////函数名称:             void	HightCard(stcCardFlg	sCardFlg)
    452          ////函数功能:             高度修正卡处理
    453          ////入口参数:             无
    454          ////出口参数:             无
    455          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    456          uint8	HightCard(void)
    457          {
   \                     HightCard: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0AF             SUB      SP,SP,#+188
    458          	stcReviseHight	sReviseHight;							//高度调整
    459          	uint16		CrcCheck;
    460          	int16		StoreHight;	
    461          	stcCardPara	sCardPara;
    462          		
    463          	if(ReadReviseHight((stcReviseHight *)&sReviseHight))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ReadReviseHight
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD003             BEQ.N    ??HightCard_0
    464          	{
    465          		StoreHight = sReviseHight.ReviseHight;
   \   0000000E   0xF9BD 0x0000      LDRSH    R0,[SP, #+0]
   \   00000012   0x0005             MOVS     R5,R0
   \   00000014   0xE001             B.N      ??HightCard_1
    466          	}
    467          	else
    468          	{
    469          		StoreHight = 0;
   \                     ??HightCard_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0005             MOVS     R5,R0
    470          	}
    471          		
    472          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \                     ??HightCard_1: (+1)
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       ReadCardPara
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD05A             BEQ.N    ??HightCard_2
    473          	{
    474          		sReviseHight = sCardPara.sReviseHight;
   \   00000024   0x980A             LDR      R0,[SP, #+40]
   \   00000026   0x9000             STR      R0,[SP, #+0]
    475          		
    476          		CrcCheck = GetCrc16Check((uint8 *)&sReviseHight,sizeof(sReviseHight) - 2);
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x.... 0x....      BL       GetCrc16Check
   \   00000030   0x0004             MOVS     R4,R0
    477          		
    478          		if(CrcCheck == sReviseHight.CrcCheck)				//校验和相等		
   \   00000032   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000036   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD14E             BNE.N    ??HightCard_2
    479          		{
    480          		//	DisplaySet(150,1,"SHIG");
    481          			StoreHight = StoreHight + sReviseHight.ReviseHight; 	
   \   0000003C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000040   0x1945             ADDS     R5,R0,R5
    482          			if(StoreHight > 500 ||  StoreHight < -500)
   \   00000042   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000044   0xF5B5 0x7FFA      CMP      R5,#+500
   \   00000048   0xDC03             BGT.N    ??HightCard_3
   \   0000004A   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000004C   0xF515 0x7FFA      CMN      R5,#+500
   \   00000050   0xDA26             BGE.N    ??HightCard_4
    483          			{
    484          				if(StoreHight > 500)
   \                     ??HightCard_3: (+1)
   \   00000052   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000054   0xF5B5 0x7FFA      CMP      R5,#+500
   \   00000058   0xDD11             BLE.N    ??HightCard_5
    485          				{
    486          					sReviseHight.ReviseHight = 500;
   \   0000005A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000005E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    487          					DisplaySet(60,2,"TO_H");
   \   00000062   0x....             LDR.N    R2,??DataTable8_4
   \   00000064   0x2102             MOVS     R1,#+2
   \   00000066   0x203C             MOVS     R0,#+60
   \   00000068   0x.... 0x....      BL       DisplaySet
    488          					DisplaySet(60,2,"    ");
   \   0000006C   0x....             LDR.N    R2,??DataTable8_5
   \   0000006E   0x2102             MOVS     R1,#+2
   \   00000070   0x203C             MOVS     R0,#+60
   \   00000072   0x.... 0x....      BL       DisplaySet
    489          					DelayX10ms(250);
   \   00000076   0x20FA             MOVS     R0,#+250
   \   00000078   0x.... 0x....      BL       DelayX10ms
   \   0000007C   0xE012             B.N      ??HightCard_6
    490          				}
    491          				else
    492          				{
    493          					sReviseHight.ReviseHight = -500;
   \                     ??HightCard_5: (+1)
   \   0000007E   0x....             LDR.N    R0,??DataTable8_6  ;; 0xfffffe0c
   \   00000080   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    494          					DisplaySet(60,2,"TO_L");
   \   00000084   0x....             LDR.N    R2,??DataTable8_7
   \   00000086   0x2102             MOVS     R1,#+2
   \   00000088   0x203C             MOVS     R0,#+60
   \   0000008A   0x.... 0x....      BL       DisplaySet
    495          					DisplaySet(60,2,"    ");
   \   0000008E   0x....             LDR.N    R2,??DataTable8_5
   \   00000090   0x2102             MOVS     R1,#+2
   \   00000092   0x203C             MOVS     R0,#+60
   \   00000094   0x.... 0x....      BL       DisplaySet
    496          					DelayX10ms(250);					
   \   00000098   0x20FA             MOVS     R0,#+250
   \   0000009A   0x.... 0x....      BL       DelayX10ms
   \   0000009E   0xE001             B.N      ??HightCard_6
    497          				}
    498          			}
    499          			else
    500          			{
    501          				sReviseHight.ReviseHight = StoreHight;
   \                     ??HightCard_4: (+1)
   \   000000A0   0xF8AD 0x5000      STRH     R5,[SP, #+0]
    502          			}
    503          			
    504          			CrcCheck = GetCrc16Check((uint8 *)&sReviseHight,sizeof(sReviseHight) - 2);
   \                     ??HightCard_6: (+1)
   \   000000A4   0x2102             MOVS     R1,#+2
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0x.... 0x....      BL       GetCrc16Check
   \   000000AC   0x0004             MOVS     R4,R0
    505          			sReviseHight.CrcCheck = CrcCheck;
   \   000000AE   0xF8AD 0x4002      STRH     R4,[SP, #+2]
    506          			
    507          			if(StoreReviseHight((stcReviseHight *)&sReviseHight))
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0x.... 0x....      BL       StoreReviseHight
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD00A             BEQ.N    ??HightCard_7
    508          			{
    509          				DisplaySet(150,1,"%d",sReviseHight.ReviseHight);
   \   000000BC   0xF9BD 0x3000      LDRSH    R3,[SP, #+0]
   \   000000C0   0x....             ADR.N    R2,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x2096             MOVS     R0,#+150
   \   000000C6   0x.... 0x....      BL       DisplaySet
    510          
    511          				SetSucceedIndicate();	
   \   000000CA   0x.... 0x....      BL       SetSucceedIndicate
    512          				
    513          				return	1;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0xE006             B.N      ??HightCard_8
    514          			}
    515          			else
    516          			{
    517          				StoreErrIndicate();	
   \                     ??HightCard_7: (+1)
   \   000000D2   0x.... 0x....      BL       StoreErrIndicate
    518          				
    519          				return	0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xE002             B.N      ??HightCard_8
    520          			}
    521          		}
    522          	}
    523          	
    524          	CrcCheckErrIndicate();
   \                     ??HightCard_2: (+1)
   \   000000DA   0x.... 0x....      BL       CrcCheckErrIndicate
    525          		
    526          	return	0;
   \   000000DE   0x2000             MOVS     R0,#+0
   \                     ??HightCard_8: (+1)
   \   000000E0   0xB02F             ADD      SP,SP,#+188
   \   000000E2   0xBD30             POP      {R4,R5,PC}       ;; return
    527          } 
    528          
    529          ////-------------------------------------------------------------------------------------------------
    530          ////函数名称:             uint8	ModelSelectCard(stcCardFlg	* sCardFlg)
    531          ////函数功能:             模型选择卡
    532          ////入口参数:             整个卡结构体
    533          ////出口参数:             是否成功
    534          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    535          uint8	ModelSelectCard(void)
    536          {
   \                     ModelSelectCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0AE             SUB      SP,SP,#+184
    537          	uint8			ModelNum;							
    538          
    539          	stcCardPara	sCardPara;
    540          
    541          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD016             BEQ.N    ??ModelSelectCard_0
    542          	{
    543          		ModelNum = sCardPara.SetVal;
   \   0000000E   0x9806             LDR      R0,[SP, #+24]
   \   00000010   0x0004             MOVS     R4,R0
    544          
    545          		if(StoreSelectModel(ModelNum))
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       StoreSelectModel
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00A             BEQ.N    ??ModelSelectCard_1
    546          		{
    547          			DisplaySet(150,1,"%d",ModelNum);			
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x0023             MOVS     R3,R4
   \   00000022   0x....             ADR.N    R2,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2096             MOVS     R0,#+150
   \   00000028   0x.... 0x....      BL       DisplaySet
    548          			SetSucceedIndicate();	
   \   0000002C   0x.... 0x....      BL       SetSucceedIndicate
    549          			
    550          			return	1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE006             B.N      ??ModelSelectCard_2
    551          		}
    552          		else
    553          		{
    554          			StoreErrIndicate();	
   \                     ??ModelSelectCard_1: (+1)
   \   00000034   0x.... 0x....      BL       StoreErrIndicate
    555          			
    556          			return	0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE002             B.N      ??ModelSelectCard_2
    557          		}
    558          		
    559          	}
    560          	
    561          	CrcCheckErrIndicate();
   \                     ??ModelSelectCard_0: (+1)
   \   0000003C   0x.... 0x....      BL       CrcCheckErrIndicate
    562          		
    563          	return	0;
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??ModelSelectCard_2: (+1)
   \   00000042   0xB02E             ADD      SP,SP,#+184
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    564          }
    565          //
    566          //extern	float		l_Density;		
    567          //extern	float  		l_ReviseHight;              		//修正高度
    568          //extern  void		ReCalPara(uint8	Flg);
    569          //extern	int16  		GetDip1Prs(void);
    570          //extern	int16  		GetDip2Prs(void);
    571          //extern	uint8  		GetOilBoxCod(void);
    572          //
    573          ////-------------------------------------------------------------------------------------------------
    574          ////函数名称:             uint8	DebugCard(stcCardFlg	* sCardFlg)
    575          ////函数功能:             调试卡
    576          ////入口参数:             无
    577          ////出口参数:             无
    578          ////--------------------------------------------------------------------------------------------------
    579          //uint8	DebugCard(stcCardFlg	* sCardFlg)
    580          //{
    581          //	uint32	AllStrLen = 0;
    582          //	int16	CurDip1Prs;
    583          //	int16	CurDip2Prs;
    584          //	uint8	ModNum;
    585          //	uint16	Density;
    586          //	uint16	Hight;
    587          //	uint16	CrcCheck;
    588          //	
    589          //	ReCalPara(1);
    590          //
    591          //	CurDip1Prs	=	GetDip1Prs();
    592          //	CurDip2Prs	=	GetDip2Prs();
    593          //	ModNum		=  	GetOilBoxCod();
    594          //	Density		=  	(uint16)(l_Density*1000);
    595          //	Hight		= 	(uint16)l_ReviseHight;
    596          //	
    597          //	DisplaySet(150,1,"DIP1");								
    598          //	DisplaySet(200,1,"%d",CurDip1Prs);					
    599          //	
    600          //	DisplaySet(150,1,"DIP2");								
    601          //	DisplaySet(200,1,"%d",CurDip2Prs);					
    602          //	
    603          //	DisplaySet(150,1,"MODE");								
    604          //	DisplaySet(200,1,"C_%d",ModNum);							
    605          //	
    606          //	DisplaySet(150,1,"DENS");
    607          //	DisplaySet(200,1,"%d",Density);
    608          //	
    609          //	DisplaySet(150,1,"HIGH");
    610          //	DisplaySet(200,1,"%d",Hight);	
    611          //	
    612          //	PrintfTime();
    613          //	DisplayTime();
    614          //
    615          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&CurDip1Prs,2);
    616          //	
    617          //	AllStrLen += 2;
    618          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&CurDip2Prs,2);
    619          //	
    620          //	AllStrLen += 2;
    621          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&ModNum,2);
    622          //	
    623          //	AllStrLen += 2;
    624          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&Density,2);
    625          //	
    626          //	AllStrLen += 2;
    627          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&Hight,2);
    628          //	
    629          //	AllStrLen += 2;
    630          //	sCardFlg->sCardPara.sDebugCard.BufLen = AllStrLen;			//有效数据长度
    631          //
    632          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara.sDebugCard,sizeof(sCardFlg->sCardPara.sDebugCard )- 2);
    633          //	sCardFlg->sCardPara.sDebugCard.CrcCheck = CrcCheck;
    634          //
    635          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    636          //	sCardFlg->sCardPara.CrcCheck = CrcCheck;	
    637          //	
    638          //	CrcCheck = GetCrc16Check((uint8 *)sCardFlg,sizeof(stcCardFlg) - 2);
    639          //	sCardFlg->CrcCheck = CrcCheck;		
    640          //	
    641          //	WriteCardFlg(sCardFlg);										//修改IC卡标志页	
    642          //	
    643          //	return 	1;
    644          //	
    645          ///*
    646          //	static	stcDebugCard	sDebugCard;							//高度调整
    647          //	uint16	CrcCheck;
    648          //
    649          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    650          //	
    651          //	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    652          //	{
    653          //		sDebugCard = sCardFlg->sCardPara.sDebugCard;
    654          //		
    655          //		CrcCheck = GetCrc16Check((uint8 *)&sDebugCard,sizeof(sDebugCard) - 2);
    656          //		
    657          //		if(CrcCheck == sDebugCard.CrcCheck)				//校验和相等		
    658          //		{
    659          //			DisplaySet(100,1,"SDBG");	
    660          //			
    661          //			if(StoreReviseHight((stcReviseHight *)&sDebugCard))
    662          //			{
    663          //				SetSucceedIndicate();	
    664          //				
    665          //				return	1;
    666          //			}
    667          //			else
    668          //			{
    669          //				StoreErrIndicate();	
    670          //				
    671          //				return	0;
    672          //			}
    673          //		}
    674          //	}
    675          //	
    676          //	CrcCheckErrIndicate();
    677          //		
    678          //	return	0;
    679          //*/
    680          //}
    681          //
    682          ////-------------------------------------------------------------------------------------------------
    683          ////函数名称:             uint8	FixCard(stcCardFlg	* sCardFlg)
    684          ////函数功能:             高度修正卡处理
    685          ////入口参数:             无
    686          ////出口参数:             无
    687          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    688          uint8	FixCard(void)
    689          {
   \                     FixCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B4             SUB      SP,SP,#+208
    690          	stcFixInfo		sFixInfo;							//高度调整
    691          	uint16		CrcCheck;
    692          	stcCardPara	sCardPara;
    693          
    694          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD02F             BEQ.N    ??FixCard_0
    695          	{
    696          		sFixInfo = sCardPara.sFixInfo;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0xA911             ADD      R1,SP,#+68
   \   00000012   0x221C             MOVS     R2,#+28
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    697          		
    698          		CrcCheck = GetCrc16Check((uint8 *)&sFixInfo,sizeof(sFixInfo) - 2);
   \   00000018   0x211A             MOVS     R1,#+26
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       GetCrc16Check
   \   00000020   0x0004             MOVS     R4,R0
    699          		
    700          		if(CrcCheck == sFixInfo.CrcCheck)				//校验和相等		
   \   00000022   0xF8BD 0x001A      LDRH     R0,[SP, #+26]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD120             BNE.N    ??FixCard_0
    701          		{
    702          			DisplaySet(100,1,"%d",sFixInfo.LocoTyp);	
   \   0000002C   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   00000030   0x....             ADR.N    R2,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2064             MOVS     R0,#+100
   \   00000036   0x.... 0x....      BL       DisplaySet
    703          			DisplaySet(100,1,"%d",sFixInfo.LocoNum[1]*256+sFixInfo.LocoNum[0]);	
   \   0000003A   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000003E   0xF44F 0x7180      MOV      R1,#+256
   \   00000042   0xF89D 0x2002      LDRB     R2,[SP, #+2]
   \   00000046   0xFB01 0x2300      MLA      R3,R1,R0,R2
   \   0000004A   0x....             ADR.N    R2,??DataTable7  ;; 0x25, 0x64, 0x00, 0x00
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x.... 0x....      BL       DisplaySet
    704          			
    705          			if(StoreFixInfo((stcFixInfo *)&sFixInfo))
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x.... 0x....      BL       StoreFixInfo
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD003             BEQ.N    ??FixCard_1
    706          			{
    707          				SetSucceedIndicate();	
   \   0000005E   0x.... 0x....      BL       SetSucceedIndicate
    708          				return	1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xE006             B.N      ??FixCard_2
    709          			}
    710          			else
    711          			{
    712          				StoreErrIndicate();	
   \                     ??FixCard_1: (+1)
   \   00000066   0x.... 0x....      BL       StoreErrIndicate
    713          				return	0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE002             B.N      ??FixCard_2
    714          			}
    715          		}
    716          
    717          	}
    718          	
    719          	CrcCheckErrIndicate();
   \                     ??FixCard_0: (+1)
   \   0000006E   0x.... 0x....      BL       CrcCheckErrIndicate
    720          		
    721          	return	0;
   \   00000072   0x2000             MOVS     R0,#+0
   \                     ??FixCard_2: (+1)
   \   00000074   0xB034             ADD      SP,SP,#+208
   \   00000076   0xBD10             POP      {R4,PC}          ;; return
    722          } 
    723          //
    724          ////-------------------------------------------------------------------------------------------------
    725          ////函数名称:             uint8	CopyFramCard(stcCardFlg	* sCardFlg)
    726          ////函数功能:             高度修正卡处理
    727          ////入口参数:             无
    728          ////出口参数:             无
    729          ////--------------------------------------------------------------------------------------------------
    730          //uint8	CopyFramCard(stcCardFlg	* sCardFlg)
    731          //{
    732          //	DisplaySet(100,1,"CFRA");	
    733          //
    734          //	FramToCard();
    735          //	
    736          //	SetSucceedIndicate();	
    737          //	
    738          //	return	1;
    739          //} 
    740          //
    741          #define	TIME_ADD_CARD	0x01
    742          #define	TIME_SUB_CARD	0x02
    743          ////-------------------------------------------------------------------------------------------------
    744          ////函数名称:             uint8	ExpandCard(stcCardFlg	* sCardFlg)
    745          ////函数功能:             扩展卡
    746          ////入口参数:             无
    747          ////出口参数:             无
    748          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    749          uint8	ExpandCard(void)
    750          {
   \                     ExpandCard: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0B2             SUB      SP,SP,#+200
    751          	uint8	CardType;
    752          	uint32	i;
    753          	uint32	DisTime = 40;		//500ms
   \   00000006   0x2528             MOVS     R5,#+40
    754          	uint32	Time 	= 0;		//500ms
   \   00000008   0x2600             MOVS     R6,#+0
    755          	uint32	Times 	= 0;	
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    756          	
    757          	stcTime		sTime;
    758          	stcCardPara	sCardPara;
    759          
    760          	if(!ReadCardPara((stcCardPara *)	&sCardPara))
   \   0000000E   0xA804             ADD      R0,SP,#+16
   \   00000010   0x.... 0x....      BL       ReadCardPara
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??ExpandCard_0
    761          	{	return 0;}
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE070             B.N      ??ExpandCard_1
    762          
    763          
    764          /*	
    765          #ifdef	HARD_VER_090426	
    766          	DisplaySet(150,1,"%u-%u-%u",sTime.Year,sTime.Month,sTime.Date);
    767          	DisplaySet(60,1,"         ");	
    768          	DisplaySet(350,1,"%u-%u-%u.",sTime.Hour,sTime.Min,sTime.Sec);	//等待时间补充
    769          	DisplaySet(60,1,"         ");	
    770          #endif
    771          */
    772          	CardType = sCardPara.Reserve0;							//卡类型
   \                     ??ExpandCard_0: (+1)
   \   0000001C   0xF8BD 0x00C0      LDRH     R0,[SP, #+192]
   \   00000020   0x0004             MOVS     R4,R0
    773          	
    774          	ReadTime((stcTime *)&sTime);
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x.... 0x....      BL       ReadTime
    775          	i = sTime.Sec + sTime.Min * 60 +  sTime.Hour * 60 * 60;	
   \   00000028   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002C   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00000030   0x223C             MOVS     R2,#+60
   \   00000032   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000036   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   0000003A   0xF44F 0x6261      MOV      R2,#+3600
   \   0000003E   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000042   0x0007             MOVS     R7,R0
    776          
    777          	while(1)
    778          	{
    779          		if(CardType == TIME_ADD_CARD)	
   \                     ??ExpandCard_2: (+1)
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C01             CMP      R4,#+1
   \   00000048   0xD101             BNE.N    ??ExpandCard_3
    780          		{
    781          			i++;
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
   \   0000004C   0xE005             B.N      ??ExpandCard_4
    782          		}	
    783          		else if(CardType == TIME_SUB_CARD)	
   \                     ??ExpandCard_3: (+1)
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x2C02             CMP      R4,#+2
   \   00000052   0xD101             BNE.N    ??ExpandCard_5
    784          		{
    785          			i--;	
   \   00000054   0x1E7F             SUBS     R7,R7,#+1
   \   00000056   0xE000             B.N      ??ExpandCard_4
    786          		}
    787          		else
    788          		{
    789          			//printfcom0("\r\n 不是时间卡");
    790          			break;
   \                     ??ExpandCard_5: (+1)
   \   00000058   0xE050             B.N      ??ExpandCard_6
    791          		}
    792          		
    793          		i = i % (60*60*24);
   \                     ??ExpandCard_4: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable8_8  ;; 0x15180
   \   0000005C   0xFBB7 0xF1F0      UDIV     R1,R7,R0
   \   00000060   0xFB00 0x7711      MLS      R7,R0,R1,R7
    794          		
    795          		Times++;
   \   00000064   0xF118 0x0801      ADDS     R8,R8,#+1
    796          		
    797          		sTime.Sec  =   i % 60;
   \   00000068   0x203C             MOVS     R0,#+60
   \   0000006A   0xFBB7 0xF1F0      UDIV     R1,R7,R0
   \   0000006E   0xFB00 0x7011      MLS      R0,R0,R1,R7
   \   00000072   0xF88D 0x0008      STRB     R0,[SP, #+8]
    798          		sTime.Min  =  (i / 60 ) % 60;
   \   00000076   0x203C             MOVS     R0,#+60
   \   00000078   0xFBB7 0xF0F0      UDIV     R0,R7,R0
   \   0000007C   0x213C             MOVS     R1,#+60
   \   0000007E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000082   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000086   0xF88D 0x0009      STRB     R0,[SP, #+9]
    799          		sTime.Hour =  ((i/60)/60) % 24;
   \   0000008A   0x203C             MOVS     R0,#+60
   \   0000008C   0xFBB7 0xF0F0      UDIV     R0,R7,R0
   \   00000090   0x213C             MOVS     R1,#+60
   \   00000092   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000096   0x2118             MOVS     R1,#+24
   \   00000098   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000009C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000A0   0xF88D 0x000A      STRB     R0,[SP, #+10]
    800          		
    801          		DisplaySet(1,1,"%02u-%02u-%02u.",sTime.Hour,sTime.Min,sTime.Sec);		//
   \   000000A4   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   \   000000AA   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000000AE   0x9000             STR      R0,[SP, #+0]
   \   000000B0   0xF89D 0x300A      LDRB     R3,[SP, #+10]
   \   000000B4   0x....             LDR.N    R2,??DataTable8_9
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0x.... 0x....      BL       DisplaySet
    802          		DelayX10ms(1);		
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0x.... 0x....      BL       DelayX10ms
    803          
    804          		Time = GetSysTime();
   \   000000C4   0x.... 0x....      BL       GetSysTime
   \   000000C8   0x0006             MOVS     R6,R0
    805          		while(GetSysTime() - Time < DisTime)
   \                     ??ExpandCard_7: (+1)
   \   000000CA   0x.... 0x....      BL       GetSysTime
   \   000000CE   0x1B80             SUBS     R0,R0,R6
   \   000000D0   0x42A8             CMP      R0,R5
   \   000000D2   0xD3FA             BCC.N    ??ExpandCard_7
    806          		{
    807          		//SysHoldTast();;
    808          		}
    809          		
    810          		if(DisTime > 4)
   \   000000D4   0x2D05             CMP      R5,#+5
   \   000000D6   0xD303             BCC.N    ??ExpandCard_8
    811          		{
    812          			DisTime -= Times/10;		
   \   000000D8   0x200A             MOVS     R0,#+10
   \   000000DA   0xFBB8 0xF0F0      UDIV     R0,R8,R0
   \   000000DE   0x1A2D             SUBS     R5,R5,R0
    813          		}
    814          		
    815          		if(GetPlugFlg() != PLUG_IN_CARD)
   \                     ??ExpandCard_8: (+1)
   \   000000E0   0x.... 0x....      BL       GetPlugFlg
   \   000000E4   0x2801             CMP      R0,#+1
   \   000000E6   0xD0AD             BEQ.N    ??ExpandCard_2
    816          		{
    817          			DelayX10ms(200);
   \   000000E8   0x20C8             MOVS     R0,#+200
   \   000000EA   0x.... 0x....      BL       DelayX10ms
    818          			WriteTime(sTime);
   \   000000EE   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   000000F2   0x.... 0x....      BL       WriteTime
    819          			DelayX10ms(100);
   \   000000F6   0x2064             MOVS     R0,#+100
   \   000000F8   0x.... 0x....      BL       DelayX10ms
    820          			break;
    821          		}
    822          	}
    823          	
    824          	return	1;
   \                     ??ExpandCard_6: (+1)
   \   000000FC   0x2001             MOVS     R0,#+1
   \                     ??ExpandCard_1: (+1)
   \   000000FE   0xB032             ADD      SP,SP,#+200
   \   00000100   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    825          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0xFFFFFE0C         DC32     0xfffffe0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x54          DC8 "STRE"
   \              0x52 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x43 0x52          DC8 "CRCE"
   \              0x43 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x44 0x41          DC8 "DATA."
   \              0x54 0x41    
   \              0x2E 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x54 0x4F          DC8 "TO_H"
   \              0x5F 0x48    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x20 0x20          DC8 "    "
   \              0x20 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x54 0x4F          DC8 "TO_L"
   \              0x5F 0x4C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x25 0x30          DC8 "%02u-%02u-%02u."
   \              0x32 0x75    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x75 0x2D    
   \              0x25 0x30    
   \              0x32 0x75    
   \              0x2E 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CrcCheckErrIndicate
         8   -> DisplaySet
       8   DenDataCard
         8   -> DataCard
         8   -> DensityCard
         8   -> DisplaySet
     216   DensityCard
       216   -> CrcCheckErrIndicate
       216   -> DisplaySet
       216   -> GetCrc16Check
       216   -> ReadCardPara
       216   -> SetSucceedIndicate
       216   -> StoreDensity
       216   -> StoreErrIndicate
       216   -> __aeabi_memcpy4
     224   ExpandCard
       224   -> DelayX10ms
       224   -> DisplaySet
       224   -> GetPlugFlg
       224   -> GetSysTime
       224   -> ReadCardPara
       224   -> ReadTime
       224   -> WriteTime
     216   FixCard
       216   -> CrcCheckErrIndicate
       216   -> DisplaySet
       216   -> GetCrc16Check
       216   -> ReadCardPara
       216   -> SetSucceedIndicate
       216   -> StoreErrIndicate
       216   -> StoreFixInfo
       216   -> __aeabi_memcpy4
     216   GetCardDensityVal
       216   -> CrcCheckErrIndicate
       216   -> DisplaySet
       216   -> GetCrc16Check
       216   -> ReadCardPara
       216   -> SetSucceedIndicate
       216   -> StoreDensity
       216   -> StoreErrIndicate
       216   -> __aeabi_memcpy4
     200   HightCard
       200   -> CrcCheckErrIndicate
       200   -> DelayX10ms
       200   -> DisplaySet
       200   -> GetCrc16Check
       200   -> ReadCardPara
       200   -> ReadReviseHight
       200   -> SetSucceedIndicate
       200   -> StoreErrIndicate
       200   -> StoreReviseHight
     272   ModCard
       272   -> ReadCard
       272   -> StoreOilBoxModel
     192   ModelSelectCard
       192   -> CrcCheckErrIndicate
       192   -> DisplaySet
       192   -> ReadCardPara
       192   -> SetSucceedIndicate
       192   -> StoreErrIndicate
       192   -> StoreSelectModel
      16   ReadCardPara
        16   -> GetCrc16Check
        16   -> ReadCard
     184   SetDataCard
       184   -> ReadCardPara
       0   SetSucceedIndicate
       8   StoreErrIndicate
         8   -> DisplaySet
      16   WriteCardPara
        16   -> GetCrc16Check
        16   -> WriteCard


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
       8  ?_0
      12  ?_1
       8  ?_2
       4  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
      16  ?_8
      28  CrcCheckErrIndicate
      28  DenDataCard
      92  DensityCard
     260  ExpandCard
     120  FixCard
      92  GetCardDensityVal
     228  HightCard
      72  ModCard
      70  ModelSelectCard
      42  ReadCardPara
      16  SetDataCard
       2  SetSucceedIndicate
      28  StoreErrIndicate
      32  WriteCardPara

 
    80 bytes in section .rodata
 1 154 bytes in section .text
 
 1 154 bytes of CODE  memory
    80 bytes of CONST memory

Errors: none
Warnings: none
