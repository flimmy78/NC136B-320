###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\CSB\source\debug_frmwrk.c
#    Command line =  
#        "F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\CSB\source\debug_frmwrk.c" -D
#        RELEASE -lCN "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\debug_frmwrk.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\debug_frmwrk.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Software\CSB\source\debug_frmwrk.c
      1          /**********************************************************************
      2          * $Id$		debug_frmwrk.c				2010-05-21
      3          *//**
      4          * @file		debug_frmwrk.c
      5          * @brief	Contains some utilities that used for debugging through UART
      6          * @version	2.0
      7          * @date		21. May. 2010
      8          * @author	NXP MCU SW Application Team
      9          *
     10          * Copyright(C) 2010, NXP Semiconductor
     11          * All rights reserved.
     12          *
     13          ***********************************************************************
     14          * Software that is described herein is for illustrative purposes only
     15          * which provides customers with programming information regarding the
     16          * products. This software is supplied "AS IS" without any warranties.
     17          * NXP Semiconductors assumes no responsibility or liability for the
     18          * use of the software, conveys no license or title under any patent,
     19          * copyright, or mask work right to the product. NXP Semiconductors
     20          * reserves the right to make changes in the software without
     21          * notification. NXP Semiconductors also make no representation or
     22          * warranty that such application will be suitable for the specified
     23          * use without further testing or modification.
     24          * Permission to use, copy, modify, and distribute this software and its
     25          * documentation is hereby granted, under NXP Semiconductors'
     26          * relevant copyright in the software, without fee, provided that it
     27          * is used in conjunction with NXP Semiconductors microcontrollers.  This
     28          * copyright, permission, and disclaimer notice must appear in all copies of
     29          * this code.
     30          **********************************************************************/
     31          #include "string.h"
     32          #include "debug_frmwrk.h"
     33          #include "lpc17xx_pinsel.h"
     34          #include <stdarg.h>
     35          #include <includes.h>
     36          
     37          
     38          /* If this source file built with example, the LPC17xx FW library configuration
     39           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     40           * otherwise the default FW library configuration file must be included instead
     41           */
     42          #ifdef __BUILD_WITH_EXAMPLE__
     43          #include "lpc17xx_libcfg.h"
     44          #else
     45          #include "lpc17xx_libcfg_default.h"
     46          #endif /* __BUILD_WITH_EXAMPLE__ */
     47          
     48          #ifdef _DBGFWK
     49          /* Debug framework */
     50          

   \                                 In section .bss, align 4
     51          void (*_db_msg)(LPC_UART_TypeDef *UARTx, const void *s);
   \                     _db_msg:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     52          void (*_db_msg_)(LPC_UART_TypeDef *UARTx, const void *s);
   \                     _db_msg_:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     53          void (*_db_char)(LPC_UART_TypeDef *UARTx, uint8_t ch);
   \                     _db_char:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     54          void (*_db_dec)(LPC_UART_TypeDef *UARTx, uint8_t decn);
   \                     _db_dec:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     55          void (*_db_dec_16)(LPC_UART_TypeDef *UARTx, uint16_t decn);
   \                     _db_dec_16:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     56          void (*_db_dec_32)(LPC_UART_TypeDef *UARTx, uint32_t decn);
   \                     _db_dec_32:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     57          void (*_db_hex)(LPC_UART_TypeDef *UARTx, uint8_t hexn);
   \                     _db_hex:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          void (*_db_hex_16)(LPC_UART_TypeDef *UARTx, uint16_t hexn);
   \                     _db_hex_16:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     59          void (*_db_hex_32)(LPC_UART_TypeDef *UARTx, uint32_t hexn);
   \                     _db_hex_32:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     60          uint8_t (*_db_get_char)(LPC_UART_TypeDef *UARTx);
   \                     _db_get_char:
   \   00000000                      DS8 4
     61          
     62          
     63          /*********************************************************************//**
     64           * @brief		Puts a character to UART port
     65           * @param[in]	UARTx	Pointer to UART peripheral
     66           * @param[in]	ch		Character to put
     67           * @return		None
     68           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     69          void UARTPutChar (LPC_UART_TypeDef *UARTx, uint8_t ch)
     70          {
   \                     UARTPutChar: (+1)
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     71          	UART_Send(UARTx, &ch, 1, BLOCKING);
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xA901             ADD      R1,SP,#+4
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       UART_Send
     72          }
   \   00000010   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     73          
     74          
     75          /*********************************************************************//**
     76           * @brief		Get a character to UART port
     77           * @param[in]	UARTx	Pointer to UART peripheral
     78           * @return		character value that returned
     79           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     80          uint8_t UARTGetChar (LPC_UART_TypeDef *UARTx)
     81          {
   \                     UARTGetChar: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     82          	uint8_t tmp = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
     83          	UART_Receive(UARTx, &tmp, 1, BLOCKING);
   \   0000000C   0x2301             MOVS     R3,#+1
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x4669             MOV      R1,SP
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       UART_Receive
     84          	return(tmp);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     85          }
     86          
     87          
     88          /*********************************************************************//**
     89           * @brief		Puts a string to UART port
     90           * @param[in]	UARTx 	Pointer to UART peripheral
     91           * @param[in]	str 	string to put
     92           * @return		None
     93           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     94          void UARTPuts(LPC_UART_TypeDef *UARTx, const void *str)
     95          {
   \                     UARTPuts: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     96          	uint8_t *s = (uint8_t *) str;
   \   00000006   0x002E             MOVS     R6,R5
     97          
     98          	while (*s)
   \                     ??UARTPuts_0: (+1)
   \   00000008   0x7830             LDRB     R0,[R6, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD005             BEQ.N    ??UARTPuts_1
     99          	{
    100          		UARTPutChar(UARTx, *s++);
   \   0000000E   0x7831             LDRB     R1,[R6, #+0]
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       UARTPutChar
   \   00000016   0x1C76             ADDS     R6,R6,#+1
   \   00000018   0xE7F6             B.N      ??UARTPuts_0
    101          	}
    102          }
   \                     ??UARTPuts_1: (+1)
   \   0000001A   0xBD70             POP      {R4-R6,PC}       ;; return
    103          
    104          
    105          /*********************************************************************//**
    106           * @brief		Puts a string to UART port and print new line
    107           * @param[in]	UARTx	Pointer to UART peripheral
    108           * @param[in]	str		String to put
    109           * @return		None
    110           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    111          void UARTPuts_(LPC_UART_TypeDef *UARTx, const void *str)
    112          {
   \                     UARTPuts_: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    113          	UARTPuts (UARTx, str);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       UARTPuts
    114          	UARTPuts (UARTx, "\n\r");
   \   0000000E   0x....             ADR.N    R1,??DataTable4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       UARTPuts
    115          }
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    116          
    117          
    118          /*********************************************************************//**
    119           * @brief		Puts a decimal number to UART port
    120           * @param[in]	UARTx	Pointer to UART peripheral
    121           * @param[in]	decnum	Decimal number (8-bit long)
    122           * @return		None
    123           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    124          void UARTPutDec(LPC_UART_TypeDef *UARTx, uint8_t decnum)
    125          {
   \                     UARTPutDec: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    126          	uint8_t c1=decnum%10;
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000010   0xFB00 0x5611      MLS      R6,R0,R1,R5
    127          	uint8_t c2=(decnum/10)%10;
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   0000001C   0x210A             MOVS     R1,#+10
   \   0000001E   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000022   0xFB01 0x0712      MLS      R7,R1,R2,R0
    128          	uint8_t c3=(decnum/100)%10;
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   0000002E   0x210A             MOVS     R1,#+10
   \   00000030   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000034   0xFB01 0x0812      MLS      R8,R1,R2,R0
    129          	UARTPutChar(UARTx, '0'+c3);
   \   00000038   0xF118 0x0130      ADDS     R1,R8,#+48
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       UARTPutChar
    130          	UARTPutChar(UARTx, '0'+c2);
   \   00000044   0xF117 0x0130      ADDS     R1,R7,#+48
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       UARTPutChar
    131          	UARTPutChar(UARTx, '0'+c1);
   \   00000050   0xF116 0x0130      ADDS     R1,R6,#+48
   \   00000054   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x.... 0x....      BL       UARTPutChar
    132          }
   \   0000005C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    133          
    134          /*********************************************************************//**
    135           * @brief		Puts a decimal number to UART port
    136           * @param[in]	UARTx	Pointer to UART peripheral
    137           * @param[in]	decnum	Decimal number (8-bit long)
    138           * @return		None
    139           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    140          void UARTPutDec16(LPC_UART_TypeDef *UARTx, uint16_t decnum)
    141          {
   \                     UARTPutDec16: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    142          	uint8_t c1=decnum%10;
   \   00000008   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000010   0xFB00 0x5611      MLS      R6,R0,R1,R5
    143          	uint8_t c2=(decnum/10)%10;
   \   00000014   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   0000001C   0x210A             MOVS     R1,#+10
   \   0000001E   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000022   0xFB01 0x0712      MLS      R7,R1,R2,R0
    144          	uint8_t c3=(decnum/100)%10;
   \   00000026   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   0000002E   0x210A             MOVS     R1,#+10
   \   00000030   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000034   0xFB01 0x0812      MLS      R8,R1,R2,R0
    145          	uint8_t c4=(decnum/1000)%10;
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003E   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000042   0x210A             MOVS     R1,#+10
   \   00000044   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000048   0xFB01 0x0912      MLS      R9,R1,R2,R0
    146          	uint8_t c5=(decnum/10000)%10;
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000052   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000056   0x210A             MOVS     R1,#+10
   \   00000058   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000005C   0xFB01 0x0A12      MLS      R10,R1,R2,R0
    147          	UARTPutChar(UARTx, '0'+c5);
   \   00000060   0xF11A 0x0130      ADDS     R1,R10,#+48
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       UARTPutChar
    148          	UARTPutChar(UARTx, '0'+c4);
   \   0000006C   0xF119 0x0130      ADDS     R1,R9,#+48
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       UARTPutChar
    149          	UARTPutChar(UARTx, '0'+c3);
   \   00000078   0xF118 0x0130      ADDS     R1,R8,#+48
   \   0000007C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       UARTPutChar
    150          	UARTPutChar(UARTx, '0'+c2);
   \   00000084   0xF117 0x0130      ADDS     R1,R7,#+48
   \   00000088   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008A   0x0020             MOVS     R0,R4
   \   0000008C   0x.... 0x....      BL       UARTPutChar
    151          	UARTPutChar(UARTx, '0'+c1);
   \   00000090   0xF116 0x0130      ADDS     R1,R6,#+48
   \   00000094   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000096   0x0020             MOVS     R0,R4
   \   00000098   0x.... 0x....      BL       UARTPutChar
    152          }
   \   0000009C   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    153          
    154          /*********************************************************************//**
    155           * @brief		Puts a decimal number to UART port
    156           * @param[in]	UARTx	Pointer to UART peripheral
    157           * @param[in]	decnum	Decimal number (8-bit long)
    158           * @return		None
    159           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    160          void UARTPutDec32(LPC_UART_TypeDef *UARTx, uint32_t decnum)
    161          {
   \                     UARTPutDec32: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    162          	uint8_t c1=decnum%10;
   \   00000008   0x200A             MOVS     R0,#+10
   \   0000000A   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000000E   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
    163          	uint8_t c2=(decnum/10)%10;
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000001C   0x210A             MOVS     R1,#+10
   \   0000001E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000022   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000026   0xF88D 0x0002      STRB     R0,[SP, #+2]
    164          	uint8_t c3=(decnum/100)%10;
   \   0000002A   0x2064             MOVS     R0,#+100
   \   0000002C   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000030   0x210A             MOVS     R1,#+10
   \   00000032   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000036   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000003A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    165          	uint8_t c4=(decnum/1000)%10;
   \   0000003E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000042   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000046   0x210A             MOVS     R1,#+10
   \   00000048   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000004C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000050   0xF88D 0x0000      STRB     R0,[SP, #+0]
    166          	uint8_t c5=(decnum/10000)%10;
   \   00000054   0xF242 0x7010      MOVW     R0,#+10000
   \   00000058   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000005C   0x210A             MOVS     R1,#+10
   \   0000005E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000062   0xFB01 0x0612      MLS      R6,R1,R2,R0
    167          	uint8_t c6=(decnum/100000)%10;
   \   00000066   0x....             LDR.N    R0,??DataTable5_1  ;; 0x186a0
   \   00000068   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000006C   0x210A             MOVS     R1,#+10
   \   0000006E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000072   0xFB01 0x0712      MLS      R7,R1,R2,R0
    168          	uint8_t c7=(decnum/1000000)%10;
   \   00000076   0x....             LDR.N    R0,??DataTable5_2  ;; 0xf4240
   \   00000078   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000007C   0x210A             MOVS     R1,#+10
   \   0000007E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000082   0xFB01 0x0812      MLS      R8,R1,R2,R0
    169          	uint8_t c8=(decnum/10000000)%10;
   \   00000086   0x....             LDR.N    R0,??DataTable5_3  ;; 0x989680
   \   00000088   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000008C   0x210A             MOVS     R1,#+10
   \   0000008E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000092   0xFB01 0x0912      MLS      R9,R1,R2,R0
    170          	uint8_t c9=(decnum/100000000)%10;
   \   00000096   0x....             LDR.N    R0,??DataTable5_4  ;; 0x5f5e100
   \   00000098   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000009C   0x210A             MOVS     R1,#+10
   \   0000009E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000A2   0xFB01 0x0A12      MLS      R10,R1,R2,R0
    171          	uint8_t c10=(decnum/1000000000)%10;
   \   000000A6   0x....             LDR.N    R0,??DataTable5_5  ;; 0x3b9aca00
   \   000000A8   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   000000AC   0x210A             MOVS     R1,#+10
   \   000000AE   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000B2   0xFB01 0x0B12      MLS      R11,R1,R2,R0
    172          	UARTPutChar(UARTx, '0'+c10);
   \   000000B6   0xF11B 0x0130      ADDS     R1,R11,#+48
   \   000000BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BC   0x0020             MOVS     R0,R4
   \   000000BE   0x.... 0x....      BL       UARTPutChar
    173          	UARTPutChar(UARTx, '0'+c9);
   \   000000C2   0xF11A 0x0130      ADDS     R1,R10,#+48
   \   000000C6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x.... 0x....      BL       UARTPutChar
    174          	UARTPutChar(UARTx, '0'+c8);
   \   000000CE   0xF119 0x0130      ADDS     R1,R9,#+48
   \   000000D2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x.... 0x....      BL       UARTPutChar
    175          	UARTPutChar(UARTx, '0'+c7);
   \   000000DA   0xF118 0x0130      ADDS     R1,R8,#+48
   \   000000DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E0   0x0020             MOVS     R0,R4
   \   000000E2   0x.... 0x....      BL       UARTPutChar
    176          	UARTPutChar(UARTx, '0'+c6);
   \   000000E6   0xF117 0x0130      ADDS     R1,R7,#+48
   \   000000EA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000EC   0x0020             MOVS     R0,R4
   \   000000EE   0x.... 0x....      BL       UARTPutChar
    177          	UARTPutChar(UARTx, '0'+c5);
   \   000000F2   0xF116 0x0130      ADDS     R1,R6,#+48
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0x0020             MOVS     R0,R4
   \   000000FA   0x.... 0x....      BL       UARTPutChar
    178          	UARTPutChar(UARTx, '0'+c4);
   \   000000FE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000102   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000106   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0x.... 0x....      BL       UARTPutChar
    179          	UARTPutChar(UARTx, '0'+c3);
   \   0000010E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000112   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000116   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000118   0x0020             MOVS     R0,R4
   \   0000011A   0x.... 0x....      BL       UARTPutChar
    180          	UARTPutChar(UARTx, '0'+c2);
   \   0000011E   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000122   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000126   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000128   0x0020             MOVS     R0,R4
   \   0000012A   0x.... 0x....      BL       UARTPutChar
    181          	UARTPutChar(UARTx, '0'+c1);
   \   0000012E   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000132   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000136   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000138   0x0020             MOVS     R0,R4
   \   0000013A   0x.... 0x....      BL       UARTPutChar
    182          }
   \   0000013E   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    183          
    184          /*********************************************************************//**
    185           * @brief		Puts a hex number to UART port
    186           * @param[in]	UARTx	Pointer to UART peripheral
    187           * @param[in]	hexnum	Hex number (8-bit long)
    188           * @return		None
    189           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    190          void UARTPutHex (LPC_UART_TypeDef *UARTx, uint8_t hexnum)
    191          {
   \                     UARTPutHex: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    192          	uint8_t nibble, i;
    193          
    194          	UARTPuts(UARTx, "0x");
   \   00000006   0x....             ADR.N    R1,??DataTable5  ;; 0x30, 0x78, 0x00, 0x00
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       UARTPuts
    195          	i = 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x0007             MOVS     R7,R0
    196          	do {
    197          		nibble = (hexnum >> (4*i)) & 0x0F;
   \                     ??UARTPutHex_0: (+1)
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x00B8             LSLS     R0,R7,#+2
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0x4101             ASRS     R1,R1,R0
   \   0000001C   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   00000020   0x0006             MOVS     R6,R0
    198          		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x2E0A             CMP      R6,#+10
   \   00000026   0xDB02             BLT.N    ??UARTPutHex_1
   \   00000028   0xF116 0x0137      ADDS     R1,R6,#+55
   \   0000002C   0xE001             B.N      ??UARTPutHex_2
   \                     ??UARTPutHex_1: (+1)
   \   0000002E   0xF116 0x0130      ADDS     R1,R6,#+48
   \                     ??UARTPutHex_2: (+1)
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       UARTPutChar
    199          	} while (i--);
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x1E47             SUBS     R7,R0,#+1
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD1E6             BNE.N    ??UARTPutHex_0
    200          }
   \   00000044   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    201          
    202          
    203          /*********************************************************************//**
    204           * @brief		Puts a hex number to UART port
    205           * @param[in]	UARTx	Pointer to UART peripheral
    206           * @param[in]	hexnum	Hex number (16-bit long)
    207           * @return		None
    208           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    209          void UARTPutHex16 (LPC_UART_TypeDef *UARTx, uint16_t hexnum)
    210          {
   \                     UARTPutHex16: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    211          	uint8_t nibble, i;
    212          
    213          	UARTPuts(UARTx, "0x");
   \   00000006   0x....             ADR.N    R1,??DataTable5  ;; 0x30, 0x78, 0x00, 0x00
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       UARTPuts
    214          	i = 3;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x0007             MOVS     R7,R0
    215          	do {
    216          		nibble = (hexnum >> (4*i)) & 0x0F;
   \                     ??UARTPutHex16_0: (+1)
   \   00000012   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x00B8             LSLS     R0,R7,#+2
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0x4101             ASRS     R1,R1,R0
   \   0000001C   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   00000020   0x0006             MOVS     R6,R0
    217          		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x2E0A             CMP      R6,#+10
   \   00000026   0xDB02             BLT.N    ??UARTPutHex16_1
   \   00000028   0xF116 0x0137      ADDS     R1,R6,#+55
   \   0000002C   0xE001             B.N      ??UARTPutHex16_2
   \                     ??UARTPutHex16_1: (+1)
   \   0000002E   0xF116 0x0130      ADDS     R1,R6,#+48
   \                     ??UARTPutHex16_2: (+1)
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       UARTPutChar
    218          	} while (i--);
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x1E47             SUBS     R7,R0,#+1
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD1E6             BNE.N    ??UARTPutHex16_0
    219          }
   \   00000044   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    220          
    221          /*********************************************************************//**
    222           * @brief		Puts a hex number to UART port
    223           * @param[in]	UARTx	Pointer to UART peripheral
    224           * @param[in]	hexnum	Hex number (32-bit long)
    225           * @return		None
    226           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    227          void UARTPutHex32 (LPC_UART_TypeDef *UARTx, uint32_t hexnum)
    228          {
   \                     UARTPutHex32: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    229          	uint8_t nibble, i;
    230          
    231          	UARTPuts(UARTx, "0x");
   \   00000006   0x....             ADR.N    R1,??DataTable5  ;; 0x30, 0x78, 0x00, 0x00
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       UARTPuts
    232          	i = 7;
   \   0000000E   0x2007             MOVS     R0,#+7
   \   00000010   0x0007             MOVS     R7,R0
    233          	do {
    234          		nibble = (hexnum >> (4*i)) & 0x0F;
   \                     ??UARTPutHex32_0: (+1)
   \   00000012   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000014   0x00B8             LSLS     R0,R7,#+2
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x40C1             LSRS     R1,R1,R0
   \   0000001A   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   0000001E   0x0006             MOVS     R6,R0
    235          		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E0A             CMP      R6,#+10
   \   00000024   0xDB02             BLT.N    ??UARTPutHex32_1
   \   00000026   0xF116 0x0137      ADDS     R1,R6,#+55
   \   0000002A   0xE001             B.N      ??UARTPutHex32_2
   \                     ??UARTPutHex32_1: (+1)
   \   0000002C   0xF116 0x0130      ADDS     R1,R6,#+48
   \                     ??UARTPutHex32_2: (+1)
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       UARTPutChar
    236          	} while (i--);
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x1E47             SUBS     R7,R0,#+1
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1E7             BNE.N    ??UARTPutHex32_0
    237          }
   \   00000042   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    238          
    239          ///*********************************************************************//**
    240          // * @brief		print function that supports format as same as printf()
    241          // * 				function of <stdio.h> library
    242          // * @param[in]	None
    243          // * @return		None
    244          // **********************************************************************/
    245          //void  _printf (const  char *format, ...)
    246          //{
    247          //    static  char  buffer[512 + 1];
    248          //            va_list     vArgs;
    249          //            char	*tmp;
    250          //    va_start(vArgs, format);
    251          //    vsprintf((char *)buffer, (char const *)format, vArgs);
    252          //    va_end(vArgs);
    253          //
    254          //    _DBG(buffer);
    255          //}
    256          
    257          /*********************************************************************//**
    258           * @brief		print function that supports format as same as printf()
    259           * 				function of <stdio.h> library
    260           * @param[in]	None
    261           * @return		None
    262           **********************************************************************/
    263          //void  printfcom0 (const  char *format, ...)
    264          //{
    265          //    static  char  buffer[512 + 1];
    266          //            va_list     vArgs;
    267          ////            char	*tmp;
    268          //    va_start(vArgs, format);
    269          //    vsprintf((char *)buffer, (char const *)format, vArgs);
    270          //    va_end(vArgs);
    271          //							      
    272          //
    273          //	UARTPuts_((LPC_UART_TypeDef *)LPC_UART0, buffer);
    274          //    //_DBG(buffer);
    275          //}
    276          
    277          extern	uint8 SendCOM3(void *buf,uint32 len);

   \                                 In section .text, align 2, keep-with-next
    278          void printfcom0(const char *format, ...) 
    279          { 
   \                     printfcom0: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB530             PUSH     {R4,R5,LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
   \   00000006   0x0004             MOVS     R4,R0
    280             va_list  argptr;
    281          //   uint32   cnt;
    282             char     a[255];
    283             
    284             strlen(format);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       strlen
    285             if(strlen(format) > (sizeof(a) - 55))
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x28C9             CMP      R0,#+201
   \   00000016   0xD206             BCS.N    ??printfcom0_0
    286             {
    287          //        return FALSE;
    288          		return	;
    289             }
    290             va_start(argptr, format);
   \                     ??printfcom0_1: (+1)
   \   00000018   0xA843             ADD      R0,SP,#+268
   \   0000001A   0x0005             MOVS     R5,R0
    291             
    292          //   cnt = vsprintf(a, format, argptr);
    293             vsprintf(a, format, argptr);
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       vsprintf
    294             
    295             va_end(argptr);
    296             
    297             //SendCOM0(a,strlen(a));
    298          //   return(cnt);
    299          }
   \                     ??printfcom0_0: (+1)
   \   00000026   0xB040             ADD      SP,SP,#+256
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    300          

   \                                 In section .text, align 2, keep-with-next
    301          void printfcom1(const char *format, ...) 
    302          { 
   \                     printfcom1: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
   \   00000004   0xB0C1             SUB      SP,SP,#+260
   \   00000006   0x0004             MOVS     R4,R0
    303          	
    304             va_list  argptr;
    305             uint32   cnt = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    306             char     a[255];
    307             
    308             strlen(format);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       strlen
    309             if(strlen(format) > (sizeof(a) - 55))
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x28C9             CMP      R0,#+201
   \   00000018   0xD218             BCS.N    ??printfcom1_0
    310             {
    311          //        return FALSE;
    312          		return	;
    313             }
    314             va_start(argptr, format);
   \                     ??printfcom1_1: (+1)
   \   0000001A   0xA845             ADD      R0,SP,#+276
   \   0000001C   0x0005             MOVS     R5,R0
    315             
    316             cnt = vsprintf(a, format, argptr);
   \   0000001E   0x002A             MOVS     R2,R5
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       vsprintf
   \   00000028   0x0006             MOVS     R6,R0
    317             vsprintf(a, format, argptr);
   \   0000002A   0x002A             MOVS     R2,R5
   \   0000002C   0x0021             MOVS     R1,R4
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x.... 0x....      BL       vsprintf
    318             
    319             va_end(argptr);
    320             
    321             SendCOM1(a,strlen(a));
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x.... 0x....      BL       strlen
   \   0000003A   0x0001             MOVS     R1,R0
   \   0000003C   0x4668             MOV      R0,SP
   \   0000003E   0x.... 0x....      BL       SendCOM1
    322             while((uint8)cnt--);
   \                     ??printfcom1_2: (+1)
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0x1E46             SUBS     R6,R0,#+1
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1FA             BNE.N    ??printfcom1_2
    323          //   return(cnt);
    324          	
    325          }
   \                     ??printfcom1_0: (+1)
   \   0000004C   0xB041             ADD      SP,SP,#+260
   \   0000004E   0xBC70             POP      {R4-R6}
   \   00000050   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    326          

   \                                 In section .text, align 2, keep-with-next
    327          void printfcom2(const char *format, ...) 
    328          { 
   \                     printfcom2: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
    329          /*
    330            va_list  argptr;
    331          //   uint32   cnt;
    332             char     a[255];
    333             
    334             strlen(format);
    335             if(strlen(format) > (sizeof(a) - 55))
    336             {
    337          //        return FALSE;
    338          		return	;
    339             }
    340             va_start(argptr, format);
    341             
    342          //   cnt = vsprintf(a, format, argptr);
    343             vsprintf(a, format, argptr);
    344             
    345             va_end(argptr);
    346             
    347             SendCOM2(a,strlen(a));
    348          //   return(cnt);
    349          */
    350          //	DelayX10ms(2);
    351          	
    352          
    353          }
   \   00000002   0xB003             ADD      SP,SP,#+12
   \   00000004   0x4770             BX       LR               ;; return
    354          

   \                                 In section .text, align 2, keep-with-next
    355          void printfcom3(const char *format, ...) 
    356          { 
   \                     printfcom3: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB530             PUSH     {R4,R5,LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
   \   00000006   0x0004             MOVS     R4,R0
    357             va_list  argptr;
    358          //   uint32   cnt;
    359             char     a[255];
    360             
    361             strlen(format);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       strlen
    362             if(strlen(format) > (sizeof(a) - 55))
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x28C9             CMP      R0,#+201
   \   00000016   0xD20D             BCS.N    ??printfcom3_0
    363             {
    364          //        return FALSE;
    365          		return	;
    366             }
    367             va_start(argptr, format);
   \                     ??printfcom3_1: (+1)
   \   00000018   0xA843             ADD      R0,SP,#+268
   \   0000001A   0x0005             MOVS     R5,R0
    368             
    369          //   cnt = vsprintf(a, format, argptr);
    370             vsprintf(a, format, argptr);
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       vsprintf
    371             
    372             va_end(argptr);
    373             
    374             SendCOM3(a,strlen(a));
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x.... 0x....      BL       strlen
   \   0000002C   0x0001             MOVS     R1,R0
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x.... 0x....      BL       SendCOM3
    375          //   return(cnt);
    376          }
   \                     ??printfcom3_0: (+1)
   \   00000034   0xB040             ADD      SP,SP,#+256
   \   00000036   0xBC30             POP      {R4,R5}
   \   00000038   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    377          /*********************************************************************//**
    378           * @brief		Initialize Debug frame work through initializing UART port
    379           * @param[in]	None
    380           * @return		None
    381           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    382          void debug_frmwrk_init(void)
    383          {
   \                     debug_frmwrk_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    384          	UART_CFG_Type UARTConfigStruct;
    385          	PINSEL_CFG_Type PinCfg;
    386          
    387          #if (USED_UART_DEBUG_PORT==0)
    388          	/*
    389          	 * Initialize UART0 pin connect
    390          	 */
    391          	PinCfg.Funcnum = 1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xF88D 0x0002      STRB     R0,[SP, #+2]
    392          	PinCfg.OpenDrain = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    393          	PinCfg.Pinmode = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
    394          	PinCfg.Pinnum = 2;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    395          	PinCfg.Portnum = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    396          	PINSEL_ConfigPin(&PinCfg);
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       PINSEL_ConfigPin
    397          	PinCfg.Pinnum = 3;
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    398          	PINSEL_ConfigPin(&PinCfg);
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x.... 0x....      BL       PINSEL_ConfigPin
    399          
    400          #elif (USED_UART_DEBUG_PORT==1)
    401          	/*
    402          	 * Initialize UART1 pin connect
    403          	 */
    404          	PinCfg.Funcnum = 1;
    405          	PinCfg.OpenDrain = 0;
    406          	PinCfg.Pinmode = 0;
    407          	PinCfg.Pinnum = 15;
    408          	PinCfg.Portnum = 0;
    409          	PINSEL_ConfigPin(&PinCfg);
    410          	PinCfg.Pinnum = 16;
    411          	PINSEL_ConfigPin(&PinCfg);
    412          #endif
    413          
    414          	/* Initialize UART Configuration parameter structure to default state:
    415          	 * Baudrate = 9600bps
    416          	 * 8 data bit
    417          	 * 1 Stop bit
    418          	 * None parity
    419          	 */
    420          	UART_ConfigStructInit(&UARTConfigStruct);
   \   00000034   0xA802             ADD      R0,SP,#+8
   \   00000036   0x.... 0x....      BL       UART_ConfigStructInit
    421          
    422          	// Re-configure baudrate to 115200bps
    423          	UARTConfigStruct.Baud_rate = 115200;
   \   0000003A   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000003E   0x9002             STR      R0,[SP, #+8]
    424          
    425          	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
    426          	UART_Init((LPC_UART_TypeDef *)DEBUG_UART_PORT, &UARTConfigStruct);
   \   00000040   0xA902             ADD      R1,SP,#+8
   \   00000042   0x....             LDR.N    R0,??DataTable5_6  ;; 0x4000c000
   \   00000044   0x.... 0x....      BL       UART_Init
    427          
    428          	// Enable UART Transmit
    429          	UART_TxCmd((LPC_UART_TypeDef *)DEBUG_UART_PORT, ENABLE);
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x....             LDR.N    R0,??DataTable5_6  ;; 0x4000c000
   \   0000004C   0x.... 0x....      BL       UART_TxCmd
    430          
    431          	_db_msg	= UARTPuts;
   \   00000050   0x....             LDR.N    R0,??DataTable5_7
   \   00000052   0x....             LDR.N    R1,??DataTable5_8
   \   00000054   0x6008             STR      R0,[R1, #+0]
    432          	_db_msg_ = UARTPuts_;
   \   00000056   0x....             LDR.N    R0,??DataTable5_9
   \   00000058   0x....             LDR.N    R1,??DataTable5_10
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    433          	_db_char = UARTPutChar;
   \   0000005C   0x....             LDR.N    R0,??DataTable5_11
   \   0000005E   0x....             LDR.N    R1,??DataTable5_12
   \   00000060   0x6008             STR      R0,[R1, #+0]
    434          	_db_hex = UARTPutHex;
   \   00000062   0x....             LDR.N    R0,??DataTable5_13
   \   00000064   0x....             LDR.N    R1,??DataTable5_14
   \   00000066   0x6008             STR      R0,[R1, #+0]
    435          	_db_hex_16 = UARTPutHex16;
   \   00000068   0x....             LDR.N    R0,??DataTable5_15
   \   0000006A   0x....             LDR.N    R1,??DataTable5_16
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    436          	_db_hex_32 = UARTPutHex32;
   \   0000006E   0x....             LDR.N    R0,??DataTable5_17
   \   00000070   0x....             LDR.N    R1,??DataTable5_18
   \   00000072   0x6008             STR      R0,[R1, #+0]
    437          	_db_dec = UARTPutDec;
   \   00000074   0x....             LDR.N    R0,??DataTable5_19
   \   00000076   0x....             LDR.N    R1,??DataTable5_20
   \   00000078   0x6008             STR      R0,[R1, #+0]
    438          	_db_dec_16 = UARTPutDec16;
   \   0000007A   0x....             LDR.N    R0,??DataTable5_21
   \   0000007C   0x....             LDR.N    R1,??DataTable5_22
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    439          	_db_dec_32 = UARTPutDec32;
   \   00000080   0x....             LDR.N    R0,??DataTable5_23
   \   00000082   0x....             LDR.N    R1,??DataTable5_24
   \   00000084   0x6008             STR      R0,[R1, #+0]
    440          	_db_get_char = UARTGetChar;
   \   00000086   0x....             LDR.N    R0,??DataTable5_25
   \   00000088   0x....             LDR.N    R1,??DataTable5_26
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    441          }
   \   0000008C   0xB005             ADD      SP,SP,#+20
   \   0000008E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x30 0x78          DC8      0x30, 0x78, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x00989680         DC32     0x989680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x05F5E100         DC32     0x5f5e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x3B9ACA00         DC32     0x3b9aca00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4000C000         DC32     0x4000c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     UARTPuts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     _db_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     UARTPuts_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     _db_msg_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     UARTPutChar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     _db_char

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     UARTPutHex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     _db_hex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     UARTPutHex16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     _db_hex_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     UARTPutHex32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     _db_hex_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     UARTPutDec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     _db_dec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     UARTPutDec16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     _db_dec_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x........         DC32     UARTPutDec32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     _db_dec_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x........         DC32     UARTGetChar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     _db_get_char

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x30 0x78          DC8 "0x"
   \              0x00         
   \   00000003   0x00               DC8 0
    442          #endif /*_DBGFWK */
    443          
    444          
    445          /* --------------------------------- End Of File ------------------------------ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UARTGetChar
        16   -> UART_Receive
      16   UARTPutChar
        16   -> UART_Send
      24   UARTPutDec
        24   -> UARTPutChar
      32   UARTPutDec16
        32   -> UARTPutChar
      40   UARTPutDec32
        40   -> UARTPutChar
      24   UARTPutHex
        24   -> UARTPutChar
        24   -> UARTPuts
      24   UARTPutHex16
        24   -> UARTPutChar
        24   -> UARTPuts
      24   UARTPutHex32
        24   -> UARTPutChar
        24   -> UARTPuts
      16   UARTPuts
        16   -> UARTPutChar
      16   UARTPuts_
        16   -> UARTPuts
      24   debug_frmwrk_init
        24   -> PINSEL_ConfigPin
        24   -> UART_ConfigStructInit
        24   -> UART_Init
        24   -> UART_TxCmd
     280   printfcom0
       280   -> strlen
       280   -> vsprintf
     288   printfcom1
       288   -> SendCOM1
       288   -> strlen
       288   -> vsprintf
      12   printfcom2
     280   printfcom3
       280   -> SendCOM3
       280   -> strlen
       280   -> vsprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ?_0
       4  ?_1
      30  UARTGetChar
      18  UARTPutChar
      96  UARTPutDec
     160  UARTPutDec16
     322  UARTPutDec32
      70  UARTPutHex
      70  UARTPutHex16
      68  UARTPutHex32
      28  UARTPuts
      24  UARTPuts_
       4  _db_char
       4  _db_dec
       4  _db_dec_16
       4  _db_dec_32
       4  _db_get_char
       4  _db_hex
       4  _db_hex_16
       4  _db_hex_32
       4  _db_msg
       4  _db_msg_
     144  debug_frmwrk_init
      46  printfcom0
      84  printfcom1
       6  printfcom2
      60  printfcom3

 
    40 bytes in section .bss
     8 bytes in section .rodata
 1 338 bytes in section .text
 
 1 338 bytes of CODE  memory
     8 bytes of CONST memory
    40 bytes of DATA  memory

Errors: none
Warnings: none
