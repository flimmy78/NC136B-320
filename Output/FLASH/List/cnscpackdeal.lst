###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Application\Library\SlaveConTask\cnscpackdeal.c
#    Command line =  
#        "F:\iar\NC136B-320
#        IC卡模块\Application\Library\SlaveConTask\cnscpackdeal.c" -D RELEASE
#        -lCN "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\cnscpackdeal.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC卡模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\cnscpackdeal.o
#
###############################################################################

F:\iar\NC136B-320 IC卡模块\Application\Library\SlaveConTask\cnscpackdeal.c
      1          //#include <ansi_c.h>
      2          #include <includes.h>
      3          
      4          #include  "csnr_package_deal.h"
      5          #include  "CrcCheck.h"
      6          
      7          uint8 GetCheckSumNR(uint8  Buf[], uint32 Len);
      8          
      9          //数据打包，根据stcCsnrProtocolPara信息，将数据打包成CNSR数据
     10          //

   \                                 In section .text, align 2, keep-with-next
     11          void	DataPackage_CSNR(stcCsnrProtocolPara sprotocolpara,unsigned char 	*csnrbuf,unsigned char 	*csnrlen)
     12          {
   \                     DataPackage_CSNR: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB0C2             SUB      SP,SP,#+264
   \   00000006   0x001C             MOVS     R4,R3
   \   00000008   0x9D4E             LDR      R5,[SP, #+312]
     13          	unsigned char		SndBuf[256] = {0};
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0xF44F 0x7180      MOV      R1,#+256
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
     14          	unsigned char		SumCheck8;
     15          	unsigned short	Crc16;
     16          	unsigned short	AddHeadNum;
     17          	unsigned short	i;
     18          	unsigned char		ByteStation;
     19          //	unsigned char 	FramNum =0;						//序号
     20          	unsigned char		DataLen;
     21          	
     22          	ByteStation = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4681             MOV      R9,R0
     23          	SndBuf[ByteStation++] = FRAM_HERD0;
   \   00000018   0x2010             MOVS     R0,#+16
   \   0000001A   0xA902             ADD      R1,SP,#+8
   \   0000001C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000020   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000024   0xF119 0x0901      ADDS     R9,R9,#+1
     24          	SndBuf[ByteStation++] = FRAM_HERD1;
   \   00000028   0x2028             MOVS     R0,#+40
   \   0000002A   0xA902             ADD      R1,SP,#+8
   \   0000002C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000030   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000034   0xF119 0x0901      ADDS     R9,R9,#+1
     25          	SndBuf[ByteStation++] = sprotocolpara.sourceaddr;	 
   \   00000038   0xF89D 0x0108      LDRB     R0,[SP, #+264]
   \   0000003C   0xA902             ADD      R1,SP,#+8
   \   0000003E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000042   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000046   0xF119 0x0901      ADDS     R9,R9,#+1
     26          	SndBuf[ByteStation++] = sprotocolpara.destaddr;				//地址
   \   0000004A   0xF89D 0x0109      LDRB     R0,[SP, #+265]
   \   0000004E   0xA902             ADD      R1,SP,#+8
   \   00000050   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000054   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000058   0xF119 0x0901      ADDS     R9,R9,#+1
     27          	SndBuf[ByteStation++] = sprotocolpara.framnum;
   \   0000005C   0xF89D 0x010A      LDRB     R0,[SP, #+266]
   \   00000060   0xA902             ADD      R1,SP,#+8
   \   00000062   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000066   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000006A   0xF119 0x0901      ADDS     R9,R9,#+1
     28          	SndBuf[ByteStation++] = (RS485_CHK_CRC<<4) + sprotocolpara.framcode;	
   \   0000006E   0xF89D 0x010B      LDRB     R0,[SP, #+267]
   \   00000072   0x3010             ADDS     R0,R0,#+16
   \   00000074   0xA902             ADD      R1,SP,#+8
   \   00000076   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000007A   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000007E   0xF119 0x0901      ADDS     R9,R9,#+1
     29          	SndBuf[ByteStation++] = sprotocolpara.datalen;
   \   00000082   0xF89D 0x0110      LDRB     R0,[SP, #+272]
   \   00000086   0xA902             ADD      R1,SP,#+8
   \   00000088   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000008C   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000090   0xF119 0x0901      ADDS     R9,R9,#+1
     30          	
     31          	DataLen = sprotocolpara.datalen;
   \   00000094   0xF89D 0x0110      LDRB     R0,[SP, #+272]
   \   00000098   0x4680             MOV      R8,R0
     32          	
     33          	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	//索引区校验
   \   0000009A   0x2105             MOVS     R1,#+5
   \   0000009C   0xF10D 0x000A      ADD      R0,SP,#+10
   \   000000A0   0x.... 0x....      BL       GetCheckSumNR
   \   000000A4   0xF88D 0x0000      STRB     R0,[SP, #+0]
     34          
     35          	SndBuf[ByteStation++] = SumCheck8;
   \   000000A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AC   0xA902             ADD      R1,SP,#+8
   \   000000AE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000B2   0xF809 0x0001      STRB     R0,[R9, R1]
   \   000000B6   0xF119 0x0901      ADDS     R9,R9,#+1
     36          
     37          	memcpy(&SndBuf[8],sprotocolpara.databuf,DataLen);
   \   000000BA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000BE   0x9843             LDR      R0,[SP, #+268]
   \   000000C0   0x9001             STR      R0,[SP, #+4]
   \   000000C2   0xF10D 0x0B10      ADD      R11,SP,#+16
   \   000000C6   0x4642             MOV      R2,R8
   \   000000C8   0x9901             LDR      R1,[SP, #+4]
   \   000000CA   0x4658             MOV      R0,R11
   \   000000CC   0x.... 0x....      BL       __aeabi_memcpy
     38          
     39          	Crc16 = GetCrc16Check(&SndBuf[2],6+sprotocolpara.datalen);
   \   000000D0   0xF89D 0x0110      LDRB     R0,[SP, #+272]
   \   000000D4   0x1D81             ADDS     R1,R0,#+6
   \   000000D6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D8   0xF10D 0x000A      ADD      R0,SP,#+10
   \   000000DC   0x.... 0x....      BL       GetCrc16Check
   \   000000E0   0x4682             MOV      R10,R0
     40          	
     41          	SndBuf[2+6+DataLen+1] = Crc16;
   \   000000E2   0xA802             ADD      R0,SP,#+8
   \   000000E4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000E8   0xEB18 0x0000      ADDS     R0,R8,R0
   \   000000EC   0xF880 0xA009      STRB     R10,[R0, #+9]
     42          	SndBuf[2+6+DataLen]   = Crc16>>8;
   \   000000F0   0x4650             MOV      R0,R10
   \   000000F2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F4   0x0A00             LSRS     R0,R0,#+8
   \   000000F6   0xA902             ADD      R1,SP,#+8
   \   000000F8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000FC   0xEB18 0x0101      ADDS     R1,R8,R1
   \   00000100   0x7208             STRB     R0,[R1, #+8]
     43          
     44          	csnrbuf[0] = SndBuf[0];						//准备数据发送
   \   00000102   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000106   0x7020             STRB     R0,[R4, #+0]
     45          	csnrbuf[1] = SndBuf[1];
   \   00000108   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000010C   0x7060             STRB     R0,[R4, #+1]
     46          	
     47          	AddHeadNum = 0;
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x0006             MOVS     R6,R0
     48          	for(i = 2; i< 2+6+DataLen + 2;i++ )				//数据，补移位 FRAM_HERD0
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0x0007             MOVS     R7,R0
   \                     ??DataPackage_CSNR_0: (+1)
   \   00000116   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000118   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000011C   0xF118 0x000A      ADDS     R0,R8,#+10
   \   00000120   0x4287             CMP      R7,R0
   \   00000122   0xDA14             BGE.N    ??DataPackage_CSNR_1
     49          	{
     50          		csnrbuf[i+AddHeadNum] = SndBuf[i];
   \   00000124   0xA802             ADD      R0,SP,#+8
   \   00000126   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000128   0x5C38             LDRB     R0,[R7, R0]
   \   0000012A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000012C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000012E   0x19F1             ADDS     R1,R6,R7
   \   00000130   0x5508             STRB     R0,[R1, R4]
     51          		
     52          		if(SndBuf[i] == FRAM_HERD0)
   \   00000132   0xA802             ADD      R0,SP,#+8
   \   00000134   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000136   0x5C38             LDRB     R0,[R7, R0]
   \   00000138   0x2810             CMP      R0,#+16
   \   0000013A   0xD106             BNE.N    ??DataPackage_CSNR_2
     53          		{
     54          			csnrbuf[i+AddHeadNum+1] = FRAM_HERD0;
   \   0000013C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000013E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000140   0x19F0             ADDS     R0,R6,R7
   \   00000142   0x1900             ADDS     R0,R0,R4
   \   00000144   0x2110             MOVS     R1,#+16
   \   00000146   0x7041             STRB     R1,[R0, #+1]
     55          			AddHeadNum++;
   \   00000148   0x1C76             ADDS     R6,R6,#+1
     56          		}
     57          	}
   \                     ??DataPackage_CSNR_2: (+1)
   \   0000014A   0x1C7F             ADDS     R7,R7,#+1
   \   0000014C   0xE7E3             B.N      ??DataPackage_CSNR_0
     58          
     59          	csnrbuf[2+6+DataLen + 2 +AddHeadNum] 		= FRAM_END0;
   \                     ??DataPackage_CSNR_1: (+1)
   \   0000014E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000152   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000154   0xEB16 0x0008      ADDS     R0,R6,R8
   \   00000158   0x1900             ADDS     R0,R0,R4
   \   0000015A   0x2110             MOVS     R1,#+16
   \   0000015C   0x7281             STRB     R1,[R0, #+10]
     60          	csnrbuf[2+6+DataLen + 2 +AddHeadNum+1] 	= FRAM_END1;      
   \   0000015E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000162   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000164   0xEB16 0x0008      ADDS     R0,R6,R8
   \   00000168   0x1900             ADDS     R0,R0,R4
   \   0000016A   0x212C             MOVS     R1,#+44
   \   0000016C   0x72C1             STRB     R1,[R0, #+11]
     61          	
     62          	*csnrlen =  2+6+DataLen + 2 + AddHeadNum +2;
   \   0000016E   0xEB16 0x0008      ADDS     R0,R6,R8
   \   00000172   0x300C             ADDS     R0,R0,#+12
   \   00000174   0x7028             STRB     R0,[R5, #+0]
     63          }
   \   00000176   0xB045             ADD      SP,SP,#+276
   \   00000178   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     64          
     65          
     66          //数据解包，将接受到的数据解包到，stcCsnrProtocolPara信息
     67          //能简析，返回1；否则，返回0

   \                                 In section .text, align 2, keep-with-next
     68          unsigned char   DataUnpack_CSNR(stcCsnrProtocolPara *sprotocolpara,unsigned char	*RecBuf,unsigned char RecLen)
     69          {
   \                     DataUnpack_CSNR: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
     70              unsigned short		i,j,k;
     71              unsigned char			SumCheck8;
     72              unsigned char			Tmp;
     73              unsigned short		RecCRC16,Check16;
     74          		unsigned char			DataLen;
     75          		unsigned int			herdtimes = 0;
   \   0000000C   0xF05F 0x0B00      MOVS     R11,#+0
     76          		
     77          
     78            if(RecLen < 10)
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E0A             CMP      R6,#+10
   \   00000014   0xDA01             BGE.N    ??DataUnpack_CSNR_0
     79          		return 0;		
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE0D4             B.N      ??DataUnpack_CSNR_1
     80          	
     81          	for(j = 0;j < RecLen - herdtimes;j++ )														//去重复通讯首字节
   \                     ??DataUnpack_CSNR_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4680             MOV      R8,R0
   \                     ??DataUnpack_CSNR_2: (+1)
   \   0000001E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0xEBB6 0x000B      SUBS     R0,R6,R11
   \   00000028   0x4580             CMP      R8,R0
   \   0000002A   0xD229             BCS.N    ??DataUnpack_CSNR_3
     82          	{
     83          		if(	 	
     84          				RecBuf[j] 	== FRAM_HERD0
     85          			&& 	RecBuf[j+1] == FRAM_HERD0
     86          		   )
   \   0000002C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000030   0xF818 0x0005      LDRB     R0,[R8, R5]
   \   00000034   0x2810             CMP      R0,#+16
   \   00000036   0xD120             BNE.N    ??DataUnpack_CSNR_4
   \   00000038   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003C   0xEB18 0x0005      ADDS     R0,R8,R5
   \   00000040   0x7840             LDRB     R0,[R0, #+1]
   \   00000042   0x2810             CMP      R0,#+16
   \   00000044   0xD119             BNE.N    ??DataUnpack_CSNR_4
     87          		{
     88          			for(k = j;k < RecLen - herdtimes; k++)
   \   00000046   0x46C1             MOV      R9,R8
   \                     ??DataUnpack_CSNR_5: (+1)
   \   00000048   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000004C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004E   0xEBB6 0x000B      SUBS     R0,R6,R11
   \   00000052   0x4581             CMP      R9,R0
   \   00000054   0xD20F             BCS.N    ??DataUnpack_CSNR_6
     89          			{
     90          				Tmp	 = RecBuf[k+1];
   \   00000056   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000005A   0xEB19 0x0005      ADDS     R0,R9,R5
   \   0000005E   0x7840             LDRB     R0,[R0, #+1]
   \   00000060   0xF88D 0x0000      STRB     R0,[SP, #+0]
     91          				
     92          				RecBuf[k] = Tmp;
   \   00000064   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000068   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000006C   0xF809 0x0005      STRB     R0,[R9, R5]
     93          			}
   \   00000070   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000074   0xE7E8             B.N      ??DataUnpack_CSNR_5
     94          			
     95          			herdtimes++;
   \                     ??DataUnpack_CSNR_6: (+1)
   \   00000076   0xF11B 0x0B01      ADDS     R11,R11,#+1
     96          		}
     97          	}
   \                     ??DataUnpack_CSNR_4: (+1)
   \   0000007A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000007E   0xE7CE             B.N      ??DataUnpack_CSNR_2
     98          		
     99          
    100              for(i = 0; i < RecLen - herdtimes - 10;i++)												//循环遍历
   \                     ??DataUnpack_CSNR_3: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x0007             MOVS     R7,R0
   \                     ??DataUnpack_CSNR_7: (+1)
   \   00000084   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000086   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000088   0xEBB6 0x000B      SUBS     R0,R6,R11
   \   0000008C   0x380A             SUBS     R0,R0,#+10
   \   0000008E   0x4287             CMP      R7,R0
   \   00000090   0xF080 0x8097      BCS.W    ??DataUnpack_CSNR_8
    101              {
    102          		if(		((RecBuf[i+0]) == FRAM_HERD0) 
    103          			&& 	((RecBuf[i+1]) == FRAM_HERD1)		
    104          		  )																		//报头
   \   00000094   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000096   0x5D78             LDRB     R0,[R7, R5]
   \   00000098   0x2810             CMP      R0,#+16
   \   0000009A   0xF040 0x8090      BNE.W    ??DataUnpack_CSNR_9
   \   0000009E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000A0   0x1978             ADDS     R0,R7,R5
   \   000000A2   0x7840             LDRB     R0,[R0, #+1]
   \   000000A4   0x2828             CMP      R0,#+40
   \   000000A6   0xF040 0x808A      BNE.W    ??DataUnpack_CSNR_9
    105          		{
    106          			DataLen = RecBuf[i+6];
   \   000000AA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000AC   0x1978             ADDS     R0,R7,R5
   \   000000AE   0x7980             LDRB     R0,[R0, #+6]
   \   000000B0   0x4682             MOV      R10,R0
    107          			if(		
    108          					(i+10+DataLen)  > RecLen							||
    109          			 		(RecBuf[i+10+DataLen] 	!= FRAM_END0)	||
    110          			 	 	(RecBuf[i+11+DataLen] 	!= FRAM_END1)
    111          			 )
   \   000000B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000B6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000BA   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   000000BE   0x300A             ADDS     R0,R0,#+10
   \   000000C0   0x4286             CMP      R6,R0
   \   000000C2   0xDB11             BLT.N    ??DataUnpack_CSNR_10
   \   000000C4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000CA   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   000000CE   0x1940             ADDS     R0,R0,R5
   \   000000D0   0x7A80             LDRB     R0,[R0, #+10]
   \   000000D2   0x2810             CMP      R0,#+16
   \   000000D4   0xD108             BNE.N    ??DataUnpack_CSNR_10
   \   000000D6   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D8   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000DC   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   000000E0   0x1940             ADDS     R0,R0,R5
   \   000000E2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000E4   0x282C             CMP      R0,#+44
   \   000000E6   0xD000             BEQ.N    ??DataUnpack_CSNR_11
    112          			 {	
    113          			 //i = i + 10 + DataLen;											//地址不对或帧尾错误，跳过此帧
    114          			 	continue;
   \                     ??DataUnpack_CSNR_10: (+1)
   \   000000E8   0xE069             B.N      ??DataUnpack_CSNR_9
    115          			 }
    116          			SumCheck8 = GetCheckSumNR((unsigned char *)&RecBuf[i+2],5);		   				//索引区校验
   \                     ??DataUnpack_CSNR_11: (+1)
   \   000000EA   0x2105             MOVS     R1,#+5
   \   000000EC   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000EE   0x1978             ADDS     R0,R7,R5
   \   000000F0   0x1C80             ADDS     R0,R0,#+2
   \   000000F2   0x.... 0x....      BL       GetCheckSumNR
   \   000000F6   0xF88D 0x0001      STRB     R0,[SP, #+1]
    117          			
    118          			if(	SumCheck8 != 	RecBuf[i+7] )
   \   000000FA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000FE   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000100   0x1979             ADDS     R1,R7,R5
   \   00000102   0x79C9             LDRB     R1,[R1, #+7]
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xD15A             BNE.N    ??DataUnpack_CSNR_9
    119          			{	
    120          				continue;
    121          			}
    122          			 
    123          			DataLen = RecBuf[i+6];
   \                     ??DataUnpack_CSNR_12: (+1)
   \   00000108   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000010A   0x1978             ADDS     R0,R7,R5
   \   0000010C   0x7980             LDRB     R0,[R0, #+6]
   \   0000010E   0x4682             MOV      R10,R0
    124          						
    125          			RecCRC16 = ((unsigned short)RecBuf[i+8+DataLen]) *256 + RecBuf[i+9+DataLen];	//校验	
   \   00000110   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000112   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000116   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   0000011A   0x1940             ADDS     R0,R0,R5
   \   0000011C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000011E   0xF44F 0x7180      MOV      R1,#+256
   \   00000122   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000124   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000128   0xEB1A 0x0207      ADDS     R2,R10,R7
   \   0000012C   0x1952             ADDS     R2,R2,R5
   \   0000012E   0x7A52             LDRB     R2,[R2, #+9]
   \   00000130   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000134   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    126          
    127          			switch(RecBuf[i+5]>>4)													//校验和算法判断
   \   00000138   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000013A   0x1978             ADDS     R0,R7,R5
   \   0000013C   0x7940             LDRB     R0,[R0, #+5]
   \   0000013E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000140   0x0900             LSRS     R0,R0,#+4
   \   00000142   0x2801             CMP      R0,#+1
   \   00000144   0xD004             BEQ.N    ??DataUnpack_CSNR_13
   \   00000146   0xD310             BCC.N    ??DataUnpack_CSNR_14
   \   00000148   0x2803             CMP      R0,#+3
   \   0000014A   0xD00E             BEQ.N    ??DataUnpack_CSNR_15
   \   0000014C   0xD20D             BCS.N    ??DataUnpack_CSNR_14
    128          			{
    129          					case	RS485_CHK_SUM:
    130          									//Check16 = GetCheckSum16(&RecBuf[i+2],6+DataLen);
    131          									////PrintfCOM0(("\r\n 16位校验和！");
    132          									break;
   \                     ??DataUnpack_CSNR_16: (+1)
   \   0000014E   0xE00C             B.N      ??DataUnpack_CSNR_14
    133          					case	RS485_CHK_CRC:
    134          									Check16 = GetCrc16Check(&RecBuf[i+2],6+DataLen);
   \                     ??DataUnpack_CSNR_13: (+1)
   \   00000150   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000154   0xF11A 0x0106      ADDS     R1,R10,#+6
   \   00000158   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000015A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000015C   0x1978             ADDS     R0,R7,R5
   \   0000015E   0x1C80             ADDS     R0,R0,#+2
   \   00000160   0x.... 0x....      BL       GetCrc16Check
   \   00000164   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    135          									////PrintfCOM0(("\r\n CRC校验！");
    136          									break;
   \   00000168   0xE7FF             B.N      ??DataUnpack_CSNR_14
    137          					case	RS485_CHK_RESUM:
    138          									break;
    139          			}
    140          			
    141          			if(			RecCRC16  ==	Check16 	 )
   \                     ??DataUnpack_CSNR_15: (+1)
   \                     ??DataUnpack_CSNR_14: (+1)
   \   0000016A   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000016E   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000172   0x4288             CMP      R0,R1
   \   00000174   0xD123             BNE.N    ??DataUnpack_CSNR_9
    142          			{
    143          				sprotocolpara->sourceaddr 	= RecBuf[i+2];	
   \   00000176   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000178   0x1978             ADDS     R0,R7,R5
   \   0000017A   0x7880             LDRB     R0,[R0, #+2]
   \   0000017C   0x7020             STRB     R0,[R4, #+0]
    144          				sprotocolpara->destaddr 		= RecBuf[i+3];	
   \   0000017E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000180   0x1978             ADDS     R0,R7,R5
   \   00000182   0x78C0             LDRB     R0,[R0, #+3]
   \   00000184   0x7060             STRB     R0,[R4, #+1]
    145          				sprotocolpara->framnum   		= RecBuf[i+4];
   \   00000186   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000188   0x1978             ADDS     R0,R7,R5
   \   0000018A   0x7900             LDRB     R0,[R0, #+4]
   \   0000018C   0x70A0             STRB     R0,[R4, #+2]
    146          				sprotocolpara->framcode  		= RecBuf[i+5]&0x0f;
   \   0000018E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000190   0x1978             ADDS     R0,R7,R5
   \   00000192   0x7940             LDRB     R0,[R0, #+5]
   \   00000194   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000198   0x70E0             STRB     R0,[R4, #+3]
    147          				sprotocolpara->datalen     	= DataLen; 
   \   0000019A   0xF884 0xA008      STRB     R10,[R4, #+8]
    148          				
    149          				memcpy(sprotocolpara->databuf,&RecBuf[i+8],DataLen);				//数据拷贝
   \   0000019E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001A2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001A4   0x1978             ADDS     R0,R7,R5
   \   000001A6   0x3008             ADDS     R0,R0,#+8
   \   000001A8   0x9003             STR      R0,[SP, #+12]
   \   000001AA   0x6860             LDR      R0,[R4, #+4]
   \   000001AC   0x9001             STR      R0,[SP, #+4]
   \   000001AE   0x4652             MOV      R2,R10
   \   000001B0   0x9903             LDR      R1,[SP, #+12]
   \   000001B2   0x9801             LDR      R0,[SP, #+4]
   \   000001B4   0x.... 0x....      BL       __aeabi_memcpy
   \   000001B8   0x9801             LDR      R0,[SP, #+4]
    150          				 
    151          				return	1;
   \   000001BA   0x2001             MOVS     R0,#+1
   \   000001BC   0xE002             B.N      ??DataUnpack_CSNR_1
    152          			}
    153          		}
    154          	}
   \                     ??DataUnpack_CSNR_9: (+1)
   \   000001BE   0x1C7F             ADDS     R7,R7,#+1
   \   000001C0   0xE760             B.N      ??DataUnpack_CSNR_7
    155            
    156              return	0;
   \                     ??DataUnpack_CSNR_8: (+1)
   \   000001C2   0x2000             MOVS     R0,#+0
   \                     ??DataUnpack_CSNR_1: (+1)
   \   000001C4   0xB005             ADD      SP,SP,#+20
   \   000001C6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    157          }

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     312   DataPackage_CSNR
       312   -> GetCheckSumNR
       312   -> GetCrc16Check
       312   -> __aeabi_memclr4
       312   -> __aeabi_memcpy
      56   DataUnpack_CSNR
        56   -> GetCheckSumNR
        56   -> GetCrc16Check
        56   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     256  ?_0
     380  DataPackage_CSNR
     458  DataUnpack_CSNR

 
 256 bytes in section .rodata
 838 bytes in section .text
 
 838 bytes of CODE  memory
 256 bytes of CONST memory

Errors: none
Warnings: none
