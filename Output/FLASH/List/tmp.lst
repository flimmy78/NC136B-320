###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Dec/2017  08:42:43
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC136B-320 IC¿¨Ä£¿é\Application\User\tmp.c
#    Command line =  
#        "F:\iar\NC136B-320 IC¿¨Ä£¿é\Application\User\tmp.c" -D RELEASE -lCN
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\List\tmp.lst
#    Object file  =  
#        F:\iar\NC136B-320
#        IC¿¨Ä£¿é\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Output\FLASH\Obj\tmp.o
#
###############################################################################

F:\iar\NC136B-320 IC¿¨Ä£¿é\Application\User\tmp.c
      1          #include    "includes.h"  
      2          
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void	IO0PIN_R(uint8	x)
      5          {
      6          }
   \                     IO0PIN_R: (+1)
   \   00000000   0x4770             BX       LR               ;; return
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void	IO0CLR_W(uint8	x)
      9          {
     10          }
   \                     IO0CLR_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void	IO0SET_W(uint8	x)
     13          {
     14          }
   \                     IO0SET_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     15          
     16          
     17          
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void	IO0DIR_IN(uint8	x)   
     20          {
     21          }
   \                     IO0DIR_IN: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void	 IO0DIR_OUT(uint8 x)  
     24          {
     25          }
   \                     IO0DIR_OUT: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void	 IO1DIR_OUT(uint8 x)  
     28          {
     29          }
   \                     IO1DIR_OUT: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     30          
     31          //void	 NOP(void)  
     32          //{
     33          //	FeedDog();
     34          //}
     35          
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void	 IO2DIR_OUT(uint8 x)  
     38          {
     39          }
   \                     IO2DIR_OUT: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     40          void	 IO2PIN_W(uint8	x) 
     41          {
     42          }
   \                     IO2PIN_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     43          void	 IO1PIN_W(uint8	x) 
     44          {
     45          }
   \                     IO1PIN_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     46          
     47          //void	ReCalPara(uint8	x)
     48          //{
     49          //}
     50          
     51          //uint8 ReadFlsh(uint32 Addr,uint8 *buf,uint32 Len)
     52          //{	
     53          //	return	MX25L1602_RD(Addr, Len,(INT8U* )buf);
     54          //}
     55          //
     56          //INT8U	WriteFlsh(INT32U Dst, uint8 * sFlshRec, INT32U NByte)
     57          //{
     58          //	return	MX25L1602_WR(Dst,(INT8U*)sFlshRec,NByte);
     59          //}
     60          
     61          
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void IO0PIN_W(uint8	Val,uint8	x)   
     64          {
     65          }
   \                     IO0PIN_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     66          
     67          

   \                                 In section .bss, align 1
     68          uint8	l_hostevtflg;
   \                     l_hostevtflg:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     69          uint8	GetHostEvtFlg(void)
     70          {
     71          	return	 l_hostevtflg;
   \                     GetHostEvtFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     72          }
     73          
     74          #define		START_EVT		31		
     75          //----------------------------------------------------------------------------
     76          // Ãû    ³Æ£º   uint8 JudgeStartEvt(void)
     77          // ¹¦    ÄÜ:    ·µ»Ø¿ª»úÊÂ¼þ±êÊ¶
     78          // Èë¿Ú²ÎÊý£º 
     79          // ³ö¿Ú²ÎÊý£º
     80          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     81          uint8 	JudgeStartEvt(void)
     82          {
     83          	uint8	EvtType = RIGHT_DATA;
   \                     JudgeStartEvt: (+1)
   \   00000000   0x20FF             MOVS     R0,#+255
     84          	static	uint32	Time = 0;
     85          	
     86          	EvtType = RIGHT_DATA;
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x0008             MOVS     R0,R1
     87          	
     88          	if( Time++ == 0 )
   \   00000006   0x....             LDR.N    R1,??DataTable3_3
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1C4A             ADDS     R2,R1,#+1
   \   0000000C   0x....             LDR.N    R3,??DataTable3_3
   \   0000000E   0x601A             STR      R2,[R3, #+0]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD104             BNE.N    ??JudgeStartEvt_0
     89          	{
     90          		EvtType = START_EVT;	
   \   00000014   0x211F             MOVS     R1,#+31
   \   00000016   0x0008             MOVS     R0,R1
     91          
     92          		l_hostevtflg = 	START_EVT;
   \   00000018   0x211F             MOVS     R1,#+31
   \   0000001A   0x....             LDR.N    R2,??DataTable3_2
   \   0000001C   0x7011             STRB     R1,[R2, #+0]
     93          	}
     94          	
     95          	return	EvtType;
   \                     ??JudgeStartEvt_0: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x4770             BX       LR               ;; return
     96          }

   \                                 In section .bss, align 4
   \                     ??Time:
   \   00000000                      DS8 4
     97          
     98          //----------------------------------------------------------------------------
     99          // Ãû    ³Æ£º   void PrinfSysInfo(void)
    100          // ¹¦    ÄÜ:    ÏµÍ³³õÊ¼»¯
    101          // Èë¿Ú²ÎÊý£º
    102          // ³ö¿Ú²ÎÊý£º
    103          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    104          void	PrinfSysInfo(void)
    105          {
    106          //	stcDeviceInfo		sDeviceInfo;
    107          //	stcReviseHight		sReviseHight;
    108          //	stcFixInfo  		sFix;
    109          //	stcDensity			sDensity;
    110          //	float				Density;
    111          //	int16				ReviseHight;
    112          //	uint8				OilBoxCod;
    113          //
    114          //
    115          //	//DisplayTime();
    116          //	Delay_Nms(1*1000);
    117          //
    118          //	DisplaySet(100,1,"SV.00");		
    119          ////	DisplaySet(100,1,"10.08");
    120          //
    121          //	DisplaySet(100,1,"HV02");
    122          //	Delay_Nms(2*1000);
    123          //
    124          //
    125          //	ReadHostInfo((stcDeviceInfo *)&sDeviceInfo);		//¶Á³ö³§ÐÅÏ¢
    126          //	
    127          //	//printfcom0("\r\n ÄÜºÄÓ²¼þ°æ±¾ºÅ:	");
    128          //	///SendCOM0(sDeviceInfo.HardwareVer,sizeof(sDeviceInfo.HardwareVer));
    129          //	//printfcom0("\r\n ÄÜºÄÈí¼þ°æ±¾ºÅ:	");
    130          //	///SendCOM0(sDeviceInfo.SoftwareVer,sizeof(sDeviceInfo.SoftwareVer));
    131          //	
    132          //	//printfcom0("\r\n ");
    133          //	OilBoxCod = GetOilBoxCod();
    134          //	///printfcom0("\r\n ÓÍÏäÄ£ÐÍºÅ:	%d",OilBoxCod);
    135          //
    136          //	DisplaySet(150,1,"C_%u",OilBoxCod);	
    137          //
    138          //	Delay_Nms(1*1000);
    139          //  	if(ReadReviseHight((stcReviseHight *) &sReviseHight))
    140          //  	{	
    141          //  		ReviseHight = sReviseHight.ReviseHight / 10;
    142          //  		//printfcom0("\r\n ÐÞÕý¸ß¶ÈÎª:	%d",ReviseHight*10);
    143          //  		DisplaySet(100,1,"H_%d.",ReviseHight*10);		
    144          //	}
    145          //	Delay_Nms(1*1000);
    146          //		
    147          //  	if( ReadDensity((stcDensity *) &sDensity))			//È¡ÃÜ¶È
    148          //	{
    149          //		Density	=  ((float)sDensity.Density / 1000);
    150          //  		DisplaySet(60,1,"d_%d.",(uint16)(1000*Density));		
    151          //  	}
    152          //  	Delay_Nms(1*1000);
    153          //
    154          // 	ReadFixInfo((stcFixInfo *)&sFix);
    155          // 	DisplaySet(100,1,"%d",sFix.LocoTyp);
    156          //	Delay_Nms(1*1000);		
    157          // 	//DisplaySet(100,1,"%d",(uint16)*sFix.LocoNum);		
    158          // 	DisplaySet(100,1,"N_%d",sFix.LocoNum[0]+sFix.LocoNum[1]*256);	
    159          //		
    160          //// 	Delay_Nms(2*1000);
    161          //
    162          //	DisplaySet(60,1,"        ");
    163          //  	DisplaySet(60,1,"88888888");		
    164          // 	DisplaySet(60,1,"        ");	
    165          	
    166          //	Delay_Nms(2*1000);	
    167          }
   \                     PrinfSysInfo: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    168          

   \                                 In section .text, align 2, keep-with-next
    169          uint8 OneTask(void)   
    170          {
    171          //	UART0Init();
    172          //	UART1Init();
    173          //	UART2Init();
    174          //	UART3Init();
    175          
    176          //	InitDisplay();
    177          //	DisplayString("88888888");
    178          	
    179          
    180          	//ClaerDisplaySetWithoutStore();
    181          
    182          	//InitLed();
    183          
    184          
    185          ////	InitCardIO();
    186          ////	InitFramIO();
    187          ////	InitFlashIO();
    188          ////
    189          ////	InitDS3231();
    190          ////	InitAdc();
    191          ////
    192          ////	Time0Init();
    193          ////	Time1Init();
    194          ////	Time2Init();
    195          	return	1;
   \                     OneTask: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    196          }
    197          
    198          //uint8 HoldTask(void)   
    199          //{
    200          //	HoldDisplay();
    201          //	HoldLed();
    202          //	HoldCard();								//IC¿¨Î¬»¤
    203          //	
    204          //	return	1;
    205          //}
    206          
    207          #define			PLUG_IN_CARD		1
    208          //----------------------------------------------------------------------------
    209          // Ãû    ³Æ£º   void IncDisplay(void)
    210          // ¹¦    ÄÜ:    ÏµÍ³³õÊ¼»¯
    211          // Èë¿Ú²ÎÊý£º
    212          // ³ö¿Ú²ÎÊý£º
    213          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    214          void IncDisplay(void)
    215          { 
   \                     IncDisplay: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    216          	static	uint32		Time = 0;
    217          //	static	uint32		Times = 0;
    218          	int16	Prs1,Prs2;	
    219          	uint8	i;
    220          
    221          	Time = GetSysTime();
   \   00000004   0x.... 0x....      BL       GetSysTime
   \   00000008   0x....             LDR.N    R1,??DataTable3_4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    222          
    223          	for(i =0 ;i<3;)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0006             MOVS     R6,R0
   \                     ??IncDisplay_0: (+1)
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E03             CMP      R6,#+3
   \   00000014   0xDA2D             BGE.N    ??IncDisplay_1
    224          	{
    225          //		COM0Task();
    226          		
    227          		Prs1 = GetDip1Prs();
   \   00000016   0x.... 0x....      BL       GetDip1Prs
   \   0000001A   0x0004             MOVS     R4,R0
    228          		Prs2 = GetDip2Prs();		
   \   0000001C   0x.... 0x....      BL       GetDip2Prs
   \   00000020   0x0005             MOVS     R5,R0
    229          		
    230          		//printfcom0("\r\n %4d.%4d",Prs1,Prs2);
    231          		if(GetSysTime() - Time > 100)
   \   00000022   0x.... 0x....      BL       GetSysTime
   \   00000026   0x....             LDR.N    R1,??DataTable3_4
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x1A40             SUBS     R0,R0,R1
   \   0000002C   0x2865             CMP      R0,#+101
   \   0000002E   0xD3EF             BCC.N    ??IncDisplay_0
    232          		{		
    233          			i++;
   \   00000030   0x1C76             ADDS     R6,R6,#+1
    234          			Time = GetSysTime();
   \   00000032   0x.... 0x....      BL       GetSysTime
   \   00000036   0x....             LDR.N    R1,??DataTable3_4
   \   00000038   0x6008             STR      R0,[R1, #+0]
    235          	
    236          			if(i%2 == 0)
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000042   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD109             BNE.N    ??IncDisplay_2
    237          			{
    238          				DisplaySet(100,1,"%4d.%4d.",Prs1,Prs2);
   \   0000004A   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000004C   0x9500             STR      R5,[SP, #+0]
   \   0000004E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000050   0x0023             MOVS     R3,R4
   \   00000052   0x....             LDR.N    R2,??DataTable3_5
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x2064             MOVS     R0,#+100
   \   00000058   0x.... 0x....      BL       DisplaySet
   \   0000005C   0xE7D8             B.N      ??IncDisplay_0
    239          			}
    240          			else
    241          			{
    242          				DisplaySet(100,1,"%4d.%4d",Prs1,Prs2);
   \                     ??IncDisplay_2: (+1)
   \   0000005E   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000060   0x9500             STR      R5,[SP, #+0]
   \   00000062   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000064   0x0023             MOVS     R3,R4
   \   00000066   0x....             LDR.N    R2,??DataTable3_6
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2064             MOVS     R0,#+100
   \   0000006C   0x.... 0x....      BL       DisplaySet
   \   00000070   0xE7CE             B.N      ??IncDisplay_0
    243          			}
    244          		}
    245          	}
    246          
    247          
    248          /*	while(GetPlugFlg() == PLUG_IN_CARD)  //ÓÐ¶«Î÷²åÈë
    249          	{
    250          		COM0Task();
    251          
    252          		if(Times < 1*20)		//1·ÖÖÓÍ¨ÐÅ
    253          		{	
    254          			COM0Task();
    255          		}
    256          					
    257          		Prs1 = GetDip1Prs();
    258          		Prs2 = GetDip2Prs();
    259          
    260          		if(GetSysTime() - Time > 100)
    261          		{		
    262          			Time = GetSysTime();
    263          
    264          			Times++;
    265          			
    266          			if(Prs1<10000 && Prs2 < 10000)
    267          			{			
    268          				if(Times%2 == 0)
    269          				{
    270          					DisplaySet(100,1,"%4d.%4d.",Prs1,Prs2);
    271          				}
    272          				else
    273          				{
    274          					DisplaySet(100,1,"%4d.%4d",Prs1,Prs2);
    275          				}
    276          			}
    277          			else
    278          			{
    279          				DisplaySet(100,1,"%d",Prs1);
    280          				DisplaySet(100,1,"%d.",Prs2);
    281          			}
    282          		}
    283          		
    284          		if(Times > 1*60)		//2·ÖÖÓÍË³ö
    285          		{	
    286          			Delay_Nms(200);
    287          			return;
    288          		}
    289          	}	
    290          	
    291          	Delay_Nms(200);
    292          */	
    293          	DisplaySet(150,1,"%d",g_CurFlshRecNum);
   \                     ??IncDisplay_1: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable3_7
   \   00000074   0x6803             LDR      R3,[R0, #+0]
   \   00000076   0x....             ADR.N    R2,??DataTable3  ;; 0x25, 0x64, 0x00, 0x00
   \   00000078   0x2101             MOVS     R1,#+1
   \   0000007A   0x2096             MOVS     R0,#+150
   \   0000007C   0x.... 0x....      BL       DisplaySet
    294          	DisplaySet(150,1,"%d.",g_LshRedFlshRecNum);
   \   00000080   0x....             LDR.N    R0,??DataTable3_8
   \   00000082   0x6803             LDR      R3,[R0, #+0]
   \   00000084   0x....             ADR.N    R2,??DataTable3_1  ;; "%d."
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x2096             MOVS     R0,#+150
   \   0000008A   0x.... 0x....      BL       DisplaySet
    295          	printfcom0("\r\n g_CurFlshRecNum %d, g_LshRedFlshRecNum %d",g_CurFlshRecNum,g_LshRedFlshRecNum);
   \   0000008E   0x....             LDR.N    R0,??DataTable3_8
   \   00000090   0x6802             LDR      R2,[R0, #+0]
   \   00000092   0x....             LDR.N    R0,??DataTable3_7
   \   00000094   0x6801             LDR      R1,[R0, #+0]
   \   00000096   0x....             LDR.N    R0,??DataTable3_9
   \   00000098   0x.... 0x....      BL       printfcom0
    296          }
   \   0000009C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .bss, align 4
   \                     ??Time_1:
   \   00000000                      DS8 4
    297          

   \                                 In section .text, align 2, keep-with-next
    298          void	OneTaskTimes(void)
    299          {
   \                     OneTaskTimes: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    300          	OneTask();
   \   00000002   0x.... 0x....      BL       OneTask
    301          	
    302          	g_CurFlshRecNum 	= GetCurFlshRecNum();
   \   00000006   0x.... 0x....      BL       GetCurFlshRecNum
   \   0000000A   0x....             LDR.N    R1,??DataTable3_7
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    303          //	g_LshRedFlshRecNum  = GetLstFlshRecNum();
    304          //	g_LshRedFlshRecNum_gprs  = GetLstFlshRecNum_gprs();
    305          
    306          
    307             	//printfcom0("\r\n µ±Ç° %d,ÒÑ¶Á %d,ÒÑ·¢GPRS %d",g_CurFlshRecNum,g_LshRedFlshRecNum,g_LshRedFlshRecNum_gprs);
    308           	PrinfSysInfo();
   \   0000000E   0x.... 0x....      BL       PrinfSysInfo
    309          //	IncDisplay();
    310          	///InitEvtDealSys();
    311          	///InitErrDealSys();
    312          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x25 0x64          DC8      "%d."
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     l_hostevtflg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ??Time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ??Time_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     g_CurFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x34          DC8 "%4d.%4d."
   \              0x64 0x2E    
   \              0x25 0x34    
   \              0x64 0x2E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x25 0x34          DC8 "%4d.%4d"
   \              0x64 0x2E    
   \              0x25 0x34    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0D 0x0A          DC8 "\015\012 g_CurFlshRecNum %d, g_LshRedFlshRecNum %d"
   \              0x20 0x67    
   \              0x5F 0x43    
   \              0x75 0x72    
   \              0x46 0x6C    
   \              0x73 0x68    
   \              0x52 0x65    
   \              0x63 0x4E    
   \              0x75 0x6D    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x67    
   \              0x5F 0x4C    
   \              0x73 0x68    
   \              0x52 0x65    
   \              0x64 0x46    
   \              0x6C 0x73    
   \              0x68 0x52    
   \              0x65 0x63    
   \              0x4E 0x75    
   \              0x6D 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    313          
    314          uint8	GetLed0Com1Flg(void);
    315          uint8	GetLed1Com2Flg(void);
    316          //
    317          //void	LedTast(uint8	flg)
    318          //{
    319          //	static	uint32	Time = 0;
    320          //	uint8	led0com1flg 	= 0;
    321          //	uint8	led1com2flg 	= 0;
    322          //	uint8	led2com3flg 	= 0;
    323          //	uint8	locoworksta;
    324          //		
    325          //	if((GetSysTime()  - Time > 100) || flg == 1)
    326          //	{
    327          //		Time = GetSysTime();
    328          //
    329          //		led0com1flg = GetLed0Com1Flg();
    330          //		switch(led0com1flg)
    331          //		{
    332          //			case  COM_LED_REC:
    333          //								OffLed(COM1_STA_LED);
    334          //								OnLed(COM1_STA_LED,3000,50,50);
    335          //								break; //ÂýÉÁ
    336          //								
    337          //			case  COM_LED_DATA:
    338          //								OffLed(COM1_STA_LED);
    339          //								OnLed(COM1_STA_LED,3000,5,5);
    340          //								break;  //ÂýÉÁ
    341          //			default:
    342          ////								printfcom0("\r\n com1 ÎÞÍ¨Ñ¶");
    343          //								OffLed(COM1_STA_LED);
    344          //		}
    345          //
    346          //		led1com2flg = GetLed1Com2Flg();
    347          //		switch(led1com2flg)
    348          //		{
    349          //			case  COM_LED_REC:
    350          //								OffLed(COM2_STA_LED);
    351          //								OnLed(COM2_STA_LED,3000,55,55);
    352          //								break; //ÂýÉÁ
    353          //								
    354          //			case  COM_LED_DATA:
    355          //								OffLed(COM2_STA_LED);
    356          //								OnLed(COM2_STA_LED,3000,6,6);
    357          //								break;  //ÂýÉÁ
    358          //			default:
    359          ////								printfcom0("\r\n com2 ÎÞÍ¨Ñ¶");
    360          //								OffLed(COM2_STA_LED);
    361          //		}
    362          //
    363          //		led2com3flg = GetLed2Com3Flg();
    364          //		switch(led2com3flg)
    365          //		{
    366          //			case  COM_LED_REC:
    367          //								OffLed(COM3_STA_LED);
    368          //								OnLed(COM3_STA_LED,3000,45,45);
    369          //								break; //ÂýÉÁ
    370          //								
    371          //			case  COM_LED_DATA:
    372          //								OffLed(COM3_STA_LED);
    373          //								OnLed(COM3_STA_LED,3000,4,4);
    374          //								break;  //ÂýÉÁ
    375          //			default:
    376          ////								printfcom0("\r\n com3 ÎÞÍ¨Ñ¶");
    377          //								OffLed(COM3_STA_LED);
    378          //		}
    379          ////
    380          ////		if(GetMySpeed1())
    381          ////		{
    382          ////			OnLed(SPEED1_LED,3000,4,4);
    383          ////		}
    384          ////		else
    385          ////		{
    386          ////			OffLed(SPEED1_LED);
    387          ////		}
    388          ////
    389          ////		if(GetMySpeed2())
    390          ////		{
    391          ////			OnLed(SPEED2_LED,3000,4,4);
    392          ////		}
    393          ////		else
    394          ////		{
    395          ////			OffLed(SPEED2_LED);
    396          ////		}
    397          ////
    398          ////		if(GetMyEngRotSpd())
    399          ////		{
    400          ////			OnLed(CSPEED_LED,3000,4,4);
    401          ////		}
    402          ////		else
    403          ////		{
    404          ////			OffLed(CSPEED_LED);
    405          ////		}
    406          ////
    407          ////		locoworksta = GetMyLocoWorkState();
    408          ////		switch(locoworksta)
    409          ////		{
    410          ////			case 0x01<<0:
    411          ////					OnLed(LOCOSTA_LED,3000,2,2);
    412          ////					break;
    413          ////			case 0x01<<4:
    414          ////					OnLed(LOCOSTA_LED,3000,10,10);
    415          ////					break;
    416          ////			case 0x01<<3:
    417          ////					OnLed(LOCOSTA_LED,3000,90,40);
    418          ////					break;
    419          ////			case 0x01<<2:
    420          ////					OnLed(LOCOSTA_LED,3000,150,60);
    421          ////					break;
    422          ////			default:
    423          ////				OffLed(LOCOSTA_LED);
    424          ////
    425          ////		}
    426          //	}
    427          //}
    428          //
    429          //void	DisplayOnceInfo(void)
    430          //{
    431          //	int16	hig1,hig2;
    432          //	uint16  speed1,speed2;
    433          //	uint16	cspeed;
    434          //	uint8	worksta;
    435          //
    436          //	hig1 	= GetDip1Hig();
    437          //	hig2 	= GetDip2Hig();
    438          //	speed1 	= GetMySpeed1();
    439          //	speed2 	= GetMySpeed2();
    440          //	cspeed 	= GetMyEngRotSpd();
    441          //	worksta	= GetMyLocoWorkState();
    442          //
    443          //	ClaerDisplaySetWithoutStore();
    444          //
    445          //	DisplaySet(150,1,"%4d.%4d",hig1%10000,hig2%10000);
    446          //	DisplaySet(150,1,"V-%d",speed1%1000);
    447          //	DisplaySet(150,1,"V.%d",speed2%1000);
    448          //	DisplaySet(150,1,"C.%d",cspeed%10000);
    449          //	DisplaySet(150,1,"%d",worksta);
    450          //
    451          ////	printfcom0("\r\n hig1 %d,%d,%d,%d,%d,%d ",hig1,hig2,speed1,speed2,cspeed,worksta);
    452          //}
    453          
    454          //
    455          //void	DisplayDipVal()
    456          //{
    457          //	static	uint32	Time = 0;
    458          //	static	uint32	times = 0;
    459          //	static	uint32	ZeroTimes = 0;
    460          //	static	uint32	errtimes = 0;
    461          //	uint8	hosterrflg;
    462          //	uint8	diperrflg;
    463          //	
    464          //	if(GetSysTime()  - Time > 150)
    465          //	{
    466          //		Time = GetSysTime();
    467          //		times++;
    468          //
    469          //		if(times < 10)
    470          //		{
    471          //			if(times == 5)
    472          //			{	
    473          //				DisplayOnceInfo();
    474          //			}
    475          //			Delay_Nms(50);
    476          //			return;
    477          //		}
    478          //
    479          //		hosterrflg = GetHostErrFlg();
    480          //		diperrflg  = GetDipErrFlg();
    481          //
    482          //		if(hosterrflg != RIGHT_DATA || diperrflg != RIGHT_DATA)
    483          //		{
    484          //			errtimes++;
    485          //			if(errtimes % 4 == 0)
    486          //			{
    487          //				 if(hosterrflg != RIGHT_DATA  )
    488          //				 {
    489          //					DisplaySet(50,1,"E-%u",hosterrflg);	//ÏÔÊ¾ÓÍÁ¿Öµ
    490          //				 }
    491          //				 if(diperrflg != RIGHT_DATA  )
    492          //				 {
    493          //					DisplaySet(50,1,"E-%u",diperrflg);	//ÏÔÊ¾ÓÍÁ¿Öµ
    494          //				 }
    495          //
    496          //				 return;
    497          //			}
    498          //		}
    499          //
    500          //		if(g_DipDisVal)
    501          //		{
    502          //			DisplaySet(60,1,"%u",g_DipDisVal % 10000);	//ÏÔÊ¾ÓÍÁ¿Öµ
    503          //			ZeroTimes = 0;
    504          //		}	
    505          //		else
    506          //		{
    507          //			ZeroTimes++;
    508          //			if(ZeroTimes > 5)
    509          //			{
    510          //				DisplaySet(60,1,"%u",g_DipDisVal % 10000);	//ÏÔÊ¾ÓÍÁ¿Öµ
    511          //			}
    512          //		}		
    513          //		
    514          //		if(times %20 == 0)
    515          //		{
    516          //			InitDisplay();
    517          //		}
    518          //		
    519          //		OnLed(RUN_LED,3000,5,5);
    520          //	}
    521          //}	
    522          //
    523          //uint8 TestTask(void)  
    524          //{
    525          //	uint32	FlshAddr;
    526          //
    527          //	stcFlshRec sFlshRec;
    528          //
    529          //	g_CurFlshRecNum++;
    530          // 	StoreCurFlshRecNum( g_CurFlshRecNum );           		//°ÑÁ÷Ë®ºÅ´æÈëÌúµç
    531          //	ReadCurFlshRecNum( g_CurFlshRecNum );           		//°ÑÁ÷Ë®ºÅ´æÈëÌúµç	
    532          //	//printfcom0("\r\n g_CurFlshRecNum %d",g_CurFlshRecNum);
    533          //
    534          //  	FlshAddr = GetRecNumAddr( g_CurFlshRecNum );
    535          //    
    536          //	sFlshRec.StoreCnt =  g_CurFlshRecNum;
    537          //	if(!WriteFlsh(FlshAddr, (uint8 *)&sFlshRec, sizeof(sFlshRec)))
    538          //	{
    539          //		//printfcom0("\r\n WriteFlsh %d",FlshAddr);		
    540          //	}
    541          //
    542          //	WriteFlsh(FlshAddr, (uint8 *)&sFlshRec, sizeof(sFlshRec));
    543          //	//printfcom0("\r\n sFlshRec.StoreCnt %d",sFlshRec.StoreCnt);
    544          //	return 1;
    545          //}
    546          
    547          extern	stcFIFO 	sErrFIFO;
    548          extern	stcFIFO		sStoreErrFIFO;
    549          extern	stcFIFO     sUART6RecFIFO;                          //¶¨Òå´®¿Ú0½ÓÊÕFIFO½á¹¹
    550          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GetHostEvtFlg
       0   IO0CLR_W
       0   IO0DIR_IN
       0   IO0DIR_OUT
       0   IO0PIN_R
       0   IO0PIN_W
       0   IO0SET_W
       0   IO1DIR_OUT
       0   IO1PIN_W
       0   IO2DIR_OUT
       0   IO2PIN_W
      24   IncDisplay
        24   -> DisplaySet
        24   -> GetDip1Prs
        24   -> GetDip2Prs
        24   -> GetSysTime
        24   -> printfcom0
       0   JudgeStartEvt
       0   OneTask
       8   OneTaskTimes
         8   -> GetCurFlshRecNum
         8   -> OneTask
         8   -> PrinfSysInfo
       0   PrinfSysInfo


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      12  ?_0
       8  ?_1
       4  ?_2
       4  ?_3
      48  ?_4
       6  GetHostEvtFlg
       2  IO0CLR_W
       2  IO0DIR_IN
       2  IO0DIR_OUT
       2  IO0PIN_R
       2  IO0PIN_W
       2  IO0SET_W
       2  IO1DIR_OUT
       2  IO1PIN_W
       2  IO2DIR_OUT
       2  IO2PIN_W
     158  IncDisplay
      34  JudgeStartEvt
       4  OneTask
      20  OneTaskTimes
       2  PrinfSysInfo
       4  Time
       4  Time
       1  l_hostevtflg

 
   9 bytes in section .bss
  76 bytes in section .rodata
 284 bytes in section .text
 
 284 bytes of CODE  memory
  76 bytes of CONST memory
   9 bytes of DATA  memory

Errors: none
Warnings: none
